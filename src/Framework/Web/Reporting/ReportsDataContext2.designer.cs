#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace InfoControl.Web.Reporting.DataClasses
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="OBSNET_SIGRAS")]
	public partial class ReportsDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertReportColumn(ReportColumn instance);
    partial void UpdateReportColumn(ReportColumn instance);
    partial void DeleteReportColumn(ReportColumn instance);
    partial void InsertReportTablesSchema(ReportTablesSchema instance);
    partial void UpdateReportTablesSchema(ReportTablesSchema instance);
    partial void DeleteReportTablesSchema(ReportTablesSchema instance);
    partial void InsertReportColumnsSchema(ReportColumnsSchema instance);
    partial void UpdateReportColumnsSchema(ReportColumnsSchema instance);
    partial void DeleteReportColumnsSchema(ReportColumnsSchema instance);
    partial void InsertReportDataFunction(ReportDataFunction instance);
    partial void UpdateReportDataFunction(ReportDataFunction instance);
    partial void DeleteReportDataFunction(ReportDataFunction instance);
    partial void InsertReportDataType(ReportDataType instance);
    partial void UpdateReportDataType(ReportDataType instance);
    partial void DeleteReportDataType(ReportDataType instance);
    partial void InsertReportFilter(ReportFilter instance);
    partial void UpdateReportFilter(ReportFilter instance);
    partial void DeleteReportFilter(ReportFilter instance);
    partial void InsertReportFilterType(ReportFilterType instance);
    partial void UpdateReportFilterType(ReportFilterType instance);
    partial void DeleteReportFilterType(ReportFilterType instance);
    partial void InsertReport(Report instance);
    partial void UpdateReport(Report instance);
    partial void DeleteReport(Report instance);
    partial void InsertReportSort(ReportSort instance);
    partial void UpdateReportSort(ReportSort instance);
    partial void DeleteReportSort(ReportSort instance);
    #endregion
		
		public ReportsDataContext() : 
				base(global::InfoControl.Properties.Settings.Default.OBSNET_SIGRASConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ReportsDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ReportsDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ReportsDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ReportsDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ReportColumn> ReportColumns
		{
			get
			{
				return this.GetTable<ReportColumn>();
			}
		}
		
		public System.Data.Linq.Table<ReportTablesSchema> ReportTablesSchemas
		{
			get
			{
				return this.GetTable<ReportTablesSchema>();
			}
		}
		
		public System.Data.Linq.Table<ReportColumnsSchema> ReportColumnsSchemas
		{
			get
			{
				return this.GetTable<ReportColumnsSchema>();
			}
		}
		
		public System.Data.Linq.Table<ReportDataFunction> ReportDataFunctions
		{
			get
			{
				return this.GetTable<ReportDataFunction>();
			}
		}
		
		public System.Data.Linq.Table<ReportDataType> ReportDataTypes
		{
			get
			{
				return this.GetTable<ReportDataType>();
			}
		}
		
		public System.Data.Linq.Table<ReportFilter> ReportFilters
		{
			get
			{
				return this.GetTable<ReportFilter>();
			}
		}
		
		public System.Data.Linq.Table<ReportFilterType> ReportFilterTypes
		{
			get
			{
				return this.GetTable<ReportFilterType>();
			}
		}
		
		public System.Data.Linq.Table<Report> Reports
		{
			get
			{
				return this.GetTable<Report>();
			}
		}
		
		public System.Data.Linq.Table<ReportSort> ReportSorts
		{
			get
			{
				return this.GetTable<ReportSort>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReportColumns")]
	public partial class ReportColumn : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReportId;
		
		private int _ReportTablesSchemaId;
		
		private int _ReportColumnsSchemaId;
		
		private int _ReportDataTypeId;
		
		private bool _IsMatrix;
		
		private EntityRef<ReportColumnsSchema> _ReportColumnsSchema;
		
		private EntityRef<Report> _Report;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReportIdChanging(int value);
    partial void OnReportIdChanged();
    partial void OnReportTablesSchemaIdChanging(int value);
    partial void OnReportTablesSchemaIdChanged();
    partial void OnReportColumnsSchemaIdChanging(int value);
    partial void OnReportColumnsSchemaIdChanged();
    partial void OnReportDataTypeIdChanging(int value);
    partial void OnReportDataTypeIdChanged();
    partial void OnIsMatrixChanging(bool value);
    partial void OnIsMatrixChanged();
    #endregion
		
		public ReportColumn()
		{
			this._ReportColumnsSchema = default(EntityRef<ReportColumnsSchema>);
			this._Report = default(EntityRef<Report>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ReportId
		{
			get
			{
				return this._ReportId;
			}
			set
			{
				if ((this._ReportId != value))
				{
					if (this._Report.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReportIdChanging(value);
					this.SendPropertyChanging();
					this._ReportId = value;
					this.SendPropertyChanged("ReportId");
					this.OnReportIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportTablesSchemaId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ReportTablesSchemaId
		{
			get
			{
				return this._ReportTablesSchemaId;
			}
			set
			{
				if ((this._ReportTablesSchemaId != value))
				{
					if (this._ReportColumnsSchema.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReportTablesSchemaIdChanging(value);
					this.SendPropertyChanging();
					this._ReportTablesSchemaId = value;
					this.SendPropertyChanged("ReportTablesSchemaId");
					this.OnReportTablesSchemaIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportColumnsSchemaId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ReportColumnsSchemaId
		{
			get
			{
				return this._ReportColumnsSchemaId;
			}
			set
			{
				if ((this._ReportColumnsSchemaId != value))
				{
					if (this._ReportColumnsSchema.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReportColumnsSchemaIdChanging(value);
					this.SendPropertyChanging();
					this._ReportColumnsSchemaId = value;
					this.SendPropertyChanged("ReportColumnsSchemaId");
					this.OnReportColumnsSchemaIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportDataTypeId", DbType="Int NOT NULL")]
		public int ReportDataTypeId
		{
			get
			{
				return this._ReportDataTypeId;
			}
			set
			{
				if ((this._ReportDataTypeId != value))
				{
					this.OnReportDataTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ReportDataTypeId = value;
					this.SendPropertyChanged("ReportDataTypeId");
					this.OnReportDataTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsMatrix", DbType="Bit NOT NULL")]
		public bool IsMatrix
		{
			get
			{
				return this._IsMatrix;
			}
			set
			{
				if ((this._IsMatrix != value))
				{
					this.OnIsMatrixChanging(value);
					this.SendPropertyChanging();
					this._IsMatrix = value;
					this.SendPropertyChanged("IsMatrix");
					this.OnIsMatrixChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReportColumnsSchema_ReportColumn", Storage="_ReportColumnsSchema", ThisKey="ReportColumnsSchemaId,ReportTablesSchemaId", OtherKey="ReportColumnsSchemaId,ReportTablesSchemaId", IsForeignKey=true)]
		public ReportColumnsSchema ReportColumnsSchema
		{
			get
			{
				return this._ReportColumnsSchema.Entity;
			}
			set
			{
				ReportColumnsSchema previousValue = this._ReportColumnsSchema.Entity;
				if (((previousValue != value) 
							|| (this._ReportColumnsSchema.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReportColumnsSchema.Entity = null;
						previousValue.ReportColumns.Remove(this);
					}
					this._ReportColumnsSchema.Entity = value;
					if ((value != null))
					{
						value.ReportColumns.Add(this);
						this._ReportColumnsSchemaId = value.ReportColumnsSchemaId;
						this._ReportTablesSchemaId = value.ReportTablesSchemaId;
					}
					else
					{
						this._ReportColumnsSchemaId = default(int);
						this._ReportTablesSchemaId = default(int);
					}
					this.SendPropertyChanged("ReportColumnsSchema");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Report_ReportColumn", Storage="_Report", ThisKey="ReportId", OtherKey="ReportId", IsForeignKey=true)]
		public Report Report
		{
			get
			{
				return this._Report.Entity;
			}
			set
			{
				Report previousValue = this._Report.Entity;
				if (((previousValue != value) 
							|| (this._Report.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Report.Entity = null;
						previousValue.ReportColumns.Remove(this);
					}
					this._Report.Entity = value;
					if ((value != null))
					{
						value.ReportColumns.Add(this);
						this._ReportId = value.ReportId;
					}
					else
					{
						this._ReportId = default(int);
					}
					this.SendPropertyChanged("Report");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReportTablesSchema")]
	public partial class ReportTablesSchema : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReportTablesSchemaId;
		
		private string _Name;
		
		private string _SqlText;
		
		private EntitySet<ReportColumnsSchema> _ReportColumnsSchemas;
		
		private EntitySet<Report> _Reports;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReportTablesSchemaIdChanging(int value);
    partial void OnReportTablesSchemaIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSqlTextChanging(string value);
    partial void OnSqlTextChanged();
    #endregion
		
		public ReportTablesSchema()
		{
			this._ReportColumnsSchemas = new EntitySet<ReportColumnsSchema>(new Action<ReportColumnsSchema>(this.attach_ReportColumnsSchemas), new Action<ReportColumnsSchema>(this.detach_ReportColumnsSchemas));
			this._Reports = new EntitySet<Report>(new Action<Report>(this.attach_Reports), new Action<Report>(this.detach_Reports));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportTablesSchemaId", DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ReportTablesSchemaId
		{
			get
			{
				return this._ReportTablesSchemaId;
			}
			set
			{
				if ((this._ReportTablesSchemaId != value))
				{
					this.OnReportTablesSchemaIdChanging(value);
					this.SendPropertyChanging();
					this._ReportTablesSchemaId = value;
					this.SendPropertyChanged("ReportTablesSchemaId");
					this.OnReportTablesSchemaIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(1024)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SqlText", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string SqlText
		{
			get
			{
				return this._SqlText;
			}
			set
			{
				if ((this._SqlText != value))
				{
					this.OnSqlTextChanging(value);
					this.SendPropertyChanging();
					this._SqlText = value;
					this.SendPropertyChanged("SqlText");
					this.OnSqlTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReportTablesSchema_ReportColumnsSchema", Storage="_ReportColumnsSchemas", ThisKey="ReportTablesSchemaId", OtherKey="ReportTablesSchemaId")]
		public EntitySet<ReportColumnsSchema> ReportColumnsSchemas
		{
			get
			{
				return this._ReportColumnsSchemas;
			}
			set
			{
				this._ReportColumnsSchemas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReportTablesSchema_Report", Storage="_Reports", ThisKey="ReportTablesSchemaId", OtherKey="ReportTablesSchemaId")]
		public EntitySet<Report> Reports
		{
			get
			{
				return this._Reports;
			}
			set
			{
				this._Reports.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ReportColumnsSchemas(ReportColumnsSchema entity)
		{
			this.SendPropertyChanging();
			entity.ReportTablesSchema = this;
		}
		
		private void detach_ReportColumnsSchemas(ReportColumnsSchema entity)
		{
			this.SendPropertyChanging();
			entity.ReportTablesSchema = null;
		}
		
		private void attach_Reports(Report entity)
		{
			this.SendPropertyChanging();
			entity.ReportTablesSchema = this;
		}
		
		private void detach_Reports(Report entity)
		{
			this.SendPropertyChanging();
			entity.ReportTablesSchema = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReportColumnsSchema")]
	public partial class ReportColumnsSchema : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReportColumnsSchemaId;
		
		private int _ReportTablesSchemaId;
		
		private int _ReportDataTypeId;
		
		private string _Name;
		
		private string _Source;
		
		private string _ForeignKey;
		
		private string _PrimaryKey;
		
		private string _PrimaryTable;
		
		private string _PrimaryLabelColumn;
		
		private EntitySet<ReportColumn> _ReportColumns;
		
		private EntitySet<ReportFilter> _ReportFilters;
		
		private EntitySet<ReportSort> _ReportSorts;
		
		private EntityRef<ReportTablesSchema> _ReportTablesSchema;
		
		private EntityRef<ReportDataType> _ReportDataType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReportColumnsSchemaIdChanging(int value);
    partial void OnReportColumnsSchemaIdChanged();
    partial void OnReportTablesSchemaIdChanging(int value);
    partial void OnReportTablesSchemaIdChanged();
    partial void OnReportDataTypeIdChanging(int value);
    partial void OnReportDataTypeIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSourceChanging(string value);
    partial void OnSourceChanged();
    partial void OnForeignKeyChanging(string value);
    partial void OnForeignKeyChanged();
    partial void OnPrimaryKeyChanging(string value);
    partial void OnPrimaryKeyChanged();
    partial void OnPrimaryTableChanging(string value);
    partial void OnPrimaryTableChanged();
    partial void OnPrimaryLabelColumnChanging(string value);
    partial void OnPrimaryLabelColumnChanged();
    #endregion
		
		public ReportColumnsSchema()
		{
			this._ReportColumns = new EntitySet<ReportColumn>(new Action<ReportColumn>(this.attach_ReportColumns), new Action<ReportColumn>(this.detach_ReportColumns));
			this._ReportFilters = new EntitySet<ReportFilter>(new Action<ReportFilter>(this.attach_ReportFilters), new Action<ReportFilter>(this.detach_ReportFilters));
			this._ReportSorts = new EntitySet<ReportSort>(new Action<ReportSort>(this.attach_ReportSorts), new Action<ReportSort>(this.detach_ReportSorts));
			this._ReportTablesSchema = default(EntityRef<ReportTablesSchema>);
			this._ReportDataType = default(EntityRef<ReportDataType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportColumnsSchemaId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ReportColumnsSchemaId
		{
			get
			{
				return this._ReportColumnsSchemaId;
			}
			set
			{
				if ((this._ReportColumnsSchemaId != value))
				{
					this.OnReportColumnsSchemaIdChanging(value);
					this.SendPropertyChanging();
					this._ReportColumnsSchemaId = value;
					this.SendPropertyChanged("ReportColumnsSchemaId");
					this.OnReportColumnsSchemaIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportTablesSchemaId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ReportTablesSchemaId
		{
			get
			{
				return this._ReportTablesSchemaId;
			}
			set
			{
				if ((this._ReportTablesSchemaId != value))
				{
					if (this._ReportTablesSchema.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReportTablesSchemaIdChanging(value);
					this.SendPropertyChanging();
					this._ReportTablesSchemaId = value;
					this.SendPropertyChanged("ReportTablesSchemaId");
					this.OnReportTablesSchemaIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportDataTypeId", DbType="Int NOT NULL")]
		public int ReportDataTypeId
		{
			get
			{
				return this._ReportDataTypeId;
			}
			set
			{
				if ((this._ReportDataTypeId != value))
				{
					if (this._ReportDataType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReportDataTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ReportDataTypeId = value;
					this.SendPropertyChanged("ReportDataTypeId");
					this.OnReportDataTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(1024)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Source", DbType="VarChar(1024)")]
		public string Source
		{
			get
			{
				return this._Source;
			}
			set
			{
				if ((this._Source != value))
				{
					this.OnSourceChanging(value);
					this.SendPropertyChanging();
					this._Source = value;
					this.SendPropertyChanged("Source");
					this.OnSourceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ForeignKey", DbType="VarChar(1024)")]
		public string ForeignKey
		{
			get
			{
				return this._ForeignKey;
			}
			set
			{
				if ((this._ForeignKey != value))
				{
					this.OnForeignKeyChanging(value);
					this.SendPropertyChanging();
					this._ForeignKey = value;
					this.SendPropertyChanged("ForeignKey");
					this.OnForeignKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrimaryKey", DbType="VarChar(1024)")]
		public string PrimaryKey
		{
			get
			{
				return this._PrimaryKey;
			}
			set
			{
				if ((this._PrimaryKey != value))
				{
					this.OnPrimaryKeyChanging(value);
					this.SendPropertyChanging();
					this._PrimaryKey = value;
					this.SendPropertyChanged("PrimaryKey");
					this.OnPrimaryKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrimaryTable", DbType="VarChar(1024)")]
		public string PrimaryTable
		{
			get
			{
				return this._PrimaryTable;
			}
			set
			{
				if ((this._PrimaryTable != value))
				{
					this.OnPrimaryTableChanging(value);
					this.SendPropertyChanging();
					this._PrimaryTable = value;
					this.SendPropertyChanged("PrimaryTable");
					this.OnPrimaryTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrimaryLabelColumn", DbType="VarChar(1024)")]
		public string PrimaryLabelColumn
		{
			get
			{
				return this._PrimaryLabelColumn;
			}
			set
			{
				if ((this._PrimaryLabelColumn != value))
				{
					this.OnPrimaryLabelColumnChanging(value);
					this.SendPropertyChanging();
					this._PrimaryLabelColumn = value;
					this.SendPropertyChanged("PrimaryLabelColumn");
					this.OnPrimaryLabelColumnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReportColumnsSchema_ReportColumn", Storage="_ReportColumns", ThisKey="ReportColumnsSchemaId,ReportTablesSchemaId", OtherKey="ReportColumnsSchemaId,ReportTablesSchemaId")]
		public EntitySet<ReportColumn> ReportColumns
		{
			get
			{
				return this._ReportColumns;
			}
			set
			{
				this._ReportColumns.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReportColumnsSchema_ReportFilter", Storage="_ReportFilters", ThisKey="ReportColumnsSchemaId,ReportTablesSchemaId", OtherKey="ReportColumnsSchemaId,ReportTablesSchemaId")]
		public EntitySet<ReportFilter> ReportFilters
		{
			get
			{
				return this._ReportFilters;
			}
			set
			{
				this._ReportFilters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReportColumnsSchema_ReportSort", Storage="_ReportSorts", ThisKey="ReportColumnsSchemaId,ReportTablesSchemaId", OtherKey="ReportColumnsSchemaId,ReportTablesSchemaId")]
		public EntitySet<ReportSort> ReportSorts
		{
			get
			{
				return this._ReportSorts;
			}
			set
			{
				this._ReportSorts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReportTablesSchema_ReportColumnsSchema", Storage="_ReportTablesSchema", ThisKey="ReportTablesSchemaId", OtherKey="ReportTablesSchemaId", IsForeignKey=true)]
		public ReportTablesSchema ReportTablesSchema
		{
			get
			{
				return this._ReportTablesSchema.Entity;
			}
			set
			{
				ReportTablesSchema previousValue = this._ReportTablesSchema.Entity;
				if (((previousValue != value) 
							|| (this._ReportTablesSchema.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReportTablesSchema.Entity = null;
						previousValue.ReportColumnsSchemas.Remove(this);
					}
					this._ReportTablesSchema.Entity = value;
					if ((value != null))
					{
						value.ReportColumnsSchemas.Add(this);
						this._ReportTablesSchemaId = value.ReportTablesSchemaId;
					}
					else
					{
						this._ReportTablesSchemaId = default(int);
					}
					this.SendPropertyChanged("ReportTablesSchema");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReportDataType_ReportColumnsSchema", Storage="_ReportDataType", ThisKey="ReportDataTypeId", OtherKey="ReportDataTypeId", IsForeignKey=true)]
		public ReportDataType ReportDataType
		{
			get
			{
				return this._ReportDataType.Entity;
			}
			set
			{
				ReportDataType previousValue = this._ReportDataType.Entity;
				if (((previousValue != value) 
							|| (this._ReportDataType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReportDataType.Entity = null;
						previousValue.ReportColumnsSchemas.Remove(this);
					}
					this._ReportDataType.Entity = value;
					if ((value != null))
					{
						value.ReportColumnsSchemas.Add(this);
						this._ReportDataTypeId = value.ReportDataTypeId;
					}
					else
					{
						this._ReportDataTypeId = default(int);
					}
					this.SendPropertyChanged("ReportDataType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ReportColumns(ReportColumn entity)
		{
			this.SendPropertyChanging();
			entity.ReportColumnsSchema = this;
		}
		
		private void detach_ReportColumns(ReportColumn entity)
		{
			this.SendPropertyChanging();
			entity.ReportColumnsSchema = null;
		}
		
		private void attach_ReportFilters(ReportFilter entity)
		{
			this.SendPropertyChanging();
			entity.ReportColumnsSchema = this;
		}
		
		private void detach_ReportFilters(ReportFilter entity)
		{
			this.SendPropertyChanging();
			entity.ReportColumnsSchema = null;
		}
		
		private void attach_ReportSorts(ReportSort entity)
		{
			this.SendPropertyChanging();
			entity.ReportColumnsSchema = this;
		}
		
		private void detach_ReportSorts(ReportSort entity)
		{
			this.SendPropertyChanging();
			entity.ReportColumnsSchema = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReportDataFunctions")]
	public partial class ReportDataFunction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReportDataFunctionId;
		
		private int _ReportDataTypeId;
		
		private string _Name;
		
		private string _SqlText;
		
		private EntityRef<ReportDataType> _ReportDataType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReportDataFunctionIdChanging(int value);
    partial void OnReportDataFunctionIdChanged();
    partial void OnReportDataTypeIdChanging(int value);
    partial void OnReportDataTypeIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSqlTextChanging(string value);
    partial void OnSqlTextChanged();
    #endregion
		
		public ReportDataFunction()
		{
			this._ReportDataType = default(EntityRef<ReportDataType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportDataFunctionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ReportDataFunctionId
		{
			get
			{
				return this._ReportDataFunctionId;
			}
			set
			{
				if ((this._ReportDataFunctionId != value))
				{
					this.OnReportDataFunctionIdChanging(value);
					this.SendPropertyChanging();
					this._ReportDataFunctionId = value;
					this.SendPropertyChanged("ReportDataFunctionId");
					this.OnReportDataFunctionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportDataTypeId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ReportDataTypeId
		{
			get
			{
				return this._ReportDataTypeId;
			}
			set
			{
				if ((this._ReportDataTypeId != value))
				{
					if (this._ReportDataType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReportDataTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ReportDataTypeId = value;
					this.SendPropertyChanged("ReportDataTypeId");
					this.OnReportDataTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="Char(18)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SqlText", DbType="Char(18)")]
		public string SqlText
		{
			get
			{
				return this._SqlText;
			}
			set
			{
				if ((this._SqlText != value))
				{
					this.OnSqlTextChanging(value);
					this.SendPropertyChanging();
					this._SqlText = value;
					this.SendPropertyChanged("SqlText");
					this.OnSqlTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReportDataType_ReportDataFunction", Storage="_ReportDataType", ThisKey="ReportDataTypeId", OtherKey="ReportDataTypeId", IsForeignKey=true)]
		public ReportDataType ReportDataType
		{
			get
			{
				return this._ReportDataType.Entity;
			}
			set
			{
				ReportDataType previousValue = this._ReportDataType.Entity;
				if (((previousValue != value) 
							|| (this._ReportDataType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReportDataType.Entity = null;
						previousValue.ReportDataFunctions.Remove(this);
					}
					this._ReportDataType.Entity = value;
					if ((value != null))
					{
						value.ReportDataFunctions.Add(this);
						this._ReportDataTypeId = value.ReportDataTypeId;
					}
					else
					{
						this._ReportDataTypeId = default(int);
					}
					this.SendPropertyChanged("ReportDataType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReportDataType")]
	public partial class ReportDataType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReportDataTypeId;
		
		private string _Name;
		
		private EntitySet<ReportColumnsSchema> _ReportColumnsSchemas;
		
		private EntitySet<ReportDataFunction> _ReportDataFunctions;
		
		private EntitySet<ReportFilterType> _ReportFilterTypes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReportDataTypeIdChanging(int value);
    partial void OnReportDataTypeIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public ReportDataType()
		{
			this._ReportColumnsSchemas = new EntitySet<ReportColumnsSchema>(new Action<ReportColumnsSchema>(this.attach_ReportColumnsSchemas), new Action<ReportColumnsSchema>(this.detach_ReportColumnsSchemas));
			this._ReportDataFunctions = new EntitySet<ReportDataFunction>(new Action<ReportDataFunction>(this.attach_ReportDataFunctions), new Action<ReportDataFunction>(this.detach_ReportDataFunctions));
			this._ReportFilterTypes = new EntitySet<ReportFilterType>(new Action<ReportFilterType>(this.attach_ReportFilterTypes), new Action<ReportFilterType>(this.detach_ReportFilterTypes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportDataTypeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ReportDataTypeId
		{
			get
			{
				return this._ReportDataTypeId;
			}
			set
			{
				if ((this._ReportDataTypeId != value))
				{
					this.OnReportDataTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ReportDataTypeId = value;
					this.SendPropertyChanged("ReportDataTypeId");
					this.OnReportDataTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(30)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReportDataType_ReportColumnsSchema", Storage="_ReportColumnsSchemas", ThisKey="ReportDataTypeId", OtherKey="ReportDataTypeId")]
		public EntitySet<ReportColumnsSchema> ReportColumnsSchemas
		{
			get
			{
				return this._ReportColumnsSchemas;
			}
			set
			{
				this._ReportColumnsSchemas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReportDataType_ReportDataFunction", Storage="_ReportDataFunctions", ThisKey="ReportDataTypeId", OtherKey="ReportDataTypeId")]
		public EntitySet<ReportDataFunction> ReportDataFunctions
		{
			get
			{
				return this._ReportDataFunctions;
			}
			set
			{
				this._ReportDataFunctions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReportDataType_ReportFilterType", Storage="_ReportFilterTypes", ThisKey="ReportDataTypeId", OtherKey="ReportDataTypeId")]
		public EntitySet<ReportFilterType> ReportFilterTypes
		{
			get
			{
				return this._ReportFilterTypes;
			}
			set
			{
				this._ReportFilterTypes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ReportColumnsSchemas(ReportColumnsSchema entity)
		{
			this.SendPropertyChanging();
			entity.ReportDataType = this;
		}
		
		private void detach_ReportColumnsSchemas(ReportColumnsSchema entity)
		{
			this.SendPropertyChanging();
			entity.ReportDataType = null;
		}
		
		private void attach_ReportDataFunctions(ReportDataFunction entity)
		{
			this.SendPropertyChanging();
			entity.ReportDataType = this;
		}
		
		private void detach_ReportDataFunctions(ReportDataFunction entity)
		{
			this.SendPropertyChanging();
			entity.ReportDataType = null;
		}
		
		private void attach_ReportFilterTypes(ReportFilterType entity)
		{
			this.SendPropertyChanging();
			entity.ReportDataType = this;
		}
		
		private void detach_ReportFilterTypes(ReportFilterType entity)
		{
			this.SendPropertyChanging();
			entity.ReportDataType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReportFilter")]
	public partial class ReportFilter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReportId;
		
		private int _ReportTablesSchemaId;
		
		private int _ReportColumnsSchemaId;
		
		private int _ReportFilterTypeId;
		
		private string _Value;
		
		private EntityRef<ReportColumnsSchema> _ReportColumnsSchema;
		
		private EntityRef<Report> _Report;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReportIdChanging(int value);
    partial void OnReportIdChanged();
    partial void OnReportTablesSchemaIdChanging(int value);
    partial void OnReportTablesSchemaIdChanged();
    partial void OnReportColumnsSchemaIdChanging(int value);
    partial void OnReportColumnsSchemaIdChanged();
    partial void OnReportFilterTypeIdChanging(int value);
    partial void OnReportFilterTypeIdChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public ReportFilter()
		{
			this._ReportColumnsSchema = default(EntityRef<ReportColumnsSchema>);
			this._Report = default(EntityRef<Report>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ReportId
		{
			get
			{
				return this._ReportId;
			}
			set
			{
				if ((this._ReportId != value))
				{
					if (this._Report.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReportIdChanging(value);
					this.SendPropertyChanging();
					this._ReportId = value;
					this.SendPropertyChanged("ReportId");
					this.OnReportIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportTablesSchemaId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ReportTablesSchemaId
		{
			get
			{
				return this._ReportTablesSchemaId;
			}
			set
			{
				if ((this._ReportTablesSchemaId != value))
				{
					if (this._ReportColumnsSchema.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReportTablesSchemaIdChanging(value);
					this.SendPropertyChanging();
					this._ReportTablesSchemaId = value;
					this.SendPropertyChanged("ReportTablesSchemaId");
					this.OnReportTablesSchemaIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportColumnsSchemaId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ReportColumnsSchemaId
		{
			get
			{
				return this._ReportColumnsSchemaId;
			}
			set
			{
				if ((this._ReportColumnsSchemaId != value))
				{
					if (this._ReportColumnsSchema.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReportColumnsSchemaIdChanging(value);
					this.SendPropertyChanging();
					this._ReportColumnsSchemaId = value;
					this.SendPropertyChanged("ReportColumnsSchemaId");
					this.OnReportColumnsSchemaIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportFilterTypeId", DbType="Int NOT NULL")]
		public int ReportFilterTypeId
		{
			get
			{
				return this._ReportFilterTypeId;
			}
			set
			{
				if ((this._ReportFilterTypeId != value))
				{
					this.OnReportFilterTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ReportFilterTypeId = value;
					this.SendPropertyChanged("ReportFilterTypeId");
					this.OnReportFilterTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="VarChar(8000)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReportColumnsSchema_ReportFilter", Storage="_ReportColumnsSchema", ThisKey="ReportColumnsSchemaId,ReportTablesSchemaId", OtherKey="ReportColumnsSchemaId,ReportTablesSchemaId", IsForeignKey=true)]
		public ReportColumnsSchema ReportColumnsSchema
		{
			get
			{
				return this._ReportColumnsSchema.Entity;
			}
			set
			{
				ReportColumnsSchema previousValue = this._ReportColumnsSchema.Entity;
				if (((previousValue != value) 
							|| (this._ReportColumnsSchema.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReportColumnsSchema.Entity = null;
						previousValue.ReportFilters.Remove(this);
					}
					this._ReportColumnsSchema.Entity = value;
					if ((value != null))
					{
						value.ReportFilters.Add(this);
						this._ReportColumnsSchemaId = value.ReportColumnsSchemaId;
						this._ReportTablesSchemaId = value.ReportTablesSchemaId;
					}
					else
					{
						this._ReportColumnsSchemaId = default(int);
						this._ReportTablesSchemaId = default(int);
					}
					this.SendPropertyChanged("ReportColumnsSchema");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Report_ReportFilter", Storage="_Report", ThisKey="ReportId", OtherKey="ReportId", IsForeignKey=true)]
		public Report Report
		{
			get
			{
				return this._Report.Entity;
			}
			set
			{
				Report previousValue = this._Report.Entity;
				if (((previousValue != value) 
							|| (this._Report.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Report.Entity = null;
						previousValue.ReportFilters.Remove(this);
					}
					this._Report.Entity = value;
					if ((value != null))
					{
						value.ReportFilters.Add(this);
						this._ReportId = value.ReportId;
					}
					else
					{
						this._ReportId = default(int);
					}
					this.SendPropertyChanged("Report");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReportFilterType")]
	public partial class ReportFilterType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReportFilterTypeId;
		
		private string _Name;
		
		private int _ReportDataTypeId;
		
		private string _SqlText;
		
		private EntityRef<ReportDataType> _ReportDataType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReportFilterTypeIdChanging(int value);
    partial void OnReportFilterTypeIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnReportDataTypeIdChanging(int value);
    partial void OnReportDataTypeIdChanged();
    partial void OnSqlTextChanging(string value);
    partial void OnSqlTextChanged();
    #endregion
		
		public ReportFilterType()
		{
			this._ReportDataType = default(EntityRef<ReportDataType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportFilterTypeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ReportFilterTypeId
		{
			get
			{
				return this._ReportFilterTypeId;
			}
			set
			{
				if ((this._ReportFilterTypeId != value))
				{
					this.OnReportFilterTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ReportFilterTypeId = value;
					this.SendPropertyChanged("ReportFilterTypeId");
					this.OnReportFilterTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(30)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportDataTypeId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ReportDataTypeId
		{
			get
			{
				return this._ReportDataTypeId;
			}
			set
			{
				if ((this._ReportDataTypeId != value))
				{
					if (this._ReportDataType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReportDataTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ReportDataTypeId = value;
					this.SendPropertyChanged("ReportDataTypeId");
					this.OnReportDataTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SqlText", DbType="VarChar(1024)")]
		public string SqlText
		{
			get
			{
				return this._SqlText;
			}
			set
			{
				if ((this._SqlText != value))
				{
					this.OnSqlTextChanging(value);
					this.SendPropertyChanging();
					this._SqlText = value;
					this.SendPropertyChanged("SqlText");
					this.OnSqlTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReportDataType_ReportFilterType", Storage="_ReportDataType", ThisKey="ReportDataTypeId", OtherKey="ReportDataTypeId", IsForeignKey=true)]
		public ReportDataType ReportDataType
		{
			get
			{
				return this._ReportDataType.Entity;
			}
			set
			{
				ReportDataType previousValue = this._ReportDataType.Entity;
				if (((previousValue != value) 
							|| (this._ReportDataType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReportDataType.Entity = null;
						previousValue.ReportFilterTypes.Remove(this);
					}
					this._ReportDataType.Entity = value;
					if ((value != null))
					{
						value.ReportFilterTypes.Add(this);
						this._ReportDataTypeId = value.ReportDataTypeId;
					}
					else
					{
						this._ReportDataTypeId = default(int);
					}
					this.SendPropertyChanged("ReportDataType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Reports")]
	public partial class Report : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReportId;
		
		private System.Nullable<int> _ReportTablesSchemaId;
		
		private string _Name;
		
		private string _Tag;
		
		private string _ReportUrl;
		
		private EntitySet<ReportColumn> _ReportColumns;
		
		private EntitySet<ReportFilter> _ReportFilters;
		
		private EntitySet<ReportSort> _ReportSorts;
		
		private EntityRef<ReportTablesSchema> _ReportTablesSchema;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReportIdChanging(int value);
    partial void OnReportIdChanged();
    partial void OnReportTablesSchemaIdChanging(System.Nullable<int> value);
    partial void OnReportTablesSchemaIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTagChanging(string value);
    partial void OnTagChanged();
    partial void OnReportUrlChanging(string value);
    partial void OnReportUrlChanged();
    #endregion
		
		public Report()
		{
			this._ReportColumns = new EntitySet<ReportColumn>(new Action<ReportColumn>(this.attach_ReportColumns), new Action<ReportColumn>(this.detach_ReportColumns));
			this._ReportFilters = new EntitySet<ReportFilter>(new Action<ReportFilter>(this.attach_ReportFilters), new Action<ReportFilter>(this.detach_ReportFilters));
			this._ReportSorts = new EntitySet<ReportSort>(new Action<ReportSort>(this.attach_ReportSorts), new Action<ReportSort>(this.detach_ReportSorts));
			this._ReportTablesSchema = default(EntityRef<ReportTablesSchema>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ReportId
		{
			get
			{
				return this._ReportId;
			}
			set
			{
				if ((this._ReportId != value))
				{
					this.OnReportIdChanging(value);
					this.SendPropertyChanging();
					this._ReportId = value;
					this.SendPropertyChanged("ReportId");
					this.OnReportIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportTablesSchemaId", DbType="Int")]
		public System.Nullable<int> ReportTablesSchemaId
		{
			get
			{
				return this._ReportTablesSchemaId;
			}
			set
			{
				if ((this._ReportTablesSchemaId != value))
				{
					if (this._ReportTablesSchema.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReportTablesSchemaIdChanging(value);
					this.SendPropertyChanging();
					this._ReportTablesSchemaId = value;
					this.SendPropertyChanged("ReportTablesSchemaId");
					this.OnReportTablesSchemaIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(1024)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tag", DbType="VarChar(1024)")]
		public string Tag
		{
			get
			{
				return this._Tag;
			}
			set
			{
				if ((this._Tag != value))
				{
					this.OnTagChanging(value);
					this.SendPropertyChanging();
					this._Tag = value;
					this.SendPropertyChanged("Tag");
					this.OnTagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportUrl", DbType="VarChar(1024)")]
		public string ReportUrl
		{
			get
			{
				return this._ReportUrl;
			}
			set
			{
				if ((this._ReportUrl != value))
				{
					this.OnReportUrlChanging(value);
					this.SendPropertyChanging();
					this._ReportUrl = value;
					this.SendPropertyChanged("ReportUrl");
					this.OnReportUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Report_ReportColumn", Storage="_ReportColumns", ThisKey="ReportId", OtherKey="ReportId")]
		public EntitySet<ReportColumn> ReportColumns
		{
			get
			{
				return this._ReportColumns;
			}
			set
			{
				this._ReportColumns.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Report_ReportFilter", Storage="_ReportFilters", ThisKey="ReportId", OtherKey="ReportId")]
		public EntitySet<ReportFilter> ReportFilters
		{
			get
			{
				return this._ReportFilters;
			}
			set
			{
				this._ReportFilters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Report_ReportSort", Storage="_ReportSorts", ThisKey="ReportId", OtherKey="ReportId")]
		public EntitySet<ReportSort> ReportSorts
		{
			get
			{
				return this._ReportSorts;
			}
			set
			{
				this._ReportSorts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReportTablesSchema_Report", Storage="_ReportTablesSchema", ThisKey="ReportTablesSchemaId", OtherKey="ReportTablesSchemaId", IsForeignKey=true)]
		public ReportTablesSchema ReportTablesSchema
		{
			get
			{
				return this._ReportTablesSchema.Entity;
			}
			set
			{
				ReportTablesSchema previousValue = this._ReportTablesSchema.Entity;
				if (((previousValue != value) 
							|| (this._ReportTablesSchema.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReportTablesSchema.Entity = null;
						previousValue.Reports.Remove(this);
					}
					this._ReportTablesSchema.Entity = value;
					if ((value != null))
					{
						value.Reports.Add(this);
						this._ReportTablesSchemaId = value.ReportTablesSchemaId;
					}
					else
					{
						this._ReportTablesSchemaId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ReportTablesSchema");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ReportColumns(ReportColumn entity)
		{
			this.SendPropertyChanging();
			entity.Report = this;
		}
		
		private void detach_ReportColumns(ReportColumn entity)
		{
			this.SendPropertyChanging();
			entity.Report = null;
		}
		
		private void attach_ReportFilters(ReportFilter entity)
		{
			this.SendPropertyChanging();
			entity.Report = this;
		}
		
		private void detach_ReportFilters(ReportFilter entity)
		{
			this.SendPropertyChanging();
			entity.Report = null;
		}
		
		private void attach_ReportSorts(ReportSort entity)
		{
			this.SendPropertyChanging();
			entity.Report = this;
		}
		
		private void detach_ReportSorts(ReportSort entity)
		{
			this.SendPropertyChanging();
			entity.Report = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReportSort")]
	public partial class ReportSort : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReportId;
		
		private int _ReportTablesSchemaId;
		
		private int _ReportColumnsSchemaId;
		
		private System.Nullable<bool> _Ascending;
		
		private EntityRef<ReportColumnsSchema> _ReportColumnsSchema;
		
		private EntityRef<Report> _Report;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReportIdChanging(int value);
    partial void OnReportIdChanged();
    partial void OnReportTablesSchemaIdChanging(int value);
    partial void OnReportTablesSchemaIdChanged();
    partial void OnReportColumnsSchemaIdChanging(int value);
    partial void OnReportColumnsSchemaIdChanged();
    partial void OnAscendingChanging(System.Nullable<bool> value);
    partial void OnAscendingChanged();
    #endregion
		
		public ReportSort()
		{
			this._ReportColumnsSchema = default(EntityRef<ReportColumnsSchema>);
			this._Report = default(EntityRef<Report>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ReportId
		{
			get
			{
				return this._ReportId;
			}
			set
			{
				if ((this._ReportId != value))
				{
					if (this._Report.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReportIdChanging(value);
					this.SendPropertyChanging();
					this._ReportId = value;
					this.SendPropertyChanged("ReportId");
					this.OnReportIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportTablesSchemaId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ReportTablesSchemaId
		{
			get
			{
				return this._ReportTablesSchemaId;
			}
			set
			{
				if ((this._ReportTablesSchemaId != value))
				{
					if (this._ReportColumnsSchema.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReportTablesSchemaIdChanging(value);
					this.SendPropertyChanging();
					this._ReportTablesSchemaId = value;
					this.SendPropertyChanged("ReportTablesSchemaId");
					this.OnReportTablesSchemaIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportColumnsSchemaId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ReportColumnsSchemaId
		{
			get
			{
				return this._ReportColumnsSchemaId;
			}
			set
			{
				if ((this._ReportColumnsSchemaId != value))
				{
					if (this._ReportColumnsSchema.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReportColumnsSchemaIdChanging(value);
					this.SendPropertyChanging();
					this._ReportColumnsSchemaId = value;
					this.SendPropertyChanged("ReportColumnsSchemaId");
					this.OnReportColumnsSchemaIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ascending", DbType="Bit")]
		public System.Nullable<bool> Ascending
		{
			get
			{
				return this._Ascending;
			}
			set
			{
				if ((this._Ascending != value))
				{
					this.OnAscendingChanging(value);
					this.SendPropertyChanging();
					this._Ascending = value;
					this.SendPropertyChanged("Ascending");
					this.OnAscendingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReportColumnsSchema_ReportSort", Storage="_ReportColumnsSchema", ThisKey="ReportColumnsSchemaId,ReportTablesSchemaId", OtherKey="ReportColumnsSchemaId,ReportTablesSchemaId", IsForeignKey=true)]
		public ReportColumnsSchema ReportColumnsSchema
		{
			get
			{
				return this._ReportColumnsSchema.Entity;
			}
			set
			{
				ReportColumnsSchema previousValue = this._ReportColumnsSchema.Entity;
				if (((previousValue != value) 
							|| (this._ReportColumnsSchema.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReportColumnsSchema.Entity = null;
						previousValue.ReportSorts.Remove(this);
					}
					this._ReportColumnsSchema.Entity = value;
					if ((value != null))
					{
						value.ReportSorts.Add(this);
						this._ReportColumnsSchemaId = value.ReportColumnsSchemaId;
						this._ReportTablesSchemaId = value.ReportTablesSchemaId;
					}
					else
					{
						this._ReportColumnsSchemaId = default(int);
						this._ReportTablesSchemaId = default(int);
					}
					this.SendPropertyChanged("ReportColumnsSchema");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Report_ReportSort", Storage="_Report", ThisKey="ReportId", OtherKey="ReportId", IsForeignKey=true)]
		public Report Report
		{
			get
			{
				return this._Report.Entity;
			}
			set
			{
				Report previousValue = this._Report.Entity;
				if (((previousValue != value) 
							|| (this._Report.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Report.Entity = null;
						previousValue.ReportSorts.Remove(this);
					}
					this._Report.Entity = value;
					if ((value != null))
					{
						value.ReportSorts.Add(this);
						this._ReportId = value.ReportId;
					}
					else
					{
						this._ReportId = default(int);
					}
					this.SendPropertyChanged("Report");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
