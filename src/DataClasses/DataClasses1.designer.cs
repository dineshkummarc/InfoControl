#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4952
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Vivina.Erp.DataClasses
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.Runtime.Serialization;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="Vivina_InfoControl")]
	public partial class InfoControlDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertWorkJourney(WorkJourney instance);
    partial void UpdateWorkJourney(WorkJourney instance);
    partial void DeleteWorkJourney(WorkJourney instance);
    partial void InsertAccountingPlan(AccountingPlan instance);
    partial void UpdateAccountingPlan(AccountingPlan instance);
    partial void DeleteAccountingPlan(AccountingPlan instance);
    partial void InsertAdditionalInformation(AdditionalInformation instance);
    partial void UpdateAdditionalInformation(AdditionalInformation instance);
    partial void DeleteAdditionalInformation(AdditionalInformation instance);
    partial void InsertAdditionalInformationData(AdditionalInformationData instance);
    partial void UpdateAdditionalInformationData(AdditionalInformationData instance);
    partial void DeleteAdditionalInformationData(AdditionalInformationData instance);
    partial void InsertAddress(Address instance);
    partial void UpdateAddress(Address instance);
    partial void DeleteAddress(Address instance);
    partial void InsertAlert(Alert instance);
    partial void UpdateAlert(Alert instance);
    partial void DeleteAlert(Alert instance);
    partial void InsertAlienation(Alienation instance);
    partial void UpdateAlienation(Alienation instance);
    partial void DeleteAlienation(Alienation instance);
    partial void InsertApplication(Application instance);
    partial void UpdateApplication(Application instance);
    partial void DeleteApplication(Application instance);
    partial void InsertBank(Bank instance);
    partial void UpdateBank(Bank instance);
    partial void DeleteBank(Bank instance);
    partial void InsertBarCodeType(BarCodeType instance);
    partial void UpdateBarCodeType(BarCodeType instance);
    partial void DeleteBarCodeType(BarCodeType instance);
    partial void InsertBill(Bill instance);
    partial void UpdateBill(Bill instance);
    partial void DeleteBill(Bill instance);
    partial void InsertBond(Bond instance);
    partial void UpdateBond(Bond instance);
    partial void DeleteBond(Bond instance);
    partial void InsertBranch(Branch instance);
    partial void UpdateBranch(Branch instance);
    partial void DeleteBranch(Branch instance);
    partial void InsertBranchFunction(BranchFunction instance);
    partial void UpdateBranchFunction(BranchFunction instance);
    partial void DeleteBranchFunction(BranchFunction instance);
    partial void InsertBudget(Budget instance);
    partial void UpdateBudget(Budget instance);
    partial void DeleteBudget(Budget instance);
    partial void InsertBudgetItem(BudgetItem instance);
    partial void UpdateBudgetItem(BudgetItem instance);
    partial void DeleteBudgetItem(BudgetItem instance);
    partial void InsertBudgetStatus(BudgetStatus instance);
    partial void UpdateBudgetStatus(BudgetStatus instance);
    partial void DeleteBudgetStatus(BudgetStatus instance);
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertCFOP(CFOP instance);
    partial void UpdateCFOP(CFOP instance);
    partial void DeleteCFOP(CFOP instance);
    partial void InsertCheck(Check instance);
    partial void UpdateCheck(Check instance);
    partial void DeleteCheck(Check instance);
    partial void InsertCity(City instance);
    partial void UpdateCity(City instance);
    partial void DeleteCity(City instance);
    partial void InsertCnae(Cnae instance);
    partial void UpdateCnae(Cnae instance);
    partial void DeleteCnae(Cnae instance);
    partial void InsertComment(Comment instance);
    partial void UpdateComment(Comment instance);
    partial void DeleteComment(Comment instance);
    partial void InsertCompany(Company instance);
    partial void UpdateCompany(Company instance);
    partial void DeleteCompany(Company instance);
    partial void InsertCompanyConfiguration(CompanyConfiguration instance);
    partial void UpdateCompanyConfiguration(CompanyConfiguration instance);
    partial void DeleteCompanyConfiguration(CompanyConfiguration instance);
    partial void InsertCompanyUser(CompanyUser instance);
    partial void UpdateCompanyUser(CompanyUser instance);
    partial void DeleteCompanyUser(CompanyUser instance);
    partial void InsertCompositeProduct(CompositeProduct instance);
    partial void UpdateCompositeProduct(CompositeProduct instance);
    partial void DeleteCompositeProduct(CompositeProduct instance);
    partial void InsertContact(Contact instance);
    partial void UpdateContact(Contact instance);
    partial void DeleteContact(Contact instance);
    partial void InsertContract(Contract instance);
    partial void UpdateContract(Contract instance);
    partial void DeleteContract(Contract instance);
    partial void InsertContractAssociated(ContractAssociated instance);
    partial void UpdateContractAssociated(ContractAssociated instance);
    partial void DeleteContractAssociated(ContractAssociated instance);
    partial void InsertContractPendency(ContractPendency instance);
    partial void UpdateContractPendency(ContractPendency instance);
    partial void DeleteContractPendency(ContractPendency instance);
    partial void InsertContractStatus(ContractStatus instance);
    partial void UpdateContractStatus(ContractStatus instance);
    partial void DeleteContractStatus(ContractStatus instance);
    partial void InsertContractType(ContractType instance);
    partial void UpdateContractType(ContractType instance);
    partial void DeleteContractType(ContractType instance);
    partial void InsertCostCenter(CostCenter instance);
    partial void UpdateCostCenter(CostCenter instance);
    partial void DeleteCostCenter(CostCenter instance);
    partial void InsertCurrencyRate(CurrencyRate instance);
    partial void UpdateCurrencyRate(CurrencyRate instance);
    partial void DeleteCurrencyRate(CurrencyRate instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertCustomerCall(CustomerCall instance);
    partial void UpdateCustomerCall(CustomerCall instance);
    partial void DeleteCustomerCall(CustomerCall instance);
    partial void InsertCustomerCallStatus(CustomerCallStatus instance);
    partial void UpdateCustomerCallStatus(CustomerCallStatus instance);
    partial void DeleteCustomerCallStatus(CustomerCallStatus instance);
    partial void InsertCustomerCallType(CustomerCallType instance);
    partial void UpdateCustomerCallType(CustomerCallType instance);
    partial void DeleteCustomerCallType(CustomerCallType instance);
    partial void InsertCustomerContact(CustomerContact instance);
    partial void UpdateCustomerContact(CustomerContact instance);
    partial void DeleteCustomerContact(CustomerContact instance);
    partial void InsertCustomerEquipment(CustomerEquipment instance);
    partial void UpdateCustomerEquipment(CustomerEquipment instance);
    partial void DeleteCustomerEquipment(CustomerEquipment instance);
    partial void InsertCustomerFollowup(CustomerFollowup instance);
    partial void UpdateCustomerFollowup(CustomerFollowup instance);
    partial void DeleteCustomerFollowup(CustomerFollowup instance);
    partial void InsertCustomerFollowupAction(CustomerFollowupAction instance);
    partial void UpdateCustomerFollowupAction(CustomerFollowupAction instance);
    partial void DeleteCustomerFollowupAction(CustomerFollowupAction instance);
    partial void InsertCustomerType(CustomerType instance);
    partial void UpdateCustomerType(CustomerType instance);
    partial void DeleteCustomerType(CustomerType instance);
    partial void InsertCustomFunction(CustomFunction instance);
    partial void UpdateCustomFunction(CustomFunction instance);
    partial void DeleteCustomFunction(CustomFunction instance);
    partial void InsertDeposit(Deposit instance);
    partial void UpdateDeposit(Deposit instance);
    partial void DeleteDeposit(Deposit instance);
    partial void InsertDocumentTemplate(DocumentTemplate instance);
    partial void UpdateDocumentTemplate(DocumentTemplate instance);
    partial void DeleteDocumentTemplate(DocumentTemplate instance);
    partial void InsertDocumentTemplateType(DocumentTemplateType instance);
    partial void UpdateDocumentTemplateType(DocumentTemplateType instance);
    partial void DeleteDocumentTemplateType(DocumentTemplateType instance);
    partial void InsertDropPayout(DropPayout instance);
    partial void UpdateDropPayout(DropPayout instance);
    partial void DeleteDropPayout(DropPayout instance);
    partial void InsertEducationLevel(EducationLevel instance);
    partial void UpdateEducationLevel(EducationLevel instance);
    partial void DeleteEducationLevel(EducationLevel instance);
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertEmployeeAdditionalInformation(EmployeeAdditionalInformation instance);
    partial void UpdateEmployeeAdditionalInformation(EmployeeAdditionalInformation instance);
    partial void DeleteEmployeeAdditionalInformation(EmployeeAdditionalInformation instance);
    partial void InsertEmployeeCompetency(EmployeeCompetency instance);
    partial void UpdateEmployeeCompetency(EmployeeCompetency instance);
    partial void DeleteEmployeeCompetency(EmployeeCompetency instance);
    partial void InsertEmployeeDependent(EmployeeDependent instance);
    partial void UpdateEmployeeDependent(EmployeeDependent instance);
    partial void DeleteEmployeeDependent(EmployeeDependent instance);
    partial void InsertEmployeeFunction(EmployeeFunction instance);
    partial void UpdateEmployeeFunction(EmployeeFunction instance);
    partial void DeleteEmployeeFunction(EmployeeFunction instance);
    partial void InsertEmployeeFunctionHistory(EmployeeFunctionHistory instance);
    partial void UpdateEmployeeFunctionHistory(EmployeeFunctionHistory instance);
    partial void DeleteEmployeeFunctionHistory(EmployeeFunctionHistory instance);
    partial void InsertEmployeeOtherSchool(EmployeeOtherSchool instance);
    partial void UpdateEmployeeOtherSchool(EmployeeOtherSchool instance);
    partial void DeleteEmployeeOtherSchool(EmployeeOtherSchool instance);
    partial void InsertEvent(Event instance);
    partial void UpdateEvent(Event instance);
    partial void DeleteEvent(Event instance);
    partial void InsertEventStatus(EventStatus instance);
    partial void UpdateEventStatus(EventStatus instance);
    partial void DeleteEventStatus(EventStatus instance);
    partial void InsertExpenditureAuthorization(ExpenditureAuthorization instance);
    partial void UpdateExpenditureAuthorization(ExpenditureAuthorization instance);
    partial void DeleteExpenditureAuthorization(ExpenditureAuthorization instance);
    partial void InsertFamilyRendInterval(FamilyRendInterval instance);
    partial void UpdateFamilyRendInterval(FamilyRendInterval instance);
    partial void DeleteFamilyRendInterval(FamilyRendInterval instance);
    partial void InsertFinancierCondition(FinancierCondition instance);
    partial void UpdateFinancierCondition(FinancierCondition instance);
    partial void DeleteFinancierCondition(FinancierCondition instance);
    partial void InsertFinancierOperation(FinancierOperation instance);
    partial void UpdateFinancierOperation(FinancierOperation instance);
    partial void DeleteFinancierOperation(FinancierOperation instance);
    partial void InsertFunction(Function instance);
    partial void UpdateFunction(Function instance);
    partial void DeleteFunction(Function instance);
    partial void InsertInssInterval(InssInterval instance);
    partial void UpdateInssInterval(InssInterval instance);
    partial void DeleteInssInterval(InssInterval instance);
    partial void InsertInventory(Inventory instance);
    partial void UpdateInventory(Inventory instance);
    partial void DeleteInventory(Inventory instance);
    partial void InsertInventoryDropType(InventoryDropType instance);
    partial void UpdateInventoryDropType(InventoryDropType instance);
    partial void DeleteInventoryDropType(InventoryDropType instance);
    partial void InsertInventoryEntryType(InventoryEntryType instance);
    partial void UpdateInventoryEntryType(InventoryEntryType instance);
    partial void DeleteInventoryEntryType(InventoryEntryType instance);
    partial void InsertInventoryHistory(InventoryHistory instance);
    partial void UpdateInventoryHistory(InventoryHistory instance);
    partial void DeleteInventoryHistory(InventoryHistory instance);
    partial void InsertInventoryMoviment(InventoryMoviment instance);
    partial void UpdateInventoryMoviment(InventoryMoviment instance);
    partial void DeleteInventoryMoviment(InventoryMoviment instance);
    partial void InsertInventoryRMA(InventoryRMA instance);
    partial void UpdateInventoryRMA(InventoryRMA instance);
    partial void DeleteInventoryRMA(InventoryRMA instance);
    partial void InsertInventorySerial(InventorySerial instance);
    partial void UpdateInventorySerial(InventorySerial instance);
    partial void DeleteInventorySerial(InventorySerial instance);
    partial void InsertInvoice(Invoice instance);
    partial void UpdateInvoice(Invoice instance);
    partial void DeleteInvoice(Invoice instance);
    partial void InsertIrrfInterval(IrrfInterval instance);
    partial void UpdateIrrfInterval(IrrfInterval instance);
    partial void DeleteIrrfInterval(IrrfInterval instance);
    partial void InsertJudicialNature(JudicialNature instance);
    partial void UpdateJudicialNature(JudicialNature instance);
    partial void DeleteJudicialNature(JudicialNature instance);
    partial void InsertLegalEntityProfile(LegalEntityProfile instance);
    partial void UpdateLegalEntityProfile(LegalEntityProfile instance);
    partial void DeleteLegalEntityProfile(LegalEntityProfile instance);
    partial void InsertManufacturer(Manufacturer instance);
    partial void UpdateManufacturer(Manufacturer instance);
    partial void DeleteManufacturer(Manufacturer instance);
    partial void InsertMaritalStatus(MaritalStatus instance);
    partial void UpdateMaritalStatus(MaritalStatus instance);
    partial void DeleteMaritalStatus(MaritalStatus instance);
    partial void InsertNeighborhood(Neighborhood instance);
    partial void UpdateNeighborhood(Neighborhood instance);
    partial void DeleteNeighborhood(Neighborhood instance);
    partial void InsertOrganizationLevel(OrganizationLevel instance);
    partial void UpdateOrganizationLevel(OrganizationLevel instance);
    partial void DeleteOrganizationLevel(OrganizationLevel instance);
    partial void InsertOtherSchool(OtherSchool instance);
    partial void UpdateOtherSchool(OtherSchool instance);
    partial void DeleteOtherSchool(OtherSchool instance);
    partial void InsertPackage(Package instance);
    partial void UpdatePackage(Package instance);
    partial void DeletePackage(Package instance);
    partial void InsertPackageAdditional(PackageAdditional instance);
    partial void UpdatePackageAdditional(PackageAdditional instance);
    partial void DeletePackageAdditional(PackageAdditional instance);
    partial void InsertPackageFunction(PackageFunction instance);
    partial void UpdatePackageFunction(PackageFunction instance);
    partial void DeletePackageFunction(PackageFunction instance);
    partial void InsertPageTag(PageTag instance);
    partial void UpdatePageTag(PageTag instance);
    partial void DeletePageTag(PageTag instance);
    partial void InsertParcel(Parcel instance);
    partial void UpdateParcel(Parcel instance);
    partial void DeleteParcel(Parcel instance);
    partial void InsertPaymentMethod(PaymentMethod instance);
    partial void UpdatePaymentMethod(PaymentMethod instance);
    partial void DeletePaymentMethod(PaymentMethod instance);
    partial void InsertPermission(Permission instance);
    partial void UpdatePermission(Permission instance);
    partial void DeletePermission(Permission instance);
    partial void InsertPermissionType(PermissionType instance);
    partial void UpdatePermissionType(PermissionType instance);
    partial void DeletePermissionType(PermissionType instance);
    partial void InsertPlan(Plan instance);
    partial void UpdatePlan(Plan instance);
    partial void DeletePlan(Plan instance);
    partial void InsertPost(Post instance);
    partial void UpdatePost(Post instance);
    partial void DeletePost(Post instance);
    partial void InsertProduct(Product instance);
    partial void UpdateProduct(Product instance);
    partial void DeleteProduct(Product instance);
    partial void InsertProductCertificate(ProductCertificate instance);
    partial void UpdateProductCertificate(ProductCertificate instance);
    partial void DeleteProductCertificate(ProductCertificate instance);
    partial void InsertProductImage(ProductImage instance);
    partial void UpdateProductImage(ProductImage instance);
    partial void DeleteProductImage(ProductImage instance);
    partial void InsertProductManufacturer(ProductManufacturer instance);
    partial void UpdateProductManufacturer(ProductManufacturer instance);
    partial void DeleteProductManufacturer(ProductManufacturer instance);
    partial void InsertProductPackage(ProductPackage instance);
    partial void UpdateProductPackage(ProductPackage instance);
    partial void DeleteProductPackage(ProductPackage instance);
    partial void InsertProductPart(ProductPart instance);
    partial void UpdateProductPart(ProductPart instance);
    partial void DeleteProductPart(ProductPart instance);
    partial void InsertProfile(Profile instance);
    partial void UpdateProfile(Profile instance);
    partial void DeleteProfile(Profile instance);
    partial void InsertProfileAddress(ProfileAddress instance);
    partial void UpdateProfileAddress(ProfileAddress instance);
    partial void DeleteProfileAddress(ProfileAddress instance);
    partial void InsertProfitAssessment(ProfitAssessment instance);
    partial void UpdateProfitAssessment(ProfitAssessment instance);
    partial void DeleteProfitAssessment(ProfitAssessment instance);
    partial void InsertPurchaseOrder(PurchaseOrder instance);
    partial void UpdatePurchaseOrder(PurchaseOrder instance);
    partial void DeletePurchaseOrder(PurchaseOrder instance);
    partial void InsertPurchaseOrderItem(PurchaseOrderItem instance);
    partial void UpdatePurchaseOrderItem(PurchaseOrderItem instance);
    partial void DeletePurchaseOrderItem(PurchaseOrderItem instance);
    partial void InsertPurchaseOrderStatus(PurchaseOrderStatus instance);
    partial void UpdatePurchaseOrderStatus(PurchaseOrderStatus instance);
    partial void DeletePurchaseOrderStatus(PurchaseOrderStatus instance);
    partial void InsertPurchaseRequest(PurchaseRequest instance);
    partial void UpdatePurchaseRequest(PurchaseRequest instance);
    partial void DeletePurchaseRequest(PurchaseRequest instance);
    partial void InsertPurchaseRequestItem(PurchaseRequestItem instance);
    partial void UpdatePurchaseRequestItem(PurchaseRequestItem instance);
    partial void DeletePurchaseRequestItem(PurchaseRequestItem instance);
    partial void InsertQuotation(Quotation instance);
    partial void UpdateQuotation(Quotation instance);
    partial void DeleteQuotation(Quotation instance);
    partial void InsertQuotationItem(QuotationItem instance);
    partial void UpdateQuotationItem(QuotationItem instance);
    partial void DeleteQuotationItem(QuotationItem instance);
    partial void InsertReceipt(Receipt instance);
    partial void UpdateReceipt(Receipt instance);
    partial void DeleteReceipt(Receipt instance);
    partial void InsertReceiptFieldConfiguration(ReceiptFieldConfiguration instance);
    partial void UpdateReceiptFieldConfiguration(ReceiptFieldConfiguration instance);
    partial void DeleteReceiptFieldConfiguration(ReceiptFieldConfiguration instance);
    partial void InsertReceiptItem(ReceiptItem instance);
    partial void UpdateReceiptItem(ReceiptItem instance);
    partial void DeleteReceiptItem(ReceiptItem instance);
    partial void InsertReportColumn(ReportColumn instance);
    partial void UpdateReportColumn(ReportColumn instance);
    partial void DeleteReportColumn(ReportColumn instance);
    partial void InsertReportColumnsSchema(ReportColumnsSchema instance);
    partial void UpdateReportColumnsSchema(ReportColumnsSchema instance);
    partial void DeleteReportColumnsSchema(ReportColumnsSchema instance);
    partial void InsertReportDataFunction(ReportDataFunction instance);
    partial void UpdateReportDataFunction(ReportDataFunction instance);
    partial void DeleteReportDataFunction(ReportDataFunction instance);
    partial void InsertReportDataType(ReportDataType instance);
    partial void UpdateReportDataType(ReportDataType instance);
    partial void DeleteReportDataType(ReportDataType instance);
    partial void InsertReportFilter(ReportFilter instance);
    partial void UpdateReportFilter(ReportFilter instance);
    partial void DeleteReportFilter(ReportFilter instance);
    partial void InsertReportFilterType(ReportFilterType instance);
    partial void UpdateReportFilterType(ReportFilterType instance);
    partial void DeleteReportFilterType(ReportFilterType instance);
    partial void InsertReport(Report instance);
    partial void UpdateReport(Report instance);
    partial void DeleteReport(Report instance);
    partial void InsertReportSort(ReportSort instance);
    partial void UpdateReportSort(ReportSort instance);
    partial void DeleteReportSort(ReportSort instance);
    partial void InsertReportTablesSchema(ReportTablesSchema instance);
    partial void UpdateReportTablesSchema(ReportTablesSchema instance);
    partial void DeleteReportTablesSchema(ReportTablesSchema instance);
    partial void InsertRepresentant(Representant instance);
    partial void UpdateRepresentant(Representant instance);
    partial void DeleteRepresentant(Representant instance);
    partial void InsertRepresentantUser(RepresentantUser instance);
    partial void UpdateRepresentantUser(RepresentantUser instance);
    partial void DeleteRepresentantUser(RepresentantUser instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertSale(Sale instance);
    partial void UpdateSale(Sale instance);
    partial void DeleteSale(Sale instance);
    partial void InsertSaleItem(SaleItem instance);
    partial void UpdateSaleItem(SaleItem instance);
    partial void DeleteSaleItem(SaleItem instance);
    partial void InsertSaleStatus(SaleStatus instance);
    partial void UpdateSaleStatus(SaleStatus instance);
    partial void DeleteSaleStatus(SaleStatus instance);
    partial void InsertScheduledTask(ScheduledTask instance);
    partial void UpdateScheduledTask(ScheduledTask instance);
    partial void DeleteScheduledTask(ScheduledTask instance);
    partial void InsertService(Service instance);
    partial void UpdateService(Service instance);
    partial void DeleteService(Service instance);
    partial void InsertServiceOrder(ServiceOrder instance);
    partial void UpdateServiceOrder(ServiceOrder instance);
    partial void DeleteServiceOrder(ServiceOrder instance);
    partial void InsertServiceOrderBook(ServiceOrderBook instance);
    partial void UpdateServiceOrderBook(ServiceOrderBook instance);
    partial void DeleteServiceOrderBook(ServiceOrderBook instance);
    partial void InsertServiceOrderEquipmentDamage(ServiceOrderEquipmentDamage instance);
    partial void UpdateServiceOrderEquipmentDamage(ServiceOrderEquipmentDamage instance);
    partial void DeleteServiceOrderEquipmentDamage(ServiceOrderEquipmentDamage instance);
    partial void InsertServiceOrderHaltType(ServiceOrderHaltType instance);
    partial void UpdateServiceOrderHaltType(ServiceOrderHaltType instance);
    partial void DeleteServiceOrderHaltType(ServiceOrderHaltType instance);
    partial void InsertServiceOrderInstallType(ServiceOrderInstallType instance);
    partial void UpdateServiceOrderInstallType(ServiceOrderInstallType instance);
    partial void DeleteServiceOrderInstallType(ServiceOrderInstallType instance);
    partial void InsertServiceOrderItem(ServiceOrderItem instance);
    partial void UpdateServiceOrderItem(ServiceOrderItem instance);
    partial void DeleteServiceOrderItem(ServiceOrderItem instance);
    partial void InsertServiceOrderProductDamage(ServiceOrderProductDamage instance);
    partial void UpdateServiceOrderProductDamage(ServiceOrderProductDamage instance);
    partial void DeleteServiceOrderProductDamage(ServiceOrderProductDamage instance);
    partial void InsertServiceOrderProductType(ServiceOrderProductType instance);
    partial void UpdateServiceOrderProductType(ServiceOrderProductType instance);
    partial void DeleteServiceOrderProductType(ServiceOrderProductType instance);
    partial void InsertServiceOrderStatus(ServiceOrderStatus instance);
    partial void UpdateServiceOrderStatus(ServiceOrderStatus instance);
    partial void DeleteServiceOrderStatus(ServiceOrderStatus instance);
    partial void InsertServiceOrderTest(ServiceOrderTest instance);
    partial void UpdateServiceOrderTest(ServiceOrderTest instance);
    partial void DeleteServiceOrderTest(ServiceOrderTest instance);
    partial void InsertServiceOrderType(ServiceOrderType instance);
    partial void UpdateServiceOrderType(ServiceOrderType instance);
    partial void DeleteServiceOrderType(ServiceOrderType instance);
    partial void InsertServiceType(ServiceType instance);
    partial void UpdateServiceType(ServiceType instance);
    partial void DeleteServiceType(ServiceType instance);
    partial void InsertSex(Sex instance);
    partial void UpdateSex(Sex instance);
    partial void DeleteSex(Sex instance);
    partial void InsertShift(Shift instance);
    partial void UpdateShift(Shift instance);
    partial void DeleteShift(Shift instance);
    partial void InsertState(State instance);
    partial void UpdateState(State instance);
    partial void DeleteState(State instance);
    partial void InsertStatement(Statement instance);
    partial void UpdateStatement(Statement instance);
    partial void DeleteStatement(Statement instance);
    partial void InsertStatementItem(StatementItem instance);
    partial void UpdateStatementItem(StatementItem instance);
    partial void DeleteStatementItem(StatementItem instance);
    partial void InsertStatusHistory(StatusHistory instance);
    partial void UpdateStatusHistory(StatusHistory instance);
    partial void DeleteStatusHistory(StatusHistory instance);
    partial void InsertSupplier(Supplier instance);
    partial void UpdateSupplier(Supplier instance);
    partial void DeleteSupplier(Supplier instance);
    partial void InsertSupplierCategory(SupplierCategory instance);
    partial void UpdateSupplierCategory(SupplierCategory instance);
    partial void DeleteSupplierCategory(SupplierCategory instance);
    partial void InsertSupplierContact(SupplierContact instance);
    partial void UpdateSupplierContact(SupplierContact instance);
    partial void DeleteSupplierContact(SupplierContact instance);
    partial void InsertSystemParameter(SystemParameter instance);
    partial void UpdateSystemParameter(SystemParameter instance);
    partial void DeleteSystemParameter(SystemParameter instance);
    partial void InsertTask(Task instance);
    partial void UpdateTask(Task instance);
    partial void DeleteTask(Task instance);
    partial void InsertTaskStatus(TaskStatus instance);
    partial void UpdateTaskStatus(TaskStatus instance);
    partial void DeleteTaskStatus(TaskStatus instance);
    partial void InsertTaskUser(TaskUser instance);
    partial void UpdateTaskUser(TaskUser instance);
    partial void DeleteTaskUser(TaskUser instance);
    partial void InsertTransporter(Transporter instance);
    partial void UpdateTransporter(Transporter instance);
    partial void DeleteTransporter(Transporter instance);
    partial void InsertUserActivityLog(UserActivityLog instance);
    partial void UpdateUserActivityLog(UserActivityLog instance);
    partial void DeleteUserActivityLog(UserActivityLog instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertUsersInRole(UsersInRole instance);
    partial void UpdateUsersInRole(UsersInRole instance);
    partial void DeleteUsersInRole(UsersInRole instance);
    partial void InsertVacationInterval(VacationInterval instance);
    partial void UpdateVacationInterval(VacationInterval instance);
    partial void DeleteVacationInterval(VacationInterval instance);
    partial void InsertWebPage(WebPage instance);
    partial void UpdateWebPage(WebPage instance);
    partial void DeleteWebPage(WebPage instance);
    #endregion
		
		public InfoControlDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public InfoControlDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public InfoControlDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public InfoControlDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Account> Accounts
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<WorkJourney> WorkJourneys
		{
			get
			{
				return this.GetTable<WorkJourney>();
			}
		}
		
		public System.Data.Linq.Table<AccountingPlan> AccountingPlans
		{
			get
			{
				return this.GetTable<AccountingPlan>();
			}
		}
		
		public System.Data.Linq.Table<AdditionalInformation> AdditionalInformations
		{
			get
			{
				return this.GetTable<AdditionalInformation>();
			}
		}
		
		public System.Data.Linq.Table<AdditionalInformationData> AdditionalInformationDatas
		{
			get
			{
				return this.GetTable<AdditionalInformationData>();
			}
		}
		
		public System.Data.Linq.Table<Address> Addresses
		{
			get
			{
				return this.GetTable<Address>();
			}
		}
		
		public System.Data.Linq.Table<Alert> Alerts
		{
			get
			{
				return this.GetTable<Alert>();
			}
		}
		
		public System.Data.Linq.Table<Alienation> Alienations
		{
			get
			{
				return this.GetTable<Alienation>();
			}
		}
		
		public System.Data.Linq.Table<Application> Applications
		{
			get
			{
				return this.GetTable<Application>();
			}
		}
		
		public System.Data.Linq.Table<Bank> Banks
		{
			get
			{
				return this.GetTable<Bank>();
			}
		}
		
		public System.Data.Linq.Table<BarCodeType> BarCodeTypes
		{
			get
			{
				return this.GetTable<BarCodeType>();
			}
		}
		
		public System.Data.Linq.Table<Bill> Bills
		{
			get
			{
				return this.GetTable<Bill>();
			}
		}
		
		public System.Data.Linq.Table<Bond> Bonds
		{
			get
			{
				return this.GetTable<Bond>();
			}
		}
		
		public System.Data.Linq.Table<Branch> Branches
		{
			get
			{
				return this.GetTable<Branch>();
			}
		}
		
		public System.Data.Linq.Table<BranchFunction> BranchFunctions
		{
			get
			{
				return this.GetTable<BranchFunction>();
			}
		}
		
		public System.Data.Linq.Table<Budget> Budgets
		{
			get
			{
				return this.GetTable<Budget>();
			}
		}
		
		public System.Data.Linq.Table<BudgetItem> BudgetItems
		{
			get
			{
				return this.GetTable<BudgetItem>();
			}
		}
		
		public System.Data.Linq.Table<BudgetStatus> BudgetStatus
		{
			get
			{
				return this.GetTable<BudgetStatus>();
			}
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<CFOP> CFOPs
		{
			get
			{
				return this.GetTable<CFOP>();
			}
		}
		
		public System.Data.Linq.Table<Check> Checks
		{
			get
			{
				return this.GetTable<Check>();
			}
		}
		
		public System.Data.Linq.Table<City> Cities
		{
			get
			{
				return this.GetTable<City>();
			}
		}
		
		public System.Data.Linq.Table<Cnae> Cnaes
		{
			get
			{
				return this.GetTable<Cnae>();
			}
		}
		
		public System.Data.Linq.Table<Comment> Comments
		{
			get
			{
				return this.GetTable<Comment>();
			}
		}
		
		public System.Data.Linq.Table<Company> Companies
		{
			get
			{
				return this.GetTable<Company>();
			}
		}
		
		public System.Data.Linq.Table<CompanyConfiguration> CompanyConfigurations
		{
			get
			{
				return this.GetTable<CompanyConfiguration>();
			}
		}
		
		public System.Data.Linq.Table<CompanyUser> CompanyUsers
		{
			get
			{
				return this.GetTable<CompanyUser>();
			}
		}
		
		public System.Data.Linq.Table<CompositeProduct> CompositeProducts
		{
			get
			{
				return this.GetTable<CompositeProduct>();
			}
		}
		
		public System.Data.Linq.Table<Contact> Contacts
		{
			get
			{
				return this.GetTable<Contact>();
			}
		}
		
		public System.Data.Linq.Table<Contract> Contracts
		{
			get
			{
				return this.GetTable<Contract>();
			}
		}
		
		public System.Data.Linq.Table<ContractAssociated> ContractAssociateds
		{
			get
			{
				return this.GetTable<ContractAssociated>();
			}
		}
		
		public System.Data.Linq.Table<ContractPendency> ContractPendencies
		{
			get
			{
				return this.GetTable<ContractPendency>();
			}
		}
		
		public System.Data.Linq.Table<ContractStatus> ContractStatus
		{
			get
			{
				return this.GetTable<ContractStatus>();
			}
		}
		
		public System.Data.Linq.Table<ContractType> ContractTypes
		{
			get
			{
				return this.GetTable<ContractType>();
			}
		}
		
		public System.Data.Linq.Table<CostCenter> CostCenters
		{
			get
			{
				return this.GetTable<CostCenter>();
			}
		}
		
		public System.Data.Linq.Table<CurrencyRate> CurrencyRates
		{
			get
			{
				return this.GetTable<CurrencyRate>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<CustomerCall> CustomerCalls
		{
			get
			{
				return this.GetTable<CustomerCall>();
			}
		}
		
		public System.Data.Linq.Table<CustomerCallStatus> CustomerCallStatus
		{
			get
			{
				return this.GetTable<CustomerCallStatus>();
			}
		}
		
		public System.Data.Linq.Table<CustomerCallType> CustomerCallTypes
		{
			get
			{
				return this.GetTable<CustomerCallType>();
			}
		}
		
		public System.Data.Linq.Table<CustomerContact> CustomerContacts
		{
			get
			{
				return this.GetTable<CustomerContact>();
			}
		}
		
		public System.Data.Linq.Table<CustomerEquipment> CustomerEquipments
		{
			get
			{
				return this.GetTable<CustomerEquipment>();
			}
		}
		
		public System.Data.Linq.Table<CustomerFollowup> CustomerFollowups
		{
			get
			{
				return this.GetTable<CustomerFollowup>();
			}
		}
		
		public System.Data.Linq.Table<CustomerFollowupAction> CustomerFollowupActions
		{
			get
			{
				return this.GetTable<CustomerFollowupAction>();
			}
		}
		
		public System.Data.Linq.Table<CustomerType> CustomerTypes
		{
			get
			{
				return this.GetTable<CustomerType>();
			}
		}
		
		public System.Data.Linq.Table<CustomFunction> CustomFunctions
		{
			get
			{
				return this.GetTable<CustomFunction>();
			}
		}
		
		public System.Data.Linq.Table<Deposit> Deposits
		{
			get
			{
				return this.GetTable<Deposit>();
			}
		}
		
		public System.Data.Linq.Table<DocumentTemplate> DocumentTemplates
		{
			get
			{
				return this.GetTable<DocumentTemplate>();
			}
		}
		
		public System.Data.Linq.Table<DocumentTemplateType> DocumentTemplateTypes
		{
			get
			{
				return this.GetTable<DocumentTemplateType>();
			}
		}
		
		public System.Data.Linq.Table<DropPayout> DropPayouts
		{
			get
			{
				return this.GetTable<DropPayout>();
			}
		}
		
		public System.Data.Linq.Table<EducationLevel> EducationLevels
		{
			get
			{
				return this.GetTable<EducationLevel>();
			}
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<EmployeeAdditionalInformation> EmployeeAdditionalInformations
		{
			get
			{
				return this.GetTable<EmployeeAdditionalInformation>();
			}
		}
		
		public System.Data.Linq.Table<EmployeeCompetency> EmployeeCompetencies
		{
			get
			{
				return this.GetTable<EmployeeCompetency>();
			}
		}
		
		public System.Data.Linq.Table<EmployeeDependent> EmployeeDependents
		{
			get
			{
				return this.GetTable<EmployeeDependent>();
			}
		}
		
		public System.Data.Linq.Table<EmployeeFunction> EmployeeFunctions
		{
			get
			{
				return this.GetTable<EmployeeFunction>();
			}
		}
		
		public System.Data.Linq.Table<EmployeeFunctionHistory> EmployeeFunctionHistories
		{
			get
			{
				return this.GetTable<EmployeeFunctionHistory>();
			}
		}
		
		public System.Data.Linq.Table<EmployeeOtherSchool> EmployeeOtherSchools
		{
			get
			{
				return this.GetTable<EmployeeOtherSchool>();
			}
		}
		
		public System.Data.Linq.Table<Event> Events
		{
			get
			{
				return this.GetTable<Event>();
			}
		}
		
		public System.Data.Linq.Table<EventStatus> EventStatus
		{
			get
			{
				return this.GetTable<EventStatus>();
			}
		}
		
		public System.Data.Linq.Table<ExpenditureAuthorization> ExpenditureAuthorizations
		{
			get
			{
				return this.GetTable<ExpenditureAuthorization>();
			}
		}
		
		public System.Data.Linq.Table<FamilyRendInterval> FamilyRendIntervals
		{
			get
			{
				return this.GetTable<FamilyRendInterval>();
			}
		}
		
		public System.Data.Linq.Table<FinancierCondition> FinancierConditions
		{
			get
			{
				return this.GetTable<FinancierCondition>();
			}
		}
		
		public System.Data.Linq.Table<FinancierOperation> FinancierOperations
		{
			get
			{
				return this.GetTable<FinancierOperation>();
			}
		}
		
		public System.Data.Linq.Table<Function> Functions
		{
			get
			{
				return this.GetTable<Function>();
			}
		}
		
		public System.Data.Linq.Table<InssInterval> InssIntervals
		{
			get
			{
				return this.GetTable<InssInterval>();
			}
		}
		
		public System.Data.Linq.Table<Inventory> Inventories
		{
			get
			{
				return this.GetTable<Inventory>();
			}
		}
		
		public System.Data.Linq.Table<InventoryDropType> InventoryDropTypes
		{
			get
			{
				return this.GetTable<InventoryDropType>();
			}
		}
		
		public System.Data.Linq.Table<InventoryEntryType> InventoryEntryTypes
		{
			get
			{
				return this.GetTable<InventoryEntryType>();
			}
		}
		
		public System.Data.Linq.Table<InventoryHistory> InventoryHistories
		{
			get
			{
				return this.GetTable<InventoryHistory>();
			}
		}
		
		public System.Data.Linq.Table<InventoryMoviment> InventoryMoviments
		{
			get
			{
				return this.GetTable<InventoryMoviment>();
			}
		}
		
		public System.Data.Linq.Table<InventoryRMA> InventoryRMAs
		{
			get
			{
				return this.GetTable<InventoryRMA>();
			}
		}
		
		public System.Data.Linq.Table<InventorySerial> InventorySerials
		{
			get
			{
				return this.GetTable<InventorySerial>();
			}
		}
		
		public System.Data.Linq.Table<Invoice> Invoices
		{
			get
			{
				return this.GetTable<Invoice>();
			}
		}
		
		public System.Data.Linq.Table<IrrfInterval> IrrfIntervals
		{
			get
			{
				return this.GetTable<IrrfInterval>();
			}
		}
		
		public System.Data.Linq.Table<JudicialNature> JudicialNatures
		{
			get
			{
				return this.GetTable<JudicialNature>();
			}
		}
		
		public System.Data.Linq.Table<LegalEntityProfile> LegalEntityProfiles
		{
			get
			{
				return this.GetTable<LegalEntityProfile>();
			}
		}
		
		public System.Data.Linq.Table<Manufacturer> Manufacturers
		{
			get
			{
				return this.GetTable<Manufacturer>();
			}
		}
		
		public System.Data.Linq.Table<MaritalStatus> MaritalStatus
		{
			get
			{
				return this.GetTable<MaritalStatus>();
			}
		}
		
		public System.Data.Linq.Table<Neighborhood> Neighborhoods
		{
			get
			{
				return this.GetTable<Neighborhood>();
			}
		}
		
		public System.Data.Linq.Table<OrganizationLevel> OrganizationLevels
		{
			get
			{
				return this.GetTable<OrganizationLevel>();
			}
		}
		
		public System.Data.Linq.Table<OtherSchool> OtherSchools
		{
			get
			{
				return this.GetTable<OtherSchool>();
			}
		}
		
		public System.Data.Linq.Table<Package> Packages
		{
			get
			{
				return this.GetTable<Package>();
			}
		}
		
		public System.Data.Linq.Table<PackageAdditional> PackageAdditionals
		{
			get
			{
				return this.GetTable<PackageAdditional>();
			}
		}
		
		public System.Data.Linq.Table<PackageFunction> PackageFunctions
		{
			get
			{
				return this.GetTable<PackageFunction>();
			}
		}
		
		public System.Data.Linq.Table<PageTag> PageTags
		{
			get
			{
				return this.GetTable<PageTag>();
			}
		}
		
		public System.Data.Linq.Table<Parcel> Parcels
		{
			get
			{
				return this.GetTable<Parcel>();
			}
		}
		
		public System.Data.Linq.Table<PaymentMethod> PaymentMethods
		{
			get
			{
				return this.GetTable<PaymentMethod>();
			}
		}
		
		public System.Data.Linq.Table<Permission> Permissions
		{
			get
			{
				return this.GetTable<Permission>();
			}
		}
		
		public System.Data.Linq.Table<PermissionType> PermissionTypes
		{
			get
			{
				return this.GetTable<PermissionType>();
			}
		}
		
		public System.Data.Linq.Table<Plan> Plans
		{
			get
			{
				return this.GetTable<Plan>();
			}
		}
		
		public System.Data.Linq.Table<Post> Posts
		{
			get
			{
				return this.GetTable<Post>();
			}
		}
		
		public System.Data.Linq.Table<Product> Products
		{
			get
			{
				return this.GetTable<Product>();
			}
		}
		
		public System.Data.Linq.Table<ProductCertificate> ProductCertificates
		{
			get
			{
				return this.GetTable<ProductCertificate>();
			}
		}
		
		public System.Data.Linq.Table<ProductImage> ProductImages
		{
			get
			{
				return this.GetTable<ProductImage>();
			}
		}
		
		public System.Data.Linq.Table<ProductManufacturer> ProductManufacturers
		{
			get
			{
				return this.GetTable<ProductManufacturer>();
			}
		}
		
		public System.Data.Linq.Table<ProductPackage> ProductPackages
		{
			get
			{
				return this.GetTable<ProductPackage>();
			}
		}
		
		public System.Data.Linq.Table<ProductPart> ProductParts
		{
			get
			{
				return this.GetTable<ProductPart>();
			}
		}
		
		public System.Data.Linq.Table<Profile> Profiles
		{
			get
			{
				return this.GetTable<Profile>();
			}
		}
		
		public System.Data.Linq.Table<ProfileAddress> ProfileAddresses
		{
			get
			{
				return this.GetTable<ProfileAddress>();
			}
		}
		
		public System.Data.Linq.Table<ProfitAssessment> ProfitAssessments
		{
			get
			{
				return this.GetTable<ProfitAssessment>();
			}
		}
		
		public System.Data.Linq.Table<PurchaseOrder> PurchaseOrders
		{
			get
			{
				return this.GetTable<PurchaseOrder>();
			}
		}
		
		public System.Data.Linq.Table<PurchaseOrderItem> PurchaseOrderItems
		{
			get
			{
				return this.GetTable<PurchaseOrderItem>();
			}
		}
		
		public System.Data.Linq.Table<PurchaseOrderStatus> PurchaseOrderStatus
		{
			get
			{
				return this.GetTable<PurchaseOrderStatus>();
			}
		}
		
		public System.Data.Linq.Table<PurchaseRequest> PurchaseRequests
		{
			get
			{
				return this.GetTable<PurchaseRequest>();
			}
		}
		
		public System.Data.Linq.Table<PurchaseRequestItem> PurchaseRequestItems
		{
			get
			{
				return this.GetTable<PurchaseRequestItem>();
			}
		}
		
		public System.Data.Linq.Table<Quotation> Quotations
		{
			get
			{
				return this.GetTable<Quotation>();
			}
		}
		
		public System.Data.Linq.Table<QuotationItem> QuotationItems
		{
			get
			{
				return this.GetTable<QuotationItem>();
			}
		}
		
		public System.Data.Linq.Table<Receipt> Receipts
		{
			get
			{
				return this.GetTable<Receipt>();
			}
		}
		
		public System.Data.Linq.Table<ReceiptFieldConfiguration> ReceiptFieldConfigurations
		{
			get
			{
				return this.GetTable<ReceiptFieldConfiguration>();
			}
		}
		
		public System.Data.Linq.Table<ReceiptItem> ReceiptItems
		{
			get
			{
				return this.GetTable<ReceiptItem>();
			}
		}
		
		public System.Data.Linq.Table<ReportColumn> ReportColumns
		{
			get
			{
				return this.GetTable<ReportColumn>();
			}
		}
		
		public System.Data.Linq.Table<ReportColumnsSchema> ReportColumnsSchemas
		{
			get
			{
				return this.GetTable<ReportColumnsSchema>();
			}
		}
		
		public System.Data.Linq.Table<ReportDataFunction> ReportDataFunctions
		{
			get
			{
				return this.GetTable<ReportDataFunction>();
			}
		}
		
		public System.Data.Linq.Table<ReportDataType> ReportDataTypes
		{
			get
			{
				return this.GetTable<ReportDataType>();
			}
		}
		
		public System.Data.Linq.Table<ReportFilter> ReportFilters
		{
			get
			{
				return this.GetTable<ReportFilter>();
			}
		}
		
		public System.Data.Linq.Table<ReportFilterType> ReportFilterTypes
		{
			get
			{
				return this.GetTable<ReportFilterType>();
			}
		}
		
		public System.Data.Linq.Table<Report> Reports
		{
			get
			{
				return this.GetTable<Report>();
			}
		}
		
		public System.Data.Linq.Table<ReportSort> ReportSorts
		{
			get
			{
				return this.GetTable<ReportSort>();
			}
		}
		
		public System.Data.Linq.Table<ReportTablesSchema> ReportTablesSchemas
		{
			get
			{
				return this.GetTable<ReportTablesSchema>();
			}
		}
		
		public System.Data.Linq.Table<Representant> Representants
		{
			get
			{
				return this.GetTable<Representant>();
			}
		}
		
		public System.Data.Linq.Table<RepresentantUser> RepresentantUsers
		{
			get
			{
				return this.GetTable<RepresentantUser>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<Sale> Sales
		{
			get
			{
				return this.GetTable<Sale>();
			}
		}
		
		public System.Data.Linq.Table<SaleItem> SaleItems
		{
			get
			{
				return this.GetTable<SaleItem>();
			}
		}
		
		public System.Data.Linq.Table<SaleStatus> SaleStatus
		{
			get
			{
				return this.GetTable<SaleStatus>();
			}
		}
		
		public System.Data.Linq.Table<ScheduledTask> ScheduledTasks
		{
			get
			{
				return this.GetTable<ScheduledTask>();
			}
		}
		
		public System.Data.Linq.Table<Service> Services
		{
			get
			{
				return this.GetTable<Service>();
			}
		}
		
		public System.Data.Linq.Table<ServiceOrder> ServiceOrders
		{
			get
			{
				return this.GetTable<ServiceOrder>();
			}
		}
		
		public System.Data.Linq.Table<ServiceOrderBook> ServiceOrderBooks
		{
			get
			{
				return this.GetTable<ServiceOrderBook>();
			}
		}
		
		public System.Data.Linq.Table<ServiceOrderEquipmentDamage> ServiceOrderEquipmentDamages
		{
			get
			{
				return this.GetTable<ServiceOrderEquipmentDamage>();
			}
		}
		
		public System.Data.Linq.Table<ServiceOrderHaltType> ServiceOrderHaltTypes
		{
			get
			{
				return this.GetTable<ServiceOrderHaltType>();
			}
		}
		
		public System.Data.Linq.Table<ServiceOrderInstallType> ServiceOrderInstallTypes
		{
			get
			{
				return this.GetTable<ServiceOrderInstallType>();
			}
		}
		
		public System.Data.Linq.Table<ServiceOrderItem> ServiceOrderItems
		{
			get
			{
				return this.GetTable<ServiceOrderItem>();
			}
		}
		
		public System.Data.Linq.Table<ServiceOrderProductDamage> ServiceOrderProductDamages
		{
			get
			{
				return this.GetTable<ServiceOrderProductDamage>();
			}
		}
		
		public System.Data.Linq.Table<ServiceOrderProductType> ServiceOrderProductTypes
		{
			get
			{
				return this.GetTable<ServiceOrderProductType>();
			}
		}
		
		public System.Data.Linq.Table<ServiceOrderStatus> ServiceOrderStatus
		{
			get
			{
				return this.GetTable<ServiceOrderStatus>();
			}
		}
		
		public System.Data.Linq.Table<ServiceOrderTest> ServiceOrderTests
		{
			get
			{
				return this.GetTable<ServiceOrderTest>();
			}
		}
		
		public System.Data.Linq.Table<ServiceOrderType> ServiceOrderTypes
		{
			get
			{
				return this.GetTable<ServiceOrderType>();
			}
		}
		
		public System.Data.Linq.Table<ServiceType> ServiceTypes
		{
			get
			{
				return this.GetTable<ServiceType>();
			}
		}
		
		public System.Data.Linq.Table<Sex> Sexes
		{
			get
			{
				return this.GetTable<Sex>();
			}
		}
		
		public System.Data.Linq.Table<Shift> Shifts
		{
			get
			{
				return this.GetTable<Shift>();
			}
		}
		
		public System.Data.Linq.Table<State> States
		{
			get
			{
				return this.GetTable<State>();
			}
		}
		
		public System.Data.Linq.Table<Statement> Statements
		{
			get
			{
				return this.GetTable<Statement>();
			}
		}
		
		public System.Data.Linq.Table<StatementItem> StatementItems
		{
			get
			{
				return this.GetTable<StatementItem>();
			}
		}
		
		public System.Data.Linq.Table<StatusHistory> StatusHistories
		{
			get
			{
				return this.GetTable<StatusHistory>();
			}
		}
		
		public System.Data.Linq.Table<Supplier> Suppliers
		{
			get
			{
				return this.GetTable<Supplier>();
			}
		}
		
		public System.Data.Linq.Table<SupplierCategory> SupplierCategories
		{
			get
			{
				return this.GetTable<SupplierCategory>();
			}
		}
		
		public System.Data.Linq.Table<SupplierContact> SupplierContacts
		{
			get
			{
				return this.GetTable<SupplierContact>();
			}
		}
		
		public System.Data.Linq.Table<SystemParameter> SystemParameters
		{
			get
			{
				return this.GetTable<SystemParameter>();
			}
		}
		
		public System.Data.Linq.Table<Task> Tasks
		{
			get
			{
				return this.GetTable<Task>();
			}
		}
		
		public System.Data.Linq.Table<TaskStatus> TaskStatus
		{
			get
			{
				return this.GetTable<TaskStatus>();
			}
		}
		
		public System.Data.Linq.Table<TaskUser> TaskUsers
		{
			get
			{
				return this.GetTable<TaskUser>();
			}
		}
		
		public System.Data.Linq.Table<Transporter> Transporters
		{
			get
			{
				return this.GetTable<Transporter>();
			}
		}
		
		public System.Data.Linq.Table<UserActivityLog> UserActivityLogs
		{
			get
			{
				return this.GetTable<UserActivityLog>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<UsersInRole> UsersInRoles
		{
			get
			{
				return this.GetTable<UsersInRole>();
			}
		}
		
		public System.Data.Linq.Table<VacationInterval> VacationIntervals
		{
			get
			{
				return this.GetTable<VacationInterval>();
			}
		}
		
		public System.Data.Linq.Table<WebPage> WebPages
		{
			get
			{
				return this.GetTable<WebPage>();
			}
		}
	}
	
	[Table(Name="dbo.Account")]
	[DataContract()]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AccountId;
		
		private System.Nullable<int> _BankId;
		
		private string _Agency;
		
		private string _AccountNumber;
		
		private string _PostalCode;
		
		private string _AddressNumber;
		
		private string _AddressComp;
		
		private string _AgencyPhone;
		
		private string _AgencyManager;
		
		private string _AgencyMail;
		
		private int _CompanyId;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<FinancierOperation> _FinancierOperations;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Parcel> _Parcels;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Bank> _Bank;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Company> _Company;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccountIdChanging(int value);
    partial void OnAccountIdChanged();
    partial void OnBankIdChanging(System.Nullable<int> value);
    partial void OnBankIdChanged();
    partial void OnAgencyChanging(string value);
    partial void OnAgencyChanged();
    partial void OnAccountNumberChanging(string value);
    partial void OnAccountNumberChanged();
    partial void OnPostalCodeChanging(string value);
    partial void OnPostalCodeChanged();
    partial void OnAddressNumberChanging(string value);
    partial void OnAddressNumberChanged();
    partial void OnAddressCompChanging(string value);
    partial void OnAddressCompChanged();
    partial void OnAgencyPhoneChanging(string value);
    partial void OnAgencyPhoneChanged();
    partial void OnAgencyManagerChanging(string value);
    partial void OnAgencyManagerChanged();
    partial void OnAgencyMailChanging(string value);
    partial void OnAgencyMailChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    #endregion
		
		public Account()
		{
			this.Initialize();
		}
		
		[Column(Storage="_AccountId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[Column(Storage="_BankId", DbType="Int")]
		[DataMember(Order=2)]
		public System.Nullable<int> BankId
		{
			get
			{
				return this._BankId;
			}
			set
			{
				if ((this._BankId != value))
				{
					if (this._Bank.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBankIdChanging(value);
					this.SendPropertyChanging();
					this._BankId = value;
					this.SendPropertyChanged("BankId");
					this.OnBankIdChanged();
				}
			}
		}
		
		[Column(Storage="_Agency", DbType="VarChar(10)")]
		[DataMember(Order=3)]
		public string Agency
		{
			get
			{
				return this._Agency;
			}
			set
			{
				if ((this._Agency != value))
				{
					this.OnAgencyChanging(value);
					this.SendPropertyChanging();
					this._Agency = value;
					this.SendPropertyChanged("Agency");
					this.OnAgencyChanged();
				}
			}
		}
		
		[Column(Storage="_AccountNumber", DbType="VarChar(10)")]
		[DataMember(Order=4)]
		public string AccountNumber
		{
			get
			{
				return this._AccountNumber;
			}
			set
			{
				if ((this._AccountNumber != value))
				{
					this.OnAccountNumberChanging(value);
					this.SendPropertyChanging();
					this._AccountNumber = value;
					this.SendPropertyChanged("AccountNumber");
					this.OnAccountNumberChanged();
				}
			}
		}
		
		[Column(Storage="_PostalCode", DbType="Char(8)")]
		[DataMember(Order=5)]
		public string PostalCode
		{
			get
			{
				return this._PostalCode;
			}
			set
			{
				if ((this._PostalCode != value))
				{
					this.OnPostalCodeChanging(value);
					this.SendPropertyChanging();
					this._PostalCode = value;
					this.SendPropertyChanged("PostalCode");
					this.OnPostalCodeChanged();
				}
			}
		}
		
		[Column(Storage="_AddressNumber", DbType="VarChar(8)")]
		[DataMember(Order=6)]
		public string AddressNumber
		{
			get
			{
				return this._AddressNumber;
			}
			set
			{
				if ((this._AddressNumber != value))
				{
					this.OnAddressNumberChanging(value);
					this.SendPropertyChanging();
					this._AddressNumber = value;
					this.SendPropertyChanged("AddressNumber");
					this.OnAddressNumberChanged();
				}
			}
		}
		
		[Column(Storage="_AddressComp", DbType="VarChar(128)")]
		[DataMember(Order=7)]
		public string AddressComp
		{
			get
			{
				return this._AddressComp;
			}
			set
			{
				if ((this._AddressComp != value))
				{
					this.OnAddressCompChanging(value);
					this.SendPropertyChanging();
					this._AddressComp = value;
					this.SendPropertyChanged("AddressComp");
					this.OnAddressCompChanged();
				}
			}
		}
		
		[Column(Storage="_AgencyPhone", DbType="VarChar(50)")]
		[DataMember(Order=8)]
		public string AgencyPhone
		{
			get
			{
				return this._AgencyPhone;
			}
			set
			{
				if ((this._AgencyPhone != value))
				{
					this.OnAgencyPhoneChanging(value);
					this.SendPropertyChanging();
					this._AgencyPhone = value;
					this.SendPropertyChanged("AgencyPhone");
					this.OnAgencyPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_AgencyManager", DbType="VarChar(50)")]
		[DataMember(Order=9)]
		public string AgencyManager
		{
			get
			{
				return this._AgencyManager;
			}
			set
			{
				if ((this._AgencyManager != value))
				{
					this.OnAgencyManagerChanging(value);
					this.SendPropertyChanging();
					this._AgencyManager = value;
					this.SendPropertyChanged("AgencyManager");
					this.OnAgencyManagerChanged();
				}
			}
		}
		
		[Column(Storage="_AgencyMail", DbType="VarChar(50)")]
		[DataMember(Order=10)]
		public string AgencyMail
		{
			get
			{
				return this._AgencyMail;
			}
			set
			{
				if ((this._AgencyMail != value))
				{
					this.OnAgencyMailChanging(value);
					this.SendPropertyChanging();
					this._AgencyMail = value;
					this.SendPropertyChanged("AgencyMail");
					this.OnAgencyMailChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=11)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Association(Name="Account_FinancierOperation", Storage="_FinancierOperations", ThisKey="AccountId,CompanyId", OtherKey="AccountId,CompanyId")]
		[DataMember(Order=12, EmitDefaultValue=false)]
		public EntitySet<FinancierOperation> FinancierOperations
		{
			get
			{
				if ((this.serializing 
							&& (this._FinancierOperations.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._FinancierOperations;
			}
			set
			{
				this._FinancierOperations.Assign(value);
			}
		}
		
		[Association(Name="Account_Parcel", Storage="_Parcels", ThisKey="AccountId,CompanyId", OtherKey="AccountId,CompanyId")]
		[DataMember(Order=13, EmitDefaultValue=false)]
		public EntitySet<Parcel> Parcels
		{
			get
			{
				if ((this.serializing 
							&& (this._Parcels.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Parcels;
			}
			set
			{
				this._Parcels.Assign(value);
			}
		}
		
		[Association(Name="Bank_Account", Storage="_Bank", ThisKey="BankId", OtherKey="BankId", IsForeignKey=true, DeleteRule="CASCADE")]
		public Bank Bank
		{
			get
			{
				return this._Bank.Entity;
			}
			set
			{
				Bank previousValue = this._Bank.Entity;
				if (((previousValue != value) 
							|| (this._Bank.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bank.Entity = null;
						previousValue.Accounts.Remove(this);
					}
					this._Bank.Entity = value;
					if ((value != null))
					{
						value.Accounts.Add(this);
						this._BankId = value.BankId;
					}
					else
					{
						this._BankId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Bank");
				}
			}
		}
		
		[Association(Name="Company_Account", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Accounts.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Accounts.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FinancierOperations(FinancierOperation entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_FinancierOperations(FinancierOperation entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_Parcels(Parcel entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Parcels(Parcel entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void Initialize()
		{
			this._FinancierOperations = new EntitySet<FinancierOperation>(new Action<FinancierOperation>(this.attach_FinancierOperations), new Action<FinancierOperation>(this.detach_FinancierOperations));
			this._Parcels = new EntitySet<Parcel>(new Action<Parcel>(this.attach_Parcels), new Action<Parcel>(this.detach_Parcels));
			this._Bank = default(EntityRef<Bank>);
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.WorkJourney")]
	[DataContract()]
	public partial class WorkJourney : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _WorkJourneyId;
		
		private string _Name;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Employee> _Employees;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWorkJourneyIdChanging(int value);
    partial void OnWorkJourneyIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public WorkJourney()
		{
			this.Initialize();
		}
		
		[Column(Storage="_WorkJourneyId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int WorkJourneyId
		{
			get
			{
				return this._WorkJourneyId;
			}
			set
			{
				if ((this._WorkJourneyId != value))
				{
					this.OnWorkJourneyIdChanging(value);
					this.SendPropertyChanging();
					this._WorkJourneyId = value;
					this.SendPropertyChanged("WorkJourneyId");
					this.OnWorkJourneyIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="WorkJourney_Employee", Storage="_Employees", ThisKey="WorkJourneyId", OtherKey="WorkJourneyId")]
		[DataMember(Order=3, EmitDefaultValue=false)]
		public EntitySet<Employee> Employees
		{
			get
			{
				if ((this.serializing 
							&& (this._Employees.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.WorkJourney = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.WorkJourney = null;
		}
		
		private void Initialize()
		{
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.AccountingPlan")]
	[DataContract()]
	public partial class AccountingPlan : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AccountingPlanId;
		
		private System.Nullable<int> _ParentId;
		
		private string _Name;
		
		private string _Code;
		
		private int _CompanyId;
		
		private System.Nullable<bool> _CanDelete;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<AccountingPlan> _AccountingPlans;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Bill> _Bills;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Invoice> _Invoices;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<AccountingPlan> _AccountingPlan1;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Company> _Company;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccountingPlanIdChanging(int value);
    partial void OnAccountingPlanIdChanged();
    partial void OnParentIdChanging(System.Nullable<int> value);
    partial void OnParentIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnCanDeleteChanging(System.Nullable<bool> value);
    partial void OnCanDeleteChanged();
    #endregion
		
		public AccountingPlan()
		{
			this.Initialize();
		}
		
		[Column(Storage="_AccountingPlanId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int AccountingPlanId
		{
			get
			{
				return this._AccountingPlanId;
			}
			set
			{
				if ((this._AccountingPlanId != value))
				{
					this.OnAccountingPlanIdChanging(value);
					this.SendPropertyChanging();
					this._AccountingPlanId = value;
					this.SendPropertyChanged("AccountingPlanId");
					this.OnAccountingPlanIdChanged();
				}
			}
		}
		
		[Column(Storage="_ParentId", DbType="Int")]
		[DataMember(Order=2)]
		public System.Nullable<int> ParentId
		{
			get
			{
				return this._ParentId;
			}
			set
			{
				if ((this._ParentId != value))
				{
					if (this._AccountingPlan1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIdChanging(value);
					this.SendPropertyChanging();
					this._ParentId = value;
					this.SendPropertyChanged("ParentId");
					this.OnParentIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		[DataMember(Order=3)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Code", DbType="VarChar(50)")]
		[DataMember(Order=4)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=5)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._AccountingPlan1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Column(Storage="_CanDelete", DbType="Bit")]
		[DataMember(Order=6)]
		public System.Nullable<bool> CanDelete
		{
			get
			{
				return this._CanDelete;
			}
			set
			{
				if ((this._CanDelete != value))
				{
					this.OnCanDeleteChanging(value);
					this.SendPropertyChanging();
					this._CanDelete = value;
					this.SendPropertyChanged("CanDelete");
					this.OnCanDeleteChanged();
				}
			}
		}
		
		[Association(Name="AccountingPlan_AccountingPlan", Storage="_AccountingPlans", ThisKey="AccountingPlanId,CompanyId", OtherKey="ParentId,CompanyId")]
		[DataMember(Order=7, EmitDefaultValue=false)]
		public EntitySet<AccountingPlan> AccountingPlans
		{
			get
			{
				if ((this.serializing 
							&& (this._AccountingPlans.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._AccountingPlans;
			}
			set
			{
				this._AccountingPlans.Assign(value);
			}
		}
		
		[Association(Name="AccountingPlan_Bill", Storage="_Bills", ThisKey="AccountingPlanId,CompanyId", OtherKey="AccountingPlanId,CompanyId")]
		[DataMember(Order=8, EmitDefaultValue=false)]
		public EntitySet<Bill> Bills
		{
			get
			{
				if ((this.serializing 
							&& (this._Bills.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Bills;
			}
			set
			{
				this._Bills.Assign(value);
			}
		}
		
		[Association(Name="AccountingPlan_Invoice", Storage="_Invoices", ThisKey="AccountingPlanId,CompanyId", OtherKey="AccountingPlanId,CompanyId")]
		[DataMember(Order=9, EmitDefaultValue=false)]
		public EntitySet<Invoice> Invoices
		{
			get
			{
				if ((this.serializing 
							&& (this._Invoices.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Invoices;
			}
			set
			{
				this._Invoices.Assign(value);
			}
		}
		
		[Association(Name="AccountingPlan_AccountingPlan", Storage="_AccountingPlan1", ThisKey="ParentId,CompanyId", OtherKey="AccountingPlanId,CompanyId", IsForeignKey=true)]
		public AccountingPlan AccountingPlan1
		{
			get
			{
				return this._AccountingPlan1.Entity;
			}
			set
			{
				AccountingPlan previousValue = this._AccountingPlan1.Entity;
				if (((previousValue != value) 
							|| (this._AccountingPlan1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccountingPlan1.Entity = null;
						previousValue.AccountingPlans.Remove(this);
					}
					this._AccountingPlan1.Entity = value;
					if ((value != null))
					{
						value.AccountingPlans.Add(this);
						this._ParentId = value.AccountingPlanId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._ParentId = default(Nullable<int>);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("AccountingPlan1");
				}
			}
		}
		
		[Association(Name="Company_AccountingPlan", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.AccountingPlans.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.AccountingPlans.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AccountingPlans(AccountingPlan entity)
		{
			this.SendPropertyChanging();
			entity.AccountingPlan1 = this;
		}
		
		private void detach_AccountingPlans(AccountingPlan entity)
		{
			this.SendPropertyChanging();
			entity.AccountingPlan1 = null;
		}
		
		private void attach_Bills(Bill entity)
		{
			this.SendPropertyChanging();
			entity.AccountingPlan = this;
		}
		
		private void detach_Bills(Bill entity)
		{
			this.SendPropertyChanging();
			entity.AccountingPlan = null;
		}
		
		private void attach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.AccountingPlan = this;
		}
		
		private void detach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.AccountingPlan = null;
		}
		
		private void Initialize()
		{
			this._AccountingPlans = new EntitySet<AccountingPlan>(new Action<AccountingPlan>(this.attach_AccountingPlans), new Action<AccountingPlan>(this.detach_AccountingPlans));
			this._Bills = new EntitySet<Bill>(new Action<Bill>(this.attach_Bills), new Action<Bill>(this.detach_Bills));
			this._Invoices = new EntitySet<Invoice>(new Action<Invoice>(this.attach_Invoices), new Action<Invoice>(this.detach_Invoices));
			this._AccountingPlan1 = default(EntityRef<AccountingPlan>);
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.AdditionalInformation")]
	[DataContract()]
	public partial class AdditionalInformation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AddonInfoId;
		
		private string _Name;
		
		private int _CompanyId;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<AdditionalInformationData> _AdditionalInformationDatas;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<EmployeeAdditionalInformation> _EmployeeAdditionalInformations;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Company> _Company;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAddonInfoIdChanging(int value);
    partial void OnAddonInfoIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    #endregion
		
		public AdditionalInformation()
		{
			this.Initialize();
		}
		
		[Column(Storage="_AddonInfoId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int AddonInfoId
		{
			get
			{
				return this._AddonInfoId;
			}
			set
			{
				if ((this._AddonInfoId != value))
				{
					this.OnAddonInfoIdChanging(value);
					this.SendPropertyChanging();
					this._AddonInfoId = value;
					this.SendPropertyChanged("AddonInfoId");
					this.OnAddonInfoIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL")]
		[DataMember(Order=3)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Association(Name="AdditionalInformation_AdditionalInformationData", Storage="_AdditionalInformationDatas", ThisKey="AddonInfoId", OtherKey="AddonInfoId")]
		[DataMember(Order=4, EmitDefaultValue=false)]
		public EntitySet<AdditionalInformationData> AdditionalInformationDatas
		{
			get
			{
				if ((this.serializing 
							&& (this._AdditionalInformationDatas.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._AdditionalInformationDatas;
			}
			set
			{
				this._AdditionalInformationDatas.Assign(value);
			}
		}
		
		[Association(Name="AdditionalInformation_EmployeeAdditionalInformation", Storage="_EmployeeAdditionalInformations", ThisKey="AddonInfoId", OtherKey="AddonInfoId")]
		[DataMember(Order=5, EmitDefaultValue=false)]
		public EntitySet<EmployeeAdditionalInformation> EmployeeAdditionalInformations
		{
			get
			{
				if ((this.serializing 
							&& (this._EmployeeAdditionalInformations.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._EmployeeAdditionalInformations;
			}
			set
			{
				this._EmployeeAdditionalInformations.Assign(value);
			}
		}
		
		[Association(Name="Company_AdditionalInformation", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.AdditionalInformations.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.AdditionalInformations.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AdditionalInformationDatas(AdditionalInformationData entity)
		{
			this.SendPropertyChanging();
			entity.AdditionalInformation = this;
		}
		
		private void detach_AdditionalInformationDatas(AdditionalInformationData entity)
		{
			this.SendPropertyChanging();
			entity.AdditionalInformation = null;
		}
		
		private void attach_EmployeeAdditionalInformations(EmployeeAdditionalInformation entity)
		{
			this.SendPropertyChanging();
			entity.AdditionalInformation = this;
		}
		
		private void detach_EmployeeAdditionalInformations(EmployeeAdditionalInformation entity)
		{
			this.SendPropertyChanging();
			entity.AdditionalInformation = null;
		}
		
		private void Initialize()
		{
			this._AdditionalInformationDatas = new EntitySet<AdditionalInformationData>(new Action<AdditionalInformationData>(this.attach_AdditionalInformationDatas), new Action<AdditionalInformationData>(this.detach_AdditionalInformationDatas));
			this._EmployeeAdditionalInformations = new EntitySet<EmployeeAdditionalInformation>(new Action<EmployeeAdditionalInformation>(this.attach_EmployeeAdditionalInformations), new Action<EmployeeAdditionalInformation>(this.detach_EmployeeAdditionalInformations));
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.AdditionalInformationData")]
	[DataContract()]
	public partial class AdditionalInformationData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AddonInfoDataId;
		
		private string _Name;
		
		private int _AddonInfoId;
		
		private int _CompanyId;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<EmployeeAdditionalInformation> _EmployeeAdditionalInformations;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<AdditionalInformation> _AdditionalInformation;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Company> _Company;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAddonInfoDataIdChanging(int value);
    partial void OnAddonInfoDataIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddonInfoIdChanging(int value);
    partial void OnAddonInfoIdChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    #endregion
		
		public AdditionalInformationData()
		{
			this.Initialize();
		}
		
		[Column(Storage="_AddonInfoDataId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int AddonInfoDataId
		{
			get
			{
				return this._AddonInfoDataId;
			}
			set
			{
				if ((this._AddonInfoDataId != value))
				{
					this.OnAddonInfoDataIdChanging(value);
					this.SendPropertyChanging();
					this._AddonInfoDataId = value;
					this.SendPropertyChanged("AddonInfoDataId");
					this.OnAddonInfoDataIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_AddonInfoId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=3)]
		public int AddonInfoId
		{
			get
			{
				return this._AddonInfoId;
			}
			set
			{
				if ((this._AddonInfoId != value))
				{
					if (this._AdditionalInformation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddonInfoIdChanging(value);
					this.SendPropertyChanging();
					this._AddonInfoId = value;
					this.SendPropertyChanged("AddonInfoId");
					this.OnAddonInfoIdChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL")]
		[DataMember(Order=4)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Association(Name="AdditionalInformationData_EmployeeAdditionalInformation", Storage="_EmployeeAdditionalInformations", ThisKey="AddonInfoDataId,AddonInfoId", OtherKey="AddonInfoDataId,AddonInfoId")]
		[DataMember(Order=5, EmitDefaultValue=false)]
		public EntitySet<EmployeeAdditionalInformation> EmployeeAdditionalInformations
		{
			get
			{
				if ((this.serializing 
							&& (this._EmployeeAdditionalInformations.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._EmployeeAdditionalInformations;
			}
			set
			{
				this._EmployeeAdditionalInformations.Assign(value);
			}
		}
		
		[Association(Name="AdditionalInformation_AdditionalInformationData", Storage="_AdditionalInformation", ThisKey="AddonInfoId", OtherKey="AddonInfoId", IsForeignKey=true)]
		public AdditionalInformation AdditionalInformation
		{
			get
			{
				return this._AdditionalInformation.Entity;
			}
			set
			{
				AdditionalInformation previousValue = this._AdditionalInformation.Entity;
				if (((previousValue != value) 
							|| (this._AdditionalInformation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AdditionalInformation.Entity = null;
						previousValue.AdditionalInformationDatas.Remove(this);
					}
					this._AdditionalInformation.Entity = value;
					if ((value != null))
					{
						value.AdditionalInformationDatas.Add(this);
						this._AddonInfoId = value.AddonInfoId;
					}
					else
					{
						this._AddonInfoId = default(int);
					}
					this.SendPropertyChanged("AdditionalInformation");
				}
			}
		}
		
		[Association(Name="Company_AdditionalInformationData", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.AdditionalInformationDatas.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.AdditionalInformationDatas.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EmployeeAdditionalInformations(EmployeeAdditionalInformation entity)
		{
			this.SendPropertyChanging();
			entity.AdditionalInformationData = this;
		}
		
		private void detach_EmployeeAdditionalInformations(EmployeeAdditionalInformation entity)
		{
			this.SendPropertyChanging();
			entity.AdditionalInformationData = null;
		}
		
		private void Initialize()
		{
			this._EmployeeAdditionalInformations = new EntitySet<EmployeeAdditionalInformation>(new Action<EmployeeAdditionalInformation>(this.attach_EmployeeAdditionalInformations), new Action<EmployeeAdditionalInformation>(this.detach_EmployeeAdditionalInformations));
			this._AdditionalInformation = default(EntityRef<AdditionalInformation>);
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.Address")]
	[DataContract()]
	public partial class Address : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<int> _NeighborhoodId;
		
		private string _PostalCode;
		
		private string _Name;
		
		private string _SubName;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Contact> _Contacts;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Deposit> _Deposits;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<LegalEntityProfile> _LegalEntityProfiles;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Profile> _Profiles;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<PurchaseRequest> _PurchaseRequests;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Supplier> _Suppliers;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNeighborhoodIdChanging(System.Nullable<int> value);
    partial void OnNeighborhoodIdChanged();
    partial void OnPostalCodeChanging(string value);
    partial void OnPostalCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSubNameChanging(string value);
    partial void OnSubNameChanged();
    #endregion
		
		public Address()
		{
			this.Initialize();
		}
		
		[Column(Storage="_NeighborhoodId", DbType="Int")]
		[DataMember(Order=1)]
		public System.Nullable<int> NeighborhoodId
		{
			get
			{
				return this._NeighborhoodId;
			}
			set
			{
				if ((this._NeighborhoodId != value))
				{
					this.OnNeighborhoodIdChanging(value);
					this.SendPropertyChanging();
					this._NeighborhoodId = value;
					this.SendPropertyChanged("NeighborhoodId");
					this.OnNeighborhoodIdChanged();
				}
			}
		}
		
		[Column(Storage="_PostalCode", DbType="Char(8) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		[DataMember(Order=2)]
		public string PostalCode
		{
			get
			{
				return this._PostalCode;
			}
			set
			{
				if ((this._PostalCode != value))
				{
					this.OnPostalCodeChanging(value);
					this.SendPropertyChanging();
					this._PostalCode = value;
					this.SendPropertyChanged("PostalCode");
					this.OnPostalCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(255)")]
		[DataMember(Order=3)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_SubName", DbType="VarChar(255)")]
		[DataMember(Order=4)]
		public string SubName
		{
			get
			{
				return this._SubName;
			}
			set
			{
				if ((this._SubName != value))
				{
					this.OnSubNameChanging(value);
					this.SendPropertyChanging();
					this._SubName = value;
					this.SendPropertyChanged("SubName");
					this.OnSubNameChanged();
				}
			}
		}
		
		[Association(Name="Address_Contact", Storage="_Contacts", ThisKey="PostalCode", OtherKey="PostalCode")]
		[DataMember(Order=5, EmitDefaultValue=false)]
		public EntitySet<Contact> Contacts
		{
			get
			{
				if ((this.serializing 
							&& (this._Contacts.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Contacts;
			}
			set
			{
				this._Contacts.Assign(value);
			}
		}
		
		[Association(Name="Address_Deposit", Storage="_Deposits", ThisKey="PostalCode", OtherKey="PostalCode")]
		[DataMember(Order=6, EmitDefaultValue=false)]
		public EntitySet<Deposit> Deposits
		{
			get
			{
				if ((this.serializing 
							&& (this._Deposits.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Deposits;
			}
			set
			{
				this._Deposits.Assign(value);
			}
		}
		
		[Association(Name="Address_LegalEntityProfile", Storage="_LegalEntityProfiles", ThisKey="PostalCode", OtherKey="PostalCode")]
		[DataMember(Order=7, EmitDefaultValue=false)]
		public EntitySet<LegalEntityProfile> LegalEntityProfiles
		{
			get
			{
				if ((this.serializing 
							&& (this._LegalEntityProfiles.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._LegalEntityProfiles;
			}
			set
			{
				this._LegalEntityProfiles.Assign(value);
			}
		}
		
		[Association(Name="Address_Profile", Storage="_Profiles", ThisKey="PostalCode", OtherKey="PostalCode")]
		[DataMember(Order=8, EmitDefaultValue=false)]
		public EntitySet<Profile> Profiles
		{
			get
			{
				if ((this.serializing 
							&& (this._Profiles.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Profiles;
			}
			set
			{
				this._Profiles.Assign(value);
			}
		}
		
		[Association(Name="Address_PurchaseRequest", Storage="_PurchaseRequests", ThisKey="PostalCode", OtherKey="PostalCode")]
		[DataMember(Order=9, EmitDefaultValue=false)]
		public EntitySet<PurchaseRequest> PurchaseRequests
		{
			get
			{
				if ((this.serializing 
							&& (this._PurchaseRequests.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._PurchaseRequests;
			}
			set
			{
				this._PurchaseRequests.Assign(value);
			}
		}
		
		[Association(Name="Address_Supplier", Storage="_Suppliers", ThisKey="PostalCode", OtherKey="PostalCode")]
		[DataMember(Order=10, EmitDefaultValue=false)]
		public EntitySet<Supplier> Suppliers
		{
			get
			{
				if ((this.serializing 
							&& (this._Suppliers.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Suppliers;
			}
			set
			{
				this._Suppliers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Contacts(Contact entity)
		{
			this.SendPropertyChanging();
			entity.Address = this;
		}
		
		private void detach_Contacts(Contact entity)
		{
			this.SendPropertyChanging();
			entity.Address = null;
		}
		
		private void attach_Deposits(Deposit entity)
		{
			this.SendPropertyChanging();
			entity.Address = this;
		}
		
		private void detach_Deposits(Deposit entity)
		{
			this.SendPropertyChanging();
			entity.Address = null;
		}
		
		private void attach_LegalEntityProfiles(LegalEntityProfile entity)
		{
			this.SendPropertyChanging();
			entity.Address = this;
		}
		
		private void detach_LegalEntityProfiles(LegalEntityProfile entity)
		{
			this.SendPropertyChanging();
			entity.Address = null;
		}
		
		private void attach_Profiles(Profile entity)
		{
			this.SendPropertyChanging();
			entity.Address = this;
		}
		
		private void detach_Profiles(Profile entity)
		{
			this.SendPropertyChanging();
			entity.Address = null;
		}
		
		private void attach_PurchaseRequests(PurchaseRequest entity)
		{
			this.SendPropertyChanging();
			entity.Address = this;
		}
		
		private void detach_PurchaseRequests(PurchaseRequest entity)
		{
			this.SendPropertyChanging();
			entity.Address = null;
		}
		
		private void attach_Suppliers(Supplier entity)
		{
			this.SendPropertyChanging();
			entity.Address = this;
		}
		
		private void detach_Suppliers(Supplier entity)
		{
			this.SendPropertyChanging();
			entity.Address = null;
		}
		
		private void Initialize()
		{
			this._Contacts = new EntitySet<Contact>(new Action<Contact>(this.attach_Contacts), new Action<Contact>(this.detach_Contacts));
			this._Deposits = new EntitySet<Deposit>(new Action<Deposit>(this.attach_Deposits), new Action<Deposit>(this.detach_Deposits));
			this._LegalEntityProfiles = new EntitySet<LegalEntityProfile>(new Action<LegalEntityProfile>(this.attach_LegalEntityProfiles), new Action<LegalEntityProfile>(this.detach_LegalEntityProfiles));
			this._Profiles = new EntitySet<Profile>(new Action<Profile>(this.attach_Profiles), new Action<Profile>(this.detach_Profiles));
			this._PurchaseRequests = new EntitySet<PurchaseRequest>(new Action<PurchaseRequest>(this.attach_PurchaseRequests), new Action<PurchaseRequest>(this.detach_PurchaseRequests));
			this._Suppliers = new EntitySet<Supplier>(new Action<Supplier>(this.attach_Suppliers), new Action<Supplier>(this.detach_Suppliers));
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.Alert")]
	[DataContract()]
	public partial class Alert : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AlertId;
		
		private string _Description;
		
		private System.Nullable<System.DateTime> _ShowDate;
		
		private string _PageName;
		
		private System.Nullable<int> _SubjectId;
		
		private System.Nullable<int> _UserId;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAlertIdChanging(int value);
    partial void OnAlertIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnShowDateChanging(System.Nullable<System.DateTime> value);
    partial void OnShowDateChanged();
    partial void OnPageNameChanging(string value);
    partial void OnPageNameChanged();
    partial void OnSubjectIdChanging(System.Nullable<int> value);
    partial void OnSubjectIdChanged();
    partial void OnUserIdChanging(System.Nullable<int> value);
    partial void OnUserIdChanged();
    #endregion
		
		public Alert()
		{
			this.Initialize();
		}
		
		[Column(Storage="_AlertId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int AlertId
		{
			get
			{
				return this._AlertId;
			}
			set
			{
				if ((this._AlertId != value))
				{
					this.OnAlertIdChanging(value);
					this.SendPropertyChanging();
					this._AlertId = value;
					this.SendPropertyChanged("AlertId");
					this.OnAlertIdChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_ShowDate", DbType="DateTime")]
		[DataMember(Order=3)]
		public System.Nullable<System.DateTime> ShowDate
		{
			get
			{
				return this._ShowDate;
			}
			set
			{
				if ((this._ShowDate != value))
				{
					this.OnShowDateChanging(value);
					this.SendPropertyChanging();
					this._ShowDate = value;
					this.SendPropertyChanged("ShowDate");
					this.OnShowDateChanged();
				}
			}
		}
		
		[Column(Storage="_PageName", DbType="VarChar(50)")]
		[DataMember(Order=4)]
		public string PageName
		{
			get
			{
				return this._PageName;
			}
			set
			{
				if ((this._PageName != value))
				{
					this.OnPageNameChanging(value);
					this.SendPropertyChanging();
					this._PageName = value;
					this.SendPropertyChanged("PageName");
					this.OnPageNameChanged();
				}
			}
		}
		
		[Column(Storage="_SubjectId", DbType="Int")]
		[DataMember(Order=5)]
		public System.Nullable<int> SubjectId
		{
			get
			{
				return this._SubjectId;
			}
			set
			{
				if ((this._SubjectId != value))
				{
					this.OnSubjectIdChanging(value);
					this.SendPropertyChanging();
					this._SubjectId = value;
					this.SendPropertyChanged("SubjectId");
					this.OnSubjectIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="Int")]
		[DataMember(Order=6)]
		public System.Nullable<int> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Association(Name="User_Alert", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Alerts.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Alerts.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.Alienation")]
	[DataContract()]
	public partial class Alienation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AlienationId;
		
		private string _Name;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Employee> _Employees;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<StatusHistory> _StatusHistories;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAlienationIdChanging(int value);
    partial void OnAlienationIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Alienation()
		{
			this.Initialize();
		}
		
		[Column(Storage="_AlienationId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int AlienationId
		{
			get
			{
				return this._AlienationId;
			}
			set
			{
				if ((this._AlienationId != value))
				{
					this.OnAlienationIdChanging(value);
					this.SendPropertyChanging();
					this._AlienationId = value;
					this.SendPropertyChanged("AlienationId");
					this.OnAlienationIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="Alienation_Employee", Storage="_Employees", ThisKey="AlienationId", OtherKey="AlienationId")]
		[DataMember(Order=3, EmitDefaultValue=false)]
		public EntitySet<Employee> Employees
		{
			get
			{
				if ((this.serializing 
							&& (this._Employees.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		[Association(Name="Alienation_StatusHistory", Storage="_StatusHistories", ThisKey="AlienationId", OtherKey="AlienationId")]
		[DataMember(Order=4, EmitDefaultValue=false)]
		public EntitySet<StatusHistory> StatusHistories
		{
			get
			{
				if ((this.serializing 
							&& (this._StatusHistories.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._StatusHistories;
			}
			set
			{
				this._StatusHistories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Alienation = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Alienation = null;
		}
		
		private void attach_StatusHistories(StatusHistory entity)
		{
			this.SendPropertyChanging();
			entity.Alienation = this;
		}
		
		private void detach_StatusHistories(StatusHistory entity)
		{
			this.SendPropertyChanging();
			entity.Alienation = null;
		}
		
		private void Initialize()
		{
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			this._StatusHistories = new EntitySet<StatusHistory>(new Action<StatusHistory>(this.attach_StatusHistories), new Action<StatusHistory>(this.detach_StatusHistories));
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.Applications")]
	[DataContract()]
	public partial class Application : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ApplicationId;
		
		private string _Name;
		
		private string _Description;
		
		private bool _IsMaintenance;
		
		private bool _IsActive;
		
		private string _MaintenanceMessage;
		
		private System.Nullable<System.DateTime> _NextVersionDate;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Event> _Events;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Plan> _Plans;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Role> _Roles;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<SystemParameter> _SystemParameters;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(int value);
    partial void OnApplicationIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnIsMaintenanceChanging(bool value);
    partial void OnIsMaintenanceChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnMaintenanceMessageChanging(string value);
    partial void OnMaintenanceMessageChanged();
    partial void OnNextVersionDateChanging(System.Nullable<System.DateTime> value);
    partial void OnNextVersionDateChanged();
    #endregion
		
		public Application()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ApplicationId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(128) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(512)")]
		[DataMember(Order=3)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_IsMaintenance", DbType="Bit NOT NULL")]
		[DataMember(Order=4)]
		public bool IsMaintenance
		{
			get
			{
				return this._IsMaintenance;
			}
			set
			{
				if ((this._IsMaintenance != value))
				{
					this.OnIsMaintenanceChanging(value);
					this.SendPropertyChanging();
					this._IsMaintenance = value;
					this.SendPropertyChanged("IsMaintenance");
					this.OnIsMaintenanceChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit NOT NULL")]
		[DataMember(Order=5)]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[Column(Storage="_MaintenanceMessage", DbType="VarChar(1024)")]
		[DataMember(Order=6)]
		public string MaintenanceMessage
		{
			get
			{
				return this._MaintenanceMessage;
			}
			set
			{
				if ((this._MaintenanceMessage != value))
				{
					this.OnMaintenanceMessageChanging(value);
					this.SendPropertyChanging();
					this._MaintenanceMessage = value;
					this.SendPropertyChanged("MaintenanceMessage");
					this.OnMaintenanceMessageChanged();
				}
			}
		}
		
		[Column(Storage="_NextVersionDate", DbType="DateTime")]
		[DataMember(Order=7)]
		public System.Nullable<System.DateTime> NextVersionDate
		{
			get
			{
				return this._NextVersionDate;
			}
			set
			{
				if ((this._NextVersionDate != value))
				{
					this.OnNextVersionDateChanging(value);
					this.SendPropertyChanging();
					this._NextVersionDate = value;
					this.SendPropertyChanged("NextVersionDate");
					this.OnNextVersionDateChanged();
				}
			}
		}
		
		[Association(Name="Application_Event", Storage="_Events", ThisKey="ApplicationId", OtherKey="ApplicationId")]
		[DataMember(Order=8, EmitDefaultValue=false)]
		public EntitySet<Event> Events
		{
			get
			{
				if ((this.serializing 
							&& (this._Events.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Events;
			}
			set
			{
				this._Events.Assign(value);
			}
		}
		
		[Association(Name="Application_Plan", Storage="_Plans", ThisKey="ApplicationId", OtherKey="ApplicationId")]
		[DataMember(Order=9, EmitDefaultValue=false)]
		public EntitySet<Plan> Plans
		{
			get
			{
				if ((this.serializing 
							&& (this._Plans.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Plans;
			}
			set
			{
				this._Plans.Assign(value);
			}
		}
		
		[Association(Name="Application_Role", Storage="_Roles", ThisKey="ApplicationId", OtherKey="ApplicationId")]
		[DataMember(Order=10, EmitDefaultValue=false)]
		public EntitySet<Role> Roles
		{
			get
			{
				if ((this.serializing 
							&& (this._Roles.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Roles;
			}
			set
			{
				this._Roles.Assign(value);
			}
		}
		
		[Association(Name="Application_SystemParameter", Storage="_SystemParameters", ThisKey="ApplicationId", OtherKey="ApplicationId")]
		[DataMember(Order=11, EmitDefaultValue=false)]
		public EntitySet<SystemParameter> SystemParameters
		{
			get
			{
				if ((this.serializing 
							&& (this._SystemParameters.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._SystemParameters;
			}
			set
			{
				this._SystemParameters.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.Application = this;
		}
		
		private void detach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.Application = null;
		}
		
		private void attach_Plans(Plan entity)
		{
			this.SendPropertyChanging();
			entity.Application = this;
		}
		
		private void detach_Plans(Plan entity)
		{
			this.SendPropertyChanging();
			entity.Application = null;
		}
		
		private void attach_Roles(Role entity)
		{
			this.SendPropertyChanging();
			entity.Application = this;
		}
		
		private void detach_Roles(Role entity)
		{
			this.SendPropertyChanging();
			entity.Application = null;
		}
		
		private void attach_SystemParameters(SystemParameter entity)
		{
			this.SendPropertyChanging();
			entity.Application = this;
		}
		
		private void detach_SystemParameters(SystemParameter entity)
		{
			this.SendPropertyChanging();
			entity.Application = null;
		}
		
		private void Initialize()
		{
			this._Events = new EntitySet<Event>(new Action<Event>(this.attach_Events), new Action<Event>(this.detach_Events));
			this._Plans = new EntitySet<Plan>(new Action<Plan>(this.attach_Plans), new Action<Plan>(this.detach_Plans));
			this._Roles = new EntitySet<Role>(new Action<Role>(this.attach_Roles), new Action<Role>(this.detach_Roles));
			this._SystemParameters = new EntitySet<SystemParameter>(new Action<SystemParameter>(this.attach_SystemParameters), new Action<SystemParameter>(this.detach_SystemParameters));
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.Bank")]
	[DataContract()]
	public partial class Bank : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BankId;
		
		private string _Name;
		
		private string _BankNumber;
		
		private string _Site;
		
		private string _ShortName;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Account> _Accounts;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Check> _Checks;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Customer> _Customers;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Employee> _Employees;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Supplier> _Suppliers;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBankIdChanging(int value);
    partial void OnBankIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnBankNumberChanging(string value);
    partial void OnBankNumberChanged();
    partial void OnSiteChanging(string value);
    partial void OnSiteChanged();
    partial void OnShortNameChanging(string value);
    partial void OnShortNameChanged();
    #endregion
		
		public Bank()
		{
			this.Initialize();
		}
		
		[Column(Storage="_BankId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int BankId
		{
			get
			{
				return this._BankId;
			}
			set
			{
				if ((this._BankId != value))
				{
					this.OnBankIdChanging(value);
					this.SendPropertyChanging();
					this._BankId = value;
					this.SendPropertyChanged("BankId");
					this.OnBankIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(128) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_BankNumber", DbType="Char(3) NOT NULL", CanBeNull=false)]
		[DataMember(Order=3)]
		public string BankNumber
		{
			get
			{
				return this._BankNumber;
			}
			set
			{
				if ((this._BankNumber != value))
				{
					this.OnBankNumberChanging(value);
					this.SendPropertyChanging();
					this._BankNumber = value;
					this.SendPropertyChanged("BankNumber");
					this.OnBankNumberChanged();
				}
			}
		}
		
		[Column(Storage="_Site", DbType="VarChar(120)")]
		[DataMember(Order=4)]
		public string Site
		{
			get
			{
				return this._Site;
			}
			set
			{
				if ((this._Site != value))
				{
					this.OnSiteChanging(value);
					this.SendPropertyChanging();
					this._Site = value;
					this.SendPropertyChanged("Site");
					this.OnSiteChanged();
				}
			}
		}
		
		[Column(Storage="_ShortName", DbType="VarChar(20)")]
		[DataMember(Order=5)]
		public string ShortName
		{
			get
			{
				return this._ShortName;
			}
			set
			{
				if ((this._ShortName != value))
				{
					this.OnShortNameChanging(value);
					this.SendPropertyChanging();
					this._ShortName = value;
					this.SendPropertyChanged("ShortName");
					this.OnShortNameChanged();
				}
			}
		}
		
		[Association(Name="Bank_Account", Storage="_Accounts", ThisKey="BankId", OtherKey="BankId")]
		[DataMember(Order=6, EmitDefaultValue=false)]
		public EntitySet<Account> Accounts
		{
			get
			{
				if ((this.serializing 
							&& (this._Accounts.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Accounts;
			}
			set
			{
				this._Accounts.Assign(value);
			}
		}
		
		[Association(Name="Bank_Check", Storage="_Checks", ThisKey="BankId", OtherKey="BankId")]
		[DataMember(Order=7, EmitDefaultValue=false)]
		public EntitySet<Check> Checks
		{
			get
			{
				if ((this.serializing 
							&& (this._Checks.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Checks;
			}
			set
			{
				this._Checks.Assign(value);
			}
		}
		
		[Association(Name="Bank_Customer", Storage="_Customers", ThisKey="BankId", OtherKey="BankId")]
		[DataMember(Order=8, EmitDefaultValue=false)]
		public EntitySet<Customer> Customers
		{
			get
			{
				if ((this.serializing 
							&& (this._Customers.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Customers;
			}
			set
			{
				this._Customers.Assign(value);
			}
		}
		
		[Association(Name="Bank_Employee", Storage="_Employees", ThisKey="BankId", OtherKey="BankId")]
		[DataMember(Order=9, EmitDefaultValue=false)]
		public EntitySet<Employee> Employees
		{
			get
			{
				if ((this.serializing 
							&& (this._Employees.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		[Association(Name="Bank_Supplier", Storage="_Suppliers", ThisKey="BankId", OtherKey="BankId")]
		[DataMember(Order=10, EmitDefaultValue=false)]
		public EntitySet<Supplier> Suppliers
		{
			get
			{
				if ((this.serializing 
							&& (this._Suppliers.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Suppliers;
			}
			set
			{
				this._Suppliers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Bank = this;
		}
		
		private void detach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Bank = null;
		}
		
		private void attach_Checks(Check entity)
		{
			this.SendPropertyChanging();
			entity.Bank = this;
		}
		
		private void detach_Checks(Check entity)
		{
			this.SendPropertyChanging();
			entity.Bank = null;
		}
		
		private void attach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.Bank = this;
		}
		
		private void detach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.Bank = null;
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Bank = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Bank = null;
		}
		
		private void attach_Suppliers(Supplier entity)
		{
			this.SendPropertyChanging();
			entity.Bank = this;
		}
		
		private void detach_Suppliers(Supplier entity)
		{
			this.SendPropertyChanging();
			entity.Bank = null;
		}
		
		private void Initialize()
		{
			this._Accounts = new EntitySet<Account>(new Action<Account>(this.attach_Accounts), new Action<Account>(this.detach_Accounts));
			this._Checks = new EntitySet<Check>(new Action<Check>(this.attach_Checks), new Action<Check>(this.detach_Checks));
			this._Customers = new EntitySet<Customer>(new Action<Customer>(this.attach_Customers), new Action<Customer>(this.detach_Customers));
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			this._Suppliers = new EntitySet<Supplier>(new Action<Supplier>(this.attach_Suppliers), new Action<Supplier>(this.detach_Suppliers));
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.BarCodeType")]
	[DataContract()]
	public partial class BarCodeType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BarCodeTypeId;
		
		private string _BarCodeName;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Product> _Products;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBarCodeTypeIdChanging(int value);
    partial void OnBarCodeTypeIdChanged();
    partial void OnBarCodeNameChanging(string value);
    partial void OnBarCodeNameChanged();
    #endregion
		
		public BarCodeType()
		{
			this.Initialize();
		}
		
		[Column(Storage="_BarCodeTypeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int BarCodeTypeId
		{
			get
			{
				return this._BarCodeTypeId;
			}
			set
			{
				if ((this._BarCodeTypeId != value))
				{
					this.OnBarCodeTypeIdChanging(value);
					this.SendPropertyChanging();
					this._BarCodeTypeId = value;
					this.SendPropertyChanged("BarCodeTypeId");
					this.OnBarCodeTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_BarCodeName", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string BarCodeName
		{
			get
			{
				return this._BarCodeName;
			}
			set
			{
				if ((this._BarCodeName != value))
				{
					this.OnBarCodeNameChanging(value);
					this.SendPropertyChanging();
					this._BarCodeName = value;
					this.SendPropertyChanged("BarCodeName");
					this.OnBarCodeNameChanged();
				}
			}
		}
		
		[Association(Name="BarCodeType_Product", Storage="_Products", ThisKey="BarCodeTypeId", OtherKey="BarCodeTypeId")]
		[DataMember(Order=3, EmitDefaultValue=false)]
		public EntitySet<Product> Products
		{
			get
			{
				if ((this.serializing 
							&& (this._Products.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.BarCodeType = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.BarCodeType = null;
		}
		
		private void Initialize()
		{
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.Bill")]
	[DataContract()]
	public partial class Bill : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BillId;
		
		private int _DocumentType;
		
		private System.Nullable<int> _SupplierId;
		
		private string _DocumentNumber;
		
		private string _Description;
		
		private System.Nullable<System.DateTime> _EntryDate;
		
		private System.Nullable<int> _AccountingPlanId;
		
		private System.Nullable<int> _CostCenterId;
		
		private int _CompanyId;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private string _CreatedByUser;
		
		private string _ModifiedByUser;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Contract> _Contracts;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<ExpenditureAuthorization> _ExpenditureAuthorizations;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Parcel> _Parcels;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<PurchaseOrder> _PurchaseOrders;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Statement> _Statements;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<AccountingPlan> _AccountingPlan;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Company> _Company;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<CostCenter> _CostCenter;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Supplier> _Supplier;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBillIdChanging(int value);
    partial void OnBillIdChanged();
    partial void OnDocumentTypeChanging(int value);
    partial void OnDocumentTypeChanged();
    partial void OnSupplierIdChanging(System.Nullable<int> value);
    partial void OnSupplierIdChanged();
    partial void OnDocumentNumberChanging(string value);
    partial void OnDocumentNumberChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnEntryDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEntryDateChanged();
    partial void OnAccountingPlanIdChanging(System.Nullable<int> value);
    partial void OnAccountingPlanIdChanged();
    partial void OnCostCenterIdChanging(System.Nullable<int> value);
    partial void OnCostCenterIdChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    partial void OnCreatedByUserChanging(string value);
    partial void OnCreatedByUserChanged();
    partial void OnModifiedByUserChanging(string value);
    partial void OnModifiedByUserChanged();
    #endregion
		
		public Bill()
		{
			this.Initialize();
		}
		
		[Column(Storage="_BillId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int BillId
		{
			get
			{
				return this._BillId;
			}
			set
			{
				if ((this._BillId != value))
				{
					this.OnBillIdChanging(value);
					this.SendPropertyChanging();
					this._BillId = value;
					this.SendPropertyChanged("BillId");
					this.OnBillIdChanged();
				}
			}
		}
		
		[Column(Storage="_DocumentType", DbType="Int NOT NULL")]
		[DataMember(Order=2)]
		public int DocumentType
		{
			get
			{
				return this._DocumentType;
			}
			set
			{
				if ((this._DocumentType != value))
				{
					this.OnDocumentTypeChanging(value);
					this.SendPropertyChanging();
					this._DocumentType = value;
					this.SendPropertyChanged("DocumentType");
					this.OnDocumentTypeChanged();
				}
			}
		}
		
		[Column(Storage="_SupplierId", DbType="Int")]
		[DataMember(Order=3)]
		public System.Nullable<int> SupplierId
		{
			get
			{
				return this._SupplierId;
			}
			set
			{
				if ((this._SupplierId != value))
				{
					if (this._Supplier.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSupplierIdChanging(value);
					this.SendPropertyChanging();
					this._SupplierId = value;
					this.SendPropertyChanged("SupplierId");
					this.OnSupplierIdChanged();
				}
			}
		}
		
		[Column(Storage="_DocumentNumber", DbType="VarChar(50)")]
		[DataMember(Order=4)]
		public string DocumentNumber
		{
			get
			{
				return this._DocumentNumber;
			}
			set
			{
				if ((this._DocumentNumber != value))
				{
					this.OnDocumentNumberChanging(value);
					this.SendPropertyChanging();
					this._DocumentNumber = value;
					this.SendPropertyChanged("DocumentNumber");
					this.OnDocumentNumberChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(1024)")]
		[DataMember(Order=5)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_EntryDate", DbType="DateTime")]
		[DataMember(Order=6)]
		public System.Nullable<System.DateTime> EntryDate
		{
			get
			{
				return this._EntryDate;
			}
			set
			{
				if ((this._EntryDate != value))
				{
					this.OnEntryDateChanging(value);
					this.SendPropertyChanging();
					this._EntryDate = value;
					this.SendPropertyChanged("EntryDate");
					this.OnEntryDateChanged();
				}
			}
		}
		
		[Column(Storage="_AccountingPlanId", DbType="Int")]
		[DataMember(Order=7)]
		public System.Nullable<int> AccountingPlanId
		{
			get
			{
				return this._AccountingPlanId;
			}
			set
			{
				if ((this._AccountingPlanId != value))
				{
					if (this._AccountingPlan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountingPlanIdChanging(value);
					this.SendPropertyChanging();
					this._AccountingPlanId = value;
					this.SendPropertyChanged("AccountingPlanId");
					this.OnAccountingPlanIdChanged();
				}
			}
		}
		
		[Column(Storage="_CostCenterId", DbType="Int")]
		[DataMember(Order=8)]
		public System.Nullable<int> CostCenterId
		{
			get
			{
				return this._CostCenterId;
			}
			set
			{
				if ((this._CostCenterId != value))
				{
					if (this._CostCenter.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCostCenterIdChanging(value);
					this.SendPropertyChanging();
					this._CostCenterId = value;
					this.SendPropertyChanged("CostCenterId");
					this.OnCostCenterIdChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=9)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._AccountingPlan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime")]
		[DataMember(Order=10)]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime")]
		[DataMember(Order=11)]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedByUser", DbType="VarChar(50)")]
		[DataMember(Order=12)]
		public string CreatedByUser
		{
			get
			{
				return this._CreatedByUser;
			}
			set
			{
				if ((this._CreatedByUser != value))
				{
					this.OnCreatedByUserChanging(value);
					this.SendPropertyChanging();
					this._CreatedByUser = value;
					this.SendPropertyChanged("CreatedByUser");
					this.OnCreatedByUserChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedByUser", DbType="VarChar(50)")]
		[DataMember(Order=13)]
		public string ModifiedByUser
		{
			get
			{
				return this._ModifiedByUser;
			}
			set
			{
				if ((this._ModifiedByUser != value))
				{
					this.OnModifiedByUserChanging(value);
					this.SendPropertyChanging();
					this._ModifiedByUser = value;
					this.SendPropertyChanged("ModifiedByUser");
					this.OnModifiedByUserChanged();
				}
			}
		}
		
		[Association(Name="Bill_Contract", Storage="_Contracts", ThisKey="BillId,CompanyId", OtherKey="BillId,CompanyId")]
		[DataMember(Order=14, EmitDefaultValue=false)]
		public EntitySet<Contract> Contracts
		{
			get
			{
				if ((this.serializing 
							&& (this._Contracts.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Contracts;
			}
			set
			{
				this._Contracts.Assign(value);
			}
		}
		
		[Association(Name="Bill_ExpenditureAuthorization", Storage="_ExpenditureAuthorizations", ThisKey="BillId,CompanyId", OtherKey="BillId,CompanyId")]
		[DataMember(Order=15, EmitDefaultValue=false)]
		public EntitySet<ExpenditureAuthorization> ExpenditureAuthorizations
		{
			get
			{
				if ((this.serializing 
							&& (this._ExpenditureAuthorizations.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ExpenditureAuthorizations;
			}
			set
			{
				this._ExpenditureAuthorizations.Assign(value);
			}
		}
		
		[Association(Name="Bill_Parcel", Storage="_Parcels", ThisKey="BillId,CompanyId", OtherKey="BillId,CompanyId")]
		[DataMember(Order=16, EmitDefaultValue=false)]
		public EntitySet<Parcel> Parcels
		{
			get
			{
				if ((this.serializing 
							&& (this._Parcels.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Parcels;
			}
			set
			{
				this._Parcels.Assign(value);
			}
		}
		
		[Association(Name="Bill_PurchaseOrder", Storage="_PurchaseOrders", ThisKey="BillId,CompanyId", OtherKey="BillId,CompanyId")]
		[DataMember(Order=17, EmitDefaultValue=false)]
		public EntitySet<PurchaseOrder> PurchaseOrders
		{
			get
			{
				if ((this.serializing 
							&& (this._PurchaseOrders.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._PurchaseOrders;
			}
			set
			{
				this._PurchaseOrders.Assign(value);
			}
		}
		
		[Association(Name="Bill_Statement", Storage="_Statements", ThisKey="BillId,CompanyId", OtherKey="BillId,CompanyId")]
		[DataMember(Order=18, EmitDefaultValue=false)]
		public EntitySet<Statement> Statements
		{
			get
			{
				if ((this.serializing 
							&& (this._Statements.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Statements;
			}
			set
			{
				this._Statements.Assign(value);
			}
		}
		
		[Association(Name="AccountingPlan_Bill", Storage="_AccountingPlan", ThisKey="AccountingPlanId,CompanyId", OtherKey="AccountingPlanId,CompanyId", IsForeignKey=true)]
		public AccountingPlan AccountingPlan
		{
			get
			{
				return this._AccountingPlan.Entity;
			}
			set
			{
				AccountingPlan previousValue = this._AccountingPlan.Entity;
				if (((previousValue != value) 
							|| (this._AccountingPlan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccountingPlan.Entity = null;
						previousValue.Bills.Remove(this);
					}
					this._AccountingPlan.Entity = value;
					if ((value != null))
					{
						value.Bills.Add(this);
						this._AccountingPlanId = value.AccountingPlanId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._AccountingPlanId = default(Nullable<int>);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("AccountingPlan");
				}
			}
		}
		
		[Association(Name="Company_Bill", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Bills.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Bills.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[Association(Name="CostCenter_Bill", Storage="_CostCenter", ThisKey="CostCenterId,CompanyId", OtherKey="CostCenterId,CompanyId", IsForeignKey=true)]
		public CostCenter CostCenter
		{
			get
			{
				return this._CostCenter.Entity;
			}
			set
			{
				CostCenter previousValue = this._CostCenter.Entity;
				if (((previousValue != value) 
							|| (this._CostCenter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CostCenter.Entity = null;
						previousValue.Bills.Remove(this);
					}
					this._CostCenter.Entity = value;
					if ((value != null))
					{
						value.Bills.Add(this);
						this._CostCenterId = value.CostCenterId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CostCenterId = default(Nullable<int>);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("CostCenter");
				}
			}
		}
		
		[Association(Name="Supplier_Bill", Storage="_Supplier", ThisKey="SupplierId", OtherKey="SupplierId", IsForeignKey=true)]
		public Supplier Supplier
		{
			get
			{
				return this._Supplier.Entity;
			}
			set
			{
				Supplier previousValue = this._Supplier.Entity;
				if (((previousValue != value) 
							|| (this._Supplier.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Supplier.Entity = null;
						previousValue.Bills.Remove(this);
					}
					this._Supplier.Entity = value;
					if ((value != null))
					{
						value.Bills.Add(this);
						this._SupplierId = value.SupplierId;
					}
					else
					{
						this._SupplierId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Supplier");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Contracts(Contract entity)
		{
			this.SendPropertyChanging();
			entity.Bill = this;
		}
		
		private void detach_Contracts(Contract entity)
		{
			this.SendPropertyChanging();
			entity.Bill = null;
		}
		
		private void attach_ExpenditureAuthorizations(ExpenditureAuthorization entity)
		{
			this.SendPropertyChanging();
			entity.Bill = this;
		}
		
		private void detach_ExpenditureAuthorizations(ExpenditureAuthorization entity)
		{
			this.SendPropertyChanging();
			entity.Bill = null;
		}
		
		private void attach_Parcels(Parcel entity)
		{
			this.SendPropertyChanging();
			entity.Bill = this;
		}
		
		private void detach_Parcels(Parcel entity)
		{
			this.SendPropertyChanging();
			entity.Bill = null;
		}
		
		private void attach_PurchaseOrders(PurchaseOrder entity)
		{
			this.SendPropertyChanging();
			entity.Bill = this;
		}
		
		private void detach_PurchaseOrders(PurchaseOrder entity)
		{
			this.SendPropertyChanging();
			entity.Bill = null;
		}
		
		private void attach_Statements(Statement entity)
		{
			this.SendPropertyChanging();
			entity.Bill = this;
		}
		
		private void detach_Statements(Statement entity)
		{
			this.SendPropertyChanging();
			entity.Bill = null;
		}
		
		private void Initialize()
		{
			this._Contracts = new EntitySet<Contract>(new Action<Contract>(this.attach_Contracts), new Action<Contract>(this.detach_Contracts));
			this._ExpenditureAuthorizations = new EntitySet<ExpenditureAuthorization>(new Action<ExpenditureAuthorization>(this.attach_ExpenditureAuthorizations), new Action<ExpenditureAuthorization>(this.detach_ExpenditureAuthorizations));
			this._Parcels = new EntitySet<Parcel>(new Action<Parcel>(this.attach_Parcels), new Action<Parcel>(this.detach_Parcels));
			this._PurchaseOrders = new EntitySet<PurchaseOrder>(new Action<PurchaseOrder>(this.attach_PurchaseOrders), new Action<PurchaseOrder>(this.detach_PurchaseOrders));
			this._Statements = new EntitySet<Statement>(new Action<Statement>(this.attach_Statements), new Action<Statement>(this.detach_Statements));
			this._AccountingPlan = default(EntityRef<AccountingPlan>);
			this._Company = default(EntityRef<Company>);
			this._CostCenter = default(EntityRef<CostCenter>);
			this._Supplier = default(EntityRef<Supplier>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.Bond")]
	[DataContract()]
	public partial class Bond : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BondId;
		
		private string _Name;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Employee> _Employees;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBondIdChanging(int value);
    partial void OnBondIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Bond()
		{
			this.Initialize();
		}
		
		[Column(Storage="_BondId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int BondId
		{
			get
			{
				return this._BondId;
			}
			set
			{
				if ((this._BondId != value))
				{
					this.OnBondIdChanging(value);
					this.SendPropertyChanging();
					this._BondId = value;
					this.SendPropertyChanged("BondId");
					this.OnBondIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="Char(18) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="Bond_Employee", Storage="_Employees", ThisKey="BondId", OtherKey="BondId")]
		[DataMember(Order=3, EmitDefaultValue=false)]
		public EntitySet<Employee> Employees
		{
			get
			{
				if ((this.serializing 
							&& (this._Employees.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Bond = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Bond = null;
		}
		
		private void Initialize()
		{
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.Branch")]
	[DataContract()]
	public partial class Branch : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BranchId;
		
		private string _Name;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<BranchFunction> _BranchFunctions;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<LegalEntityProfile> _LegalEntityProfiles;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Plan> _Plans;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBranchIdChanging(int value);
    partial void OnBranchIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Branch()
		{
			this.Initialize();
		}
		
		[Column(Storage="_BranchId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int BranchId
		{
			get
			{
				return this._BranchId;
			}
			set
			{
				if ((this._BranchId != value))
				{
					this.OnBranchIdChanging(value);
					this.SendPropertyChanging();
					this._BranchId = value;
					this.SendPropertyChanged("BranchId");
					this.OnBranchIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(128) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="Branch_BranchFunction", Storage="_BranchFunctions", ThisKey="BranchId", OtherKey="BranchId")]
		[DataMember(Order=3, EmitDefaultValue=false)]
		public EntitySet<BranchFunction> BranchFunctions
		{
			get
			{
				if ((this.serializing 
							&& (this._BranchFunctions.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._BranchFunctions;
			}
			set
			{
				this._BranchFunctions.Assign(value);
			}
		}
		
		[Association(Name="Branch_LegalEntityProfile", Storage="_LegalEntityProfiles", ThisKey="BranchId", OtherKey="BranchId")]
		[DataMember(Order=4, EmitDefaultValue=false)]
		public EntitySet<LegalEntityProfile> LegalEntityProfiles
		{
			get
			{
				if ((this.serializing 
							&& (this._LegalEntityProfiles.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._LegalEntityProfiles;
			}
			set
			{
				this._LegalEntityProfiles.Assign(value);
			}
		}
		
		[Association(Name="Branch_Plan", Storage="_Plans", ThisKey="BranchId", OtherKey="BranchId")]
		[DataMember(Order=5, EmitDefaultValue=false)]
		public EntitySet<Plan> Plans
		{
			get
			{
				if ((this.serializing 
							&& (this._Plans.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Plans;
			}
			set
			{
				this._Plans.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BranchFunctions(BranchFunction entity)
		{
			this.SendPropertyChanging();
			entity.Branch = this;
		}
		
		private void detach_BranchFunctions(BranchFunction entity)
		{
			this.SendPropertyChanging();
			entity.Branch = null;
		}
		
		private void attach_LegalEntityProfiles(LegalEntityProfile entity)
		{
			this.SendPropertyChanging();
			entity.Branch = this;
		}
		
		private void detach_LegalEntityProfiles(LegalEntityProfile entity)
		{
			this.SendPropertyChanging();
			entity.Branch = null;
		}
		
		private void attach_Plans(Plan entity)
		{
			this.SendPropertyChanging();
			entity.Branch = this;
		}
		
		private void detach_Plans(Plan entity)
		{
			this.SendPropertyChanging();
			entity.Branch = null;
		}
		
		private void Initialize()
		{
			this._BranchFunctions = new EntitySet<BranchFunction>(new Action<BranchFunction>(this.attach_BranchFunctions), new Action<BranchFunction>(this.detach_BranchFunctions));
			this._LegalEntityProfiles = new EntitySet<LegalEntityProfile>(new Action<LegalEntityProfile>(this.attach_LegalEntityProfiles), new Action<LegalEntityProfile>(this.detach_LegalEntityProfiles));
			this._Plans = new EntitySet<Plan>(new Action<Plan>(this.attach_Plans), new Action<Plan>(this.detach_Plans));
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.BranchFunction")]
	[DataContract()]
	public partial class BranchFunction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BranchId;
		
		private int _FunctionId;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Branch> _Branch;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Function> _Function;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBranchIdChanging(int value);
    partial void OnBranchIdChanged();
    partial void OnFunctionIdChanging(int value);
    partial void OnFunctionIdChanged();
    #endregion
		
		public BranchFunction()
		{
			this.Initialize();
		}
		
		[Column(Storage="_BranchId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=1)]
		public int BranchId
		{
			get
			{
				return this._BranchId;
			}
			set
			{
				if ((this._BranchId != value))
				{
					if (this._Branch.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBranchIdChanging(value);
					this.SendPropertyChanging();
					this._BranchId = value;
					this.SendPropertyChanged("BranchId");
					this.OnBranchIdChanged();
				}
			}
		}
		
		[Column(Storage="_FunctionId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=2)]
		public int FunctionId
		{
			get
			{
				return this._FunctionId;
			}
			set
			{
				if ((this._FunctionId != value))
				{
					if (this._Function.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFunctionIdChanging(value);
					this.SendPropertyChanging();
					this._FunctionId = value;
					this.SendPropertyChanged("FunctionId");
					this.OnFunctionIdChanged();
				}
			}
		}
		
		[Association(Name="Branch_BranchFunction", Storage="_Branch", ThisKey="BranchId", OtherKey="BranchId", IsForeignKey=true)]
		public Branch Branch
		{
			get
			{
				return this._Branch.Entity;
			}
			set
			{
				Branch previousValue = this._Branch.Entity;
				if (((previousValue != value) 
							|| (this._Branch.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Branch.Entity = null;
						previousValue.BranchFunctions.Remove(this);
					}
					this._Branch.Entity = value;
					if ((value != null))
					{
						value.BranchFunctions.Add(this);
						this._BranchId = value.BranchId;
					}
					else
					{
						this._BranchId = default(int);
					}
					this.SendPropertyChanged("Branch");
				}
			}
		}
		
		[Association(Name="Function_BranchFunction", Storage="_Function", ThisKey="FunctionId", OtherKey="FunctionId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Function Function
		{
			get
			{
				return this._Function.Entity;
			}
			set
			{
				Function previousValue = this._Function.Entity;
				if (((previousValue != value) 
							|| (this._Function.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Function.Entity = null;
						previousValue.BranchFunctions.Remove(this);
					}
					this._Function.Entity = value;
					if ((value != null))
					{
						value.BranchFunctions.Add(this);
						this._FunctionId = value.FunctionId;
					}
					else
					{
						this._FunctionId = default(int);
					}
					this.SendPropertyChanged("Function");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Branch = default(EntityRef<Branch>);
			this._Function = default(EntityRef<Function>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.Budget")]
	[DataContract()]
	public partial class Budget : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BudgetId;
		
		private System.DateTime _ModifiedDate;
		
		private System.Nullable<int> _CustomerId;
		
		private System.Nullable<int> _VendorId;
		
		private string _BudgetCode;
		
		private System.Nullable<decimal> _Discount;
		
		private string _ContactName;
		
		private System.DateTime _CreatedDate;
		
		private string _Warranty;
		
		private string _Observation;
		
		private string _Cover;
		
		private string _Summary;
		
		private System.Nullable<int> _ExpirationDate;
		
		private string _PaymentMethod;
		
		private System.Nullable<decimal> _AdditionalCost;
		
		private System.Nullable<decimal> _IPI;
		
		private string _DeliveryDate;
		
		private string _DeliveryDescription;
		
		private System.Nullable<int> _DiscountType;
		
		private string _CustomerName;
		
		private string _CustomerMail;
		
		private string _RelatedFile;
		
		private System.Nullable<int> _BudgetStatusId;
		
		private int _CompanyId;
		
		private string _CustomerPhone;
		
		private string _Treatment;
		
		private string _CreatedByUser;
		
		private string _ModifiedByUser;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<BudgetItem> _BudgetItems;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Sale> _Sales;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<ServiceOrder> _ServiceOrders;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<BudgetStatus> _BudgetStatus;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Company> _Company;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Customer> _Customer;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Employee> _Employee;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBudgetIdChanging(int value);
    partial void OnBudgetIdChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnCustomerIdChanging(System.Nullable<int> value);
    partial void OnCustomerIdChanged();
    partial void OnVendorIdChanging(System.Nullable<int> value);
    partial void OnVendorIdChanged();
    partial void OnBudgetCodeChanging(string value);
    partial void OnBudgetCodeChanged();
    partial void OnDiscountChanging(System.Nullable<decimal> value);
    partial void OnDiscountChanged();
    partial void OnContactNameChanging(string value);
    partial void OnContactNameChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnWarrantyChanging(string value);
    partial void OnWarrantyChanged();
    partial void OnObservationChanging(string value);
    partial void OnObservationChanged();
    partial void OnCoverChanging(string value);
    partial void OnCoverChanged();
    partial void OnSummaryChanging(string value);
    partial void OnSummaryChanged();
    partial void OnExpirationDateChanging(System.Nullable<int> value);
    partial void OnExpirationDateChanged();
    partial void OnPaymentMethodChanging(string value);
    partial void OnPaymentMethodChanged();
    partial void OnAdditionalCostChanging(System.Nullable<decimal> value);
    partial void OnAdditionalCostChanged();
    partial void OnIPIChanging(System.Nullable<decimal> value);
    partial void OnIPIChanged();
    partial void OnDeliveryDateChanging(string value);
    partial void OnDeliveryDateChanged();
    partial void OnDeliveryDescriptionChanging(string value);
    partial void OnDeliveryDescriptionChanged();
    partial void OnDiscountTypeChanging(System.Nullable<int> value);
    partial void OnDiscountTypeChanged();
    partial void OnCustomerNameChanging(string value);
    partial void OnCustomerNameChanged();
    partial void OnCustomerMailChanging(string value);
    partial void OnCustomerMailChanged();
    partial void OnRelatedFileChanging(string value);
    partial void OnRelatedFileChanged();
    partial void OnBudgetStatusIdChanging(System.Nullable<int> value);
    partial void OnBudgetStatusIdChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnCustomerPhoneChanging(string value);
    partial void OnCustomerPhoneChanged();
    partial void OnTreatmentChanging(string value);
    partial void OnTreatmentChanged();
    partial void OnCreatedByUserChanging(string value);
    partial void OnCreatedByUserChanged();
    partial void OnModifiedByUserChanging(string value);
    partial void OnModifiedByUserChanged();
    #endregion
		
		public Budget()
		{
			this.Initialize();
		}
		
		[Column(Storage="_BudgetId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int BudgetId
		{
			get
			{
				return this._BudgetId;
			}
			set
			{
				if ((this._BudgetId != value))
				{
					this.OnBudgetIdChanging(value);
					this.SendPropertyChanging();
					this._BudgetId = value;
					this.SendPropertyChanged("BudgetId");
					this.OnBudgetIdChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		[DataMember(Order=2)]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_CustomerId", DbType="Int")]
		[DataMember(Order=3)]
		public System.Nullable<int> CustomerId
		{
			get
			{
				return this._CustomerId;
			}
			set
			{
				if ((this._CustomerId != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerId = value;
					this.SendPropertyChanged("CustomerId");
					this.OnCustomerIdChanged();
				}
			}
		}
		
		[Column(Storage="_VendorId", DbType="Int")]
		[DataMember(Order=4)]
		public System.Nullable<int> VendorId
		{
			get
			{
				return this._VendorId;
			}
			set
			{
				if ((this._VendorId != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVendorIdChanging(value);
					this.SendPropertyChanging();
					this._VendorId = value;
					this.SendPropertyChanged("VendorId");
					this.OnVendorIdChanged();
				}
			}
		}
		
		[Column(Storage="_BudgetCode", DbType="VarChar(20)")]
		[DataMember(Order=5)]
		public string BudgetCode
		{
			get
			{
				return this._BudgetCode;
			}
			set
			{
				if ((this._BudgetCode != value))
				{
					this.OnBudgetCodeChanging(value);
					this.SendPropertyChanging();
					this._BudgetCode = value;
					this.SendPropertyChanged("BudgetCode");
					this.OnBudgetCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Discount", DbType="Decimal(8,2)")]
		[DataMember(Order=6)]
		public System.Nullable<decimal> Discount
		{
			get
			{
				return this._Discount;
			}
			set
			{
				if ((this._Discount != value))
				{
					this.OnDiscountChanging(value);
					this.SendPropertyChanging();
					this._Discount = value;
					this.SendPropertyChanged("Discount");
					this.OnDiscountChanged();
				}
			}
		}
		
		[Column(Storage="_ContactName", DbType="VarChar(50)")]
		[DataMember(Order=7)]
		public string ContactName
		{
			get
			{
				return this._ContactName;
			}
			set
			{
				if ((this._ContactName != value))
				{
					this.OnContactNameChanging(value);
					this.SendPropertyChanging();
					this._ContactName = value;
					this.SendPropertyChanged("ContactName");
					this.OnContactNameChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		[DataMember(Order=8)]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_Warranty", DbType="VarChar(128)")]
		[DataMember(Order=9)]
		public string Warranty
		{
			get
			{
				return this._Warranty;
			}
			set
			{
				if ((this._Warranty != value))
				{
					this.OnWarrantyChanging(value);
					this.SendPropertyChanging();
					this._Warranty = value;
					this.SendPropertyChanged("Warranty");
					this.OnWarrantyChanged();
				}
			}
		}
		
		[Column(Storage="_Observation", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=10)]
		public string Observation
		{
			get
			{
				return this._Observation;
			}
			set
			{
				if ((this._Observation != value))
				{
					this.OnObservationChanging(value);
					this.SendPropertyChanging();
					this._Observation = value;
					this.SendPropertyChanged("Observation");
					this.OnObservationChanged();
				}
			}
		}
		
		[Column(Storage="_Cover", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=11)]
		public string Cover
		{
			get
			{
				return this._Cover;
			}
			set
			{
				if ((this._Cover != value))
				{
					this.OnCoverChanging(value);
					this.SendPropertyChanging();
					this._Cover = value;
					this.SendPropertyChanged("Cover");
					this.OnCoverChanged();
				}
			}
		}
		
		[Column(Storage="_Summary", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=12)]
		public string Summary
		{
			get
			{
				return this._Summary;
			}
			set
			{
				if ((this._Summary != value))
				{
					this.OnSummaryChanging(value);
					this.SendPropertyChanging();
					this._Summary = value;
					this.SendPropertyChanged("Summary");
					this.OnSummaryChanged();
				}
			}
		}
		
		[Column(Storage="_ExpirationDate", DbType="Int")]
		[DataMember(Order=13)]
		public System.Nullable<int> ExpirationDate
		{
			get
			{
				return this._ExpirationDate;
			}
			set
			{
				if ((this._ExpirationDate != value))
				{
					this.OnExpirationDateChanging(value);
					this.SendPropertyChanging();
					this._ExpirationDate = value;
					this.SendPropertyChanged("ExpirationDate");
					this.OnExpirationDateChanged();
				}
			}
		}
		
		[Column(Storage="_PaymentMethod", DbType="VarChar(50)")]
		[DataMember(Order=14)]
		public string PaymentMethod
		{
			get
			{
				return this._PaymentMethod;
			}
			set
			{
				if ((this._PaymentMethod != value))
				{
					this.OnPaymentMethodChanging(value);
					this.SendPropertyChanging();
					this._PaymentMethod = value;
					this.SendPropertyChanged("PaymentMethod");
					this.OnPaymentMethodChanged();
				}
			}
		}
		
		[Column(Storage="_AdditionalCost", DbType="Decimal(18,2)")]
		[DataMember(Order=15)]
		public System.Nullable<decimal> AdditionalCost
		{
			get
			{
				return this._AdditionalCost;
			}
			set
			{
				if ((this._AdditionalCost != value))
				{
					this.OnAdditionalCostChanging(value);
					this.SendPropertyChanging();
					this._AdditionalCost = value;
					this.SendPropertyChanged("AdditionalCost");
					this.OnAdditionalCostChanged();
				}
			}
		}
		
		[Column(Storage="_IPI", DbType="Decimal(18,2)")]
		[DataMember(Order=16)]
		public System.Nullable<decimal> IPI
		{
			get
			{
				return this._IPI;
			}
			set
			{
				if ((this._IPI != value))
				{
					this.OnIPIChanging(value);
					this.SendPropertyChanging();
					this._IPI = value;
					this.SendPropertyChanged("IPI");
					this.OnIPIChanged();
				}
			}
		}
		
		[Column(Storage="_DeliveryDate", DbType="VarChar(128)")]
		[DataMember(Order=17)]
		public string DeliveryDate
		{
			get
			{
				return this._DeliveryDate;
			}
			set
			{
				if ((this._DeliveryDate != value))
				{
					this.OnDeliveryDateChanging(value);
					this.SendPropertyChanging();
					this._DeliveryDate = value;
					this.SendPropertyChanged("DeliveryDate");
					this.OnDeliveryDateChanged();
				}
			}
		}
		
		[Column(Storage="_DeliveryDescription", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=18)]
		public string DeliveryDescription
		{
			get
			{
				return this._DeliveryDescription;
			}
			set
			{
				if ((this._DeliveryDescription != value))
				{
					this.OnDeliveryDescriptionChanging(value);
					this.SendPropertyChanging();
					this._DeliveryDescription = value;
					this.SendPropertyChanged("DeliveryDescription");
					this.OnDeliveryDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_DiscountType", DbType="Int")]
		[DataMember(Order=19)]
		public System.Nullable<int> DiscountType
		{
			get
			{
				return this._DiscountType;
			}
			set
			{
				if ((this._DiscountType != value))
				{
					this.OnDiscountTypeChanging(value);
					this.SendPropertyChanging();
					this._DiscountType = value;
					this.SendPropertyChanged("DiscountType");
					this.OnDiscountTypeChanged();
				}
			}
		}
		
		[Column(Storage="_CustomerName", DbType="VarChar(200)")]
		[DataMember(Order=20)]
		public string CustomerName
		{
			get
			{
				return this._CustomerName;
			}
			set
			{
				if ((this._CustomerName != value))
				{
					this.OnCustomerNameChanging(value);
					this.SendPropertyChanging();
					this._CustomerName = value;
					this.SendPropertyChanged("CustomerName");
					this.OnCustomerNameChanged();
				}
			}
		}
		
		[Column(Storage="_CustomerMail", DbType="VarChar(200)")]
		[DataMember(Order=21)]
		public string CustomerMail
		{
			get
			{
				return this._CustomerMail;
			}
			set
			{
				if ((this._CustomerMail != value))
				{
					this.OnCustomerMailChanging(value);
					this.SendPropertyChanging();
					this._CustomerMail = value;
					this.SendPropertyChanged("CustomerMail");
					this.OnCustomerMailChanged();
				}
			}
		}
		
		[Column(Storage="_RelatedFile", DbType="VarChar(200)")]
		[DataMember(Order=22)]
		public string RelatedFile
		{
			get
			{
				return this._RelatedFile;
			}
			set
			{
				if ((this._RelatedFile != value))
				{
					this.OnRelatedFileChanging(value);
					this.SendPropertyChanging();
					this._RelatedFile = value;
					this.SendPropertyChanged("RelatedFile");
					this.OnRelatedFileChanged();
				}
			}
		}
		
		[Column(Storage="_BudgetStatusId", DbType="Int")]
		[DataMember(Order=23)]
		public System.Nullable<int> BudgetStatusId
		{
			get
			{
				return this._BudgetStatusId;
			}
			set
			{
				if ((this._BudgetStatusId != value))
				{
					if (this._BudgetStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBudgetStatusIdChanging(value);
					this.SendPropertyChanging();
					this._BudgetStatusId = value;
					this.SendPropertyChanged("BudgetStatusId");
					this.OnBudgetStatusIdChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL")]
		[DataMember(Order=24)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Column(Storage="_CustomerPhone", DbType="VarChar(50)")]
		[DataMember(Order=25)]
		public string CustomerPhone
		{
			get
			{
				return this._CustomerPhone;
			}
			set
			{
				if ((this._CustomerPhone != value))
				{
					this.OnCustomerPhoneChanging(value);
					this.SendPropertyChanging();
					this._CustomerPhone = value;
					this.SendPropertyChanged("CustomerPhone");
					this.OnCustomerPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_Treatment", DbType="VarChar(1024)")]
		[DataMember(Order=26)]
		public string Treatment
		{
			get
			{
				return this._Treatment;
			}
			set
			{
				if ((this._Treatment != value))
				{
					this.OnTreatmentChanging(value);
					this.SendPropertyChanging();
					this._Treatment = value;
					this.SendPropertyChanged("Treatment");
					this.OnTreatmentChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedByUser", DbType="VarChar(50)")]
		[DataMember(Order=27)]
		public string CreatedByUser
		{
			get
			{
				return this._CreatedByUser;
			}
			set
			{
				if ((this._CreatedByUser != value))
				{
					this.OnCreatedByUserChanging(value);
					this.SendPropertyChanging();
					this._CreatedByUser = value;
					this.SendPropertyChanged("CreatedByUser");
					this.OnCreatedByUserChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedByUser", DbType="VarChar(50)")]
		[DataMember(Order=28)]
		public string ModifiedByUser
		{
			get
			{
				return this._ModifiedByUser;
			}
			set
			{
				if ((this._ModifiedByUser != value))
				{
					this.OnModifiedByUserChanging(value);
					this.SendPropertyChanging();
					this._ModifiedByUser = value;
					this.SendPropertyChanged("ModifiedByUser");
					this.OnModifiedByUserChanged();
				}
			}
		}
		
		[Association(Name="Budget_BudgetItem", Storage="_BudgetItems", ThisKey="BudgetId", OtherKey="BudgetId")]
		[DataMember(Order=29, EmitDefaultValue=false)]
		public EntitySet<BudgetItem> BudgetItems
		{
			get
			{
				if ((this.serializing 
							&& (this._BudgetItems.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._BudgetItems;
			}
			set
			{
				this._BudgetItems.Assign(value);
			}
		}
		
		[Association(Name="Budget_Sale", Storage="_Sales", ThisKey="BudgetId", OtherKey="BudgetId")]
		[DataMember(Order=30, EmitDefaultValue=false)]
		public EntitySet<Sale> Sales
		{
			get
			{
				if ((this.serializing 
							&& (this._Sales.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Sales;
			}
			set
			{
				this._Sales.Assign(value);
			}
		}
		
		[Association(Name="Budget_ServiceOrder", Storage="_ServiceOrders", ThisKey="BudgetId", OtherKey="BudgetId")]
		[DataMember(Order=31, EmitDefaultValue=false)]
		public EntitySet<ServiceOrder> ServiceOrders
		{
			get
			{
				if ((this.serializing 
							&& (this._ServiceOrders.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ServiceOrders;
			}
			set
			{
				this._ServiceOrders.Assign(value);
			}
		}
		
		[Association(Name="BudgetStatus_Budget", Storage="_BudgetStatus", ThisKey="BudgetStatusId", OtherKey="BudgetStatusId", IsForeignKey=true)]
		public BudgetStatus BudgetStatus
		{
			get
			{
				return this._BudgetStatus.Entity;
			}
			set
			{
				BudgetStatus previousValue = this._BudgetStatus.Entity;
				if (((previousValue != value) 
							|| (this._BudgetStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BudgetStatus.Entity = null;
						previousValue.Budgets.Remove(this);
					}
					this._BudgetStatus.Entity = value;
					if ((value != null))
					{
						value.Budgets.Add(this);
						this._BudgetStatusId = value.BudgetStatusId;
					}
					else
					{
						this._BudgetStatusId = default(Nullable<int>);
					}
					this.SendPropertyChanged("BudgetStatus");
				}
			}
		}
		
		[Association(Name="Company_Budget", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Budgets.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Budgets.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[Association(Name="Customer_Budget", Storage="_Customer", ThisKey="CustomerId", OtherKey="CustomerId", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Budgets.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Budgets.Add(this);
						this._CustomerId = value.CustomerId;
					}
					else
					{
						this._CustomerId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[Association(Name="Employee_Budget", Storage="_Employee", ThisKey="VendorId,CompanyId", OtherKey="EmployeeId,CompanyId", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Budgets.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Budgets.Add(this);
						this._VendorId = value.EmployeeId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._VendorId = default(Nullable<int>);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BudgetItems(BudgetItem entity)
		{
			this.SendPropertyChanging();
			entity.Budget = this;
		}
		
		private void detach_BudgetItems(BudgetItem entity)
		{
			this.SendPropertyChanging();
			entity.Budget = null;
		}
		
		private void attach_Sales(Sale entity)
		{
			this.SendPropertyChanging();
			entity.Budget = this;
		}
		
		private void detach_Sales(Sale entity)
		{
			this.SendPropertyChanging();
			entity.Budget = null;
		}
		
		private void attach_ServiceOrders(ServiceOrder entity)
		{
			this.SendPropertyChanging();
			entity.Budget = this;
		}
		
		private void detach_ServiceOrders(ServiceOrder entity)
		{
			this.SendPropertyChanging();
			entity.Budget = null;
		}
		
		private void Initialize()
		{
			this._BudgetItems = new EntitySet<BudgetItem>(new Action<BudgetItem>(this.attach_BudgetItems), new Action<BudgetItem>(this.detach_BudgetItems));
			this._Sales = new EntitySet<Sale>(new Action<Sale>(this.attach_Sales), new Action<Sale>(this.detach_Sales));
			this._ServiceOrders = new EntitySet<ServiceOrder>(new Action<ServiceOrder>(this.attach_ServiceOrders), new Action<ServiceOrder>(this.detach_ServiceOrders));
			this._BudgetStatus = default(EntityRef<BudgetStatus>);
			this._Company = default(EntityRef<Company>);
			this._Customer = default(EntityRef<Customer>);
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.BudgetItem")]
	[DataContract()]
	public partial class BudgetItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BudgetItemId;
		
		private int _BudgetId;
		
		private System.Nullable<int> _ProductId;
		
		private System.Nullable<decimal> _UnitCost;
		
		private System.Nullable<decimal> _UnitPrice;
		
		private int _Quantity;
		
		private string _SpecialProductName;
		
		private string _Observation;
		
		private string _ProductDescription;
		
		private string _Sector;
		
		private System.DateTime _ModifiedDate;
		
		private string _ProductCode;
		
		private string _Reference;
		
		private System.Nullable<int> _ServiceId;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Budget> _Budget;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Product> _Product;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Service> _Service;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBudgetItemIdChanging(int value);
    partial void OnBudgetItemIdChanged();
    partial void OnBudgetIdChanging(int value);
    partial void OnBudgetIdChanged();
    partial void OnProductIdChanging(System.Nullable<int> value);
    partial void OnProductIdChanged();
    partial void OnUnitCostChanging(System.Nullable<decimal> value);
    partial void OnUnitCostChanged();
    partial void OnUnitPriceChanging(System.Nullable<decimal> value);
    partial void OnUnitPriceChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnSpecialProductNameChanging(string value);
    partial void OnSpecialProductNameChanged();
    partial void OnObservationChanging(string value);
    partial void OnObservationChanged();
    partial void OnProductDescriptionChanging(string value);
    partial void OnProductDescriptionChanged();
    partial void OnSectorChanging(string value);
    partial void OnSectorChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnProductCodeChanging(string value);
    partial void OnProductCodeChanged();
    partial void OnReferenceChanging(string value);
    partial void OnReferenceChanged();
    partial void OnServiceIdChanging(System.Nullable<int> value);
    partial void OnServiceIdChanged();
    #endregion
		
		public BudgetItem()
		{
			this.Initialize();
		}
		
		[Column(Storage="_BudgetItemId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int BudgetItemId
		{
			get
			{
				return this._BudgetItemId;
			}
			set
			{
				if ((this._BudgetItemId != value))
				{
					this.OnBudgetItemIdChanging(value);
					this.SendPropertyChanging();
					this._BudgetItemId = value;
					this.SendPropertyChanged("BudgetItemId");
					this.OnBudgetItemIdChanged();
				}
			}
		}
		
		[Column(Storage="_BudgetId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=2)]
		public int BudgetId
		{
			get
			{
				return this._BudgetId;
			}
			set
			{
				if ((this._BudgetId != value))
				{
					if (this._Budget.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBudgetIdChanging(value);
					this.SendPropertyChanging();
					this._BudgetId = value;
					this.SendPropertyChanged("BudgetId");
					this.OnBudgetIdChanged();
				}
			}
		}
		
		[Column(Storage="_ProductId", DbType="Int")]
		[DataMember(Order=3)]
		public System.Nullable<int> ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[Column(Storage="_UnitCost", DbType="Decimal(18,2)")]
		[DataMember(Order=4)]
		public System.Nullable<decimal> UnitCost
		{
			get
			{
				return this._UnitCost;
			}
			set
			{
				if ((this._UnitCost != value))
				{
					this.OnUnitCostChanging(value);
					this.SendPropertyChanging();
					this._UnitCost = value;
					this.SendPropertyChanged("UnitCost");
					this.OnUnitCostChanged();
				}
			}
		}
		
		[Column(Storage="_UnitPrice", DbType="Decimal(18,2)")]
		[DataMember(Order=5)]
		public System.Nullable<decimal> UnitPrice
		{
			get
			{
				return this._UnitPrice;
			}
			set
			{
				if ((this._UnitPrice != value))
				{
					this.OnUnitPriceChanging(value);
					this.SendPropertyChanging();
					this._UnitPrice = value;
					this.SendPropertyChanged("UnitPrice");
					this.OnUnitPriceChanged();
				}
			}
		}
		
		[Column(Storage="_Quantity", DbType="Int NOT NULL")]
		[DataMember(Order=6)]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_SpecialProductName", DbType="VarChar(64)")]
		[DataMember(Order=7)]
		public string SpecialProductName
		{
			get
			{
				return this._SpecialProductName;
			}
			set
			{
				if ((this._SpecialProductName != value))
				{
					this.OnSpecialProductNameChanging(value);
					this.SendPropertyChanging();
					this._SpecialProductName = value;
					this.SendPropertyChanged("SpecialProductName");
					this.OnSpecialProductNameChanged();
				}
			}
		}
		
		[Column(Storage="_Observation", DbType="VarChar(200)")]
		[DataMember(Order=8)]
		public string Observation
		{
			get
			{
				return this._Observation;
			}
			set
			{
				if ((this._Observation != value))
				{
					this.OnObservationChanging(value);
					this.SendPropertyChanging();
					this._Observation = value;
					this.SendPropertyChanged("Observation");
					this.OnObservationChanged();
				}
			}
		}
		
		[Column(Storage="_ProductDescription", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=9)]
		public string ProductDescription
		{
			get
			{
				return this._ProductDescription;
			}
			set
			{
				if ((this._ProductDescription != value))
				{
					this.OnProductDescriptionChanging(value);
					this.SendPropertyChanging();
					this._ProductDescription = value;
					this.SendPropertyChanged("ProductDescription");
					this.OnProductDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_Sector", DbType="Char(18)")]
		[DataMember(Order=10)]
		public string Sector
		{
			get
			{
				return this._Sector;
			}
			set
			{
				if ((this._Sector != value))
				{
					this.OnSectorChanging(value);
					this.SendPropertyChanging();
					this._Sector = value;
					this.SendPropertyChanged("Sector");
					this.OnSectorChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		[DataMember(Order=11)]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_ProductCode", DbType="VarChar(128)")]
		[DataMember(Order=12)]
		public string ProductCode
		{
			get
			{
				return this._ProductCode;
			}
			set
			{
				if ((this._ProductCode != value))
				{
					this.OnProductCodeChanging(value);
					this.SendPropertyChanging();
					this._ProductCode = value;
					this.SendPropertyChanged("ProductCode");
					this.OnProductCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Reference", DbType="VarChar(50)")]
		[DataMember(Order=13)]
		public string Reference
		{
			get
			{
				return this._Reference;
			}
			set
			{
				if ((this._Reference != value))
				{
					this.OnReferenceChanging(value);
					this.SendPropertyChanging();
					this._Reference = value;
					this.SendPropertyChanged("Reference");
					this.OnReferenceChanged();
				}
			}
		}
		
		[Column(Storage="_ServiceId", DbType="Int")]
		[DataMember(Order=14)]
		public System.Nullable<int> ServiceId
		{
			get
			{
				return this._ServiceId;
			}
			set
			{
				if ((this._ServiceId != value))
				{
					if (this._Service.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceIdChanging(value);
					this.SendPropertyChanging();
					this._ServiceId = value;
					this.SendPropertyChanged("ServiceId");
					this.OnServiceIdChanged();
				}
			}
		}
		
		[Association(Name="Budget_BudgetItem", Storage="_Budget", ThisKey="BudgetId", OtherKey="BudgetId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Budget Budget
		{
			get
			{
				return this._Budget.Entity;
			}
			set
			{
				Budget previousValue = this._Budget.Entity;
				if (((previousValue != value) 
							|| (this._Budget.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Budget.Entity = null;
						previousValue.BudgetItems.Remove(this);
					}
					this._Budget.Entity = value;
					if ((value != null))
					{
						value.BudgetItems.Add(this);
						this._BudgetId = value.BudgetId;
					}
					else
					{
						this._BudgetId = default(int);
					}
					this.SendPropertyChanged("Budget");
				}
			}
		}
		
		[Association(Name="Product_BudgetItem", Storage="_Product", ThisKey="ProductId", OtherKey="ProductId", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.BudgetItems.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.BudgetItems.Add(this);
						this._ProductId = value.ProductId;
					}
					else
					{
						this._ProductId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		[Association(Name="Service_BudgetItem", Storage="_Service", ThisKey="ServiceId", OtherKey="ServiceId", IsForeignKey=true)]
		public Service Service
		{
			get
			{
				return this._Service.Entity;
			}
			set
			{
				Service previousValue = this._Service.Entity;
				if (((previousValue != value) 
							|| (this._Service.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Service.Entity = null;
						previousValue.BudgetItems.Remove(this);
					}
					this._Service.Entity = value;
					if ((value != null))
					{
						value.BudgetItems.Add(this);
						this._ServiceId = value.ServiceId;
					}
					else
					{
						this._ServiceId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Service");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Budget = default(EntityRef<Budget>);
			this._Product = default(EntityRef<Product>);
			this._Service = default(EntityRef<Service>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.BudgetStatus")]
	[DataContract()]
	public partial class BudgetStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BudgetStatusId;
		
		private string _Name;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Budget> _Budgets;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBudgetStatusIdChanging(int value);
    partial void OnBudgetStatusIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public BudgetStatus()
		{
			this.Initialize();
		}
		
		[Column(Storage="_BudgetStatusId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int BudgetStatusId
		{
			get
			{
				return this._BudgetStatusId;
			}
			set
			{
				if ((this._BudgetStatusId != value))
				{
					this.OnBudgetStatusIdChanging(value);
					this.SendPropertyChanging();
					this._BudgetStatusId = value;
					this.SendPropertyChanged("BudgetStatusId");
					this.OnBudgetStatusIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="BudgetStatus_Budget", Storage="_Budgets", ThisKey="BudgetStatusId", OtherKey="BudgetStatusId")]
		[DataMember(Order=3, EmitDefaultValue=false)]
		public EntitySet<Budget> Budgets
		{
			get
			{
				if ((this.serializing 
							&& (this._Budgets.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Budgets;
			}
			set
			{
				this._Budgets.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Budgets(Budget entity)
		{
			this.SendPropertyChanging();
			entity.BudgetStatus = this;
		}
		
		private void detach_Budgets(Budget entity)
		{
			this.SendPropertyChanging();
			entity.BudgetStatus = null;
		}
		
		private void Initialize()
		{
			this._Budgets = new EntitySet<Budget>(new Action<Budget>(this.attach_Budgets), new Action<Budget>(this.detach_Budgets));
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.Category")]
	[DataContract()]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CategoryId;
		
		private string _Name;
		
		private string _ImageUrl;
		
		private System.DateTime _ModifiedDate;
		
		private System.Nullable<int> _ParentId;
		
		private int _CompanyId;
		
		private string _ExternalSourceId;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Category> _Categories;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Product> _Products;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Category> _Category1;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Company> _Company;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryIdChanging(int value);
    partial void OnCategoryIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnImageUrlChanging(string value);
    partial void OnImageUrlChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnParentIdChanging(System.Nullable<int> value);
    partial void OnParentIdChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnExternalSourceIdChanging(string value);
    partial void OnExternalSourceIdChanged();
    #endregion
		
		public Category()
		{
			this.Initialize();
		}
		
		[Column(Storage="_CategoryId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int CategoryId
		{
			get
			{
				return this._CategoryId;
			}
			set
			{
				if ((this._CategoryId != value))
				{
					this.OnCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._CategoryId = value;
					this.SendPropertyChanged("CategoryId");
					this.OnCategoryIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_ImageUrl", DbType="VarChar(1024)")]
		[DataMember(Order=3)]
		public string ImageUrl
		{
			get
			{
				return this._ImageUrl;
			}
			set
			{
				if ((this._ImageUrl != value))
				{
					this.OnImageUrlChanging(value);
					this.SendPropertyChanging();
					this._ImageUrl = value;
					this.SendPropertyChanged("ImageUrl");
					this.OnImageUrlChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		[DataMember(Order=4)]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_ParentId", DbType="Int")]
		[DataMember(Order=5)]
		public System.Nullable<int> ParentId
		{
			get
			{
				return this._ParentId;
			}
			set
			{
				if ((this._ParentId != value))
				{
					if (this._Category1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIdChanging(value);
					this.SendPropertyChanging();
					this._ParentId = value;
					this.SendPropertyChanged("ParentId");
					this.OnParentIdChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL")]
		[DataMember(Order=6)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Column(Storage="_ExternalSourceId", DbType="VarChar(20)")]
		[DataMember(Order=7)]
		public string ExternalSourceId
		{
			get
			{
				return this._ExternalSourceId;
			}
			set
			{
				if ((this._ExternalSourceId != value))
				{
					this.OnExternalSourceIdChanging(value);
					this.SendPropertyChanging();
					this._ExternalSourceId = value;
					this.SendPropertyChanged("ExternalSourceId");
					this.OnExternalSourceIdChanged();
				}
			}
		}
		
		[Association(Name="Category_Category", Storage="_Categories", ThisKey="CategoryId", OtherKey="ParentId")]
		[DataMember(Order=8, EmitDefaultValue=false)]
		public EntitySet<Category> Categories
		{
			get
			{
				if ((this.serializing 
							&& (this._Categories.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Categories;
			}
			set
			{
				this._Categories.Assign(value);
			}
		}
		
		[Association(Name="Category_Product", Storage="_Products", ThisKey="CategoryId", OtherKey="CategoryId")]
		[DataMember(Order=9, EmitDefaultValue=false)]
		public EntitySet<Product> Products
		{
			get
			{
				if ((this.serializing 
							&& (this._Products.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		[Association(Name="Category_Category", Storage="_Category1", ThisKey="ParentId", OtherKey="CategoryId", IsForeignKey=true)]
		public Category Category1
		{
			get
			{
				return this._Category1.Entity;
			}
			set
			{
				Category previousValue = this._Category1.Entity;
				if (((previousValue != value) 
							|| (this._Category1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category1.Entity = null;
						previousValue.Categories.Remove(this);
					}
					this._Category1.Entity = value;
					if ((value != null))
					{
						value.Categories.Add(this);
						this._ParentId = value.CategoryId;
					}
					else
					{
						this._ParentId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Category1");
				}
			}
		}
		
		[Association(Name="Company_Category", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Categories.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Categories.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Categories(Category entity)
		{
			this.SendPropertyChanging();
			entity.Category1 = this;
		}
		
		private void detach_Categories(Category entity)
		{
			this.SendPropertyChanging();
			entity.Category1 = null;
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
		
		private void Initialize()
		{
			this._Categories = new EntitySet<Category>(new Action<Category>(this.attach_Categories), new Action<Category>(this.detach_Categories));
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			this._Category1 = default(EntityRef<Category>);
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.CFOP")]
	[DataContract()]
	public partial class CFOP : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CfopId;
		
		private string _Name;
		
		private int _Code;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Receipt> _Receipts;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCfopIdChanging(int value);
    partial void OnCfopIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCodeChanging(int value);
    partial void OnCodeChanged();
    #endregion
		
		public CFOP()
		{
			this.Initialize();
		}
		
		[Column(Storage="_CfopId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int CfopId
		{
			get
			{
				return this._CfopId;
			}
			set
			{
				if ((this._CfopId != value))
				{
					this.OnCfopIdChanging(value);
					this.SendPropertyChanging();
					this._CfopId = value;
					this.SendPropertyChanged("CfopId");
					this.OnCfopIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(120) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Code", DbType="Int NOT NULL")]
		[DataMember(Order=3)]
		public int Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[Association(Name="CFOP_Receipt", Storage="_Receipts", ThisKey="CfopId", OtherKey="CfopId")]
		[DataMember(Order=4, EmitDefaultValue=false)]
		public EntitySet<Receipt> Receipts
		{
			get
			{
				if ((this.serializing 
							&& (this._Receipts.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Receipts;
			}
			set
			{
				this._Receipts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Receipts(Receipt entity)
		{
			this.SendPropertyChanging();
			entity.CFOP = this;
		}
		
		private void detach_Receipts(Receipt entity)
		{
			this.SendPropertyChanging();
			entity.CFOP = null;
		}
		
		private void Initialize()
		{
			this._Receipts = new EntitySet<Receipt>(new Action<Receipt>(this.attach_Receipts), new Action<Receipt>(this.detach_Receipts));
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.Checks")]
	[DataContract()]
	public partial class Check : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CheckId;
		
		private System.Nullable<System.DateTime> _EntryDate;
		
		private string _Sender;
		
		private System.Nullable<decimal> _CheckValue;
		
		private string _CheckNumber;
		
		private string _Agency;
		
		private System.Nullable<bool> _Returns;
		
		private System.Nullable<int> _BankId;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Bank> _Bank;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCheckIdChanging(int value);
    partial void OnCheckIdChanged();
    partial void OnEntryDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEntryDateChanged();
    partial void OnSenderChanging(string value);
    partial void OnSenderChanged();
    partial void OnCheckValueChanging(System.Nullable<decimal> value);
    partial void OnCheckValueChanged();
    partial void OnCheckNumberChanging(string value);
    partial void OnCheckNumberChanged();
    partial void OnAgencyChanging(string value);
    partial void OnAgencyChanged();
    partial void OnReturnsChanging(System.Nullable<bool> value);
    partial void OnReturnsChanged();
    partial void OnBankIdChanging(System.Nullable<int> value);
    partial void OnBankIdChanged();
    #endregion
		
		public Check()
		{
			this.Initialize();
		}
		
		[Column(Storage="_CheckId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int CheckId
		{
			get
			{
				return this._CheckId;
			}
			set
			{
				if ((this._CheckId != value))
				{
					this.OnCheckIdChanging(value);
					this.SendPropertyChanging();
					this._CheckId = value;
					this.SendPropertyChanged("CheckId");
					this.OnCheckIdChanged();
				}
			}
		}
		
		[Column(Storage="_EntryDate", DbType="DateTime")]
		[DataMember(Order=2)]
		public System.Nullable<System.DateTime> EntryDate
		{
			get
			{
				return this._EntryDate;
			}
			set
			{
				if ((this._EntryDate != value))
				{
					this.OnEntryDateChanging(value);
					this.SendPropertyChanging();
					this._EntryDate = value;
					this.SendPropertyChanged("EntryDate");
					this.OnEntryDateChanged();
				}
			}
		}
		
		[Column(Storage="_Sender", DbType="VarChar(128)")]
		[DataMember(Order=3)]
		public string Sender
		{
			get
			{
				return this._Sender;
			}
			set
			{
				if ((this._Sender != value))
				{
					this.OnSenderChanging(value);
					this.SendPropertyChanging();
					this._Sender = value;
					this.SendPropertyChanged("Sender");
					this.OnSenderChanged();
				}
			}
		}
		
		[Column(Storage="_CheckValue", DbType="Decimal(18,2)")]
		[DataMember(Order=4)]
		public System.Nullable<decimal> CheckValue
		{
			get
			{
				return this._CheckValue;
			}
			set
			{
				if ((this._CheckValue != value))
				{
					this.OnCheckValueChanging(value);
					this.SendPropertyChanging();
					this._CheckValue = value;
					this.SendPropertyChanged("CheckValue");
					this.OnCheckValueChanged();
				}
			}
		}
		
		[Column(Storage="_CheckNumber", DbType="VarChar(10)")]
		[DataMember(Order=5)]
		public string CheckNumber
		{
			get
			{
				return this._CheckNumber;
			}
			set
			{
				if ((this._CheckNumber != value))
				{
					this.OnCheckNumberChanging(value);
					this.SendPropertyChanging();
					this._CheckNumber = value;
					this.SendPropertyChanged("CheckNumber");
					this.OnCheckNumberChanged();
				}
			}
		}
		
		[Column(Storage="_Agency", DbType="VarChar(10)")]
		[DataMember(Order=6)]
		public string Agency
		{
			get
			{
				return this._Agency;
			}
			set
			{
				if ((this._Agency != value))
				{
					this.OnAgencyChanging(value);
					this.SendPropertyChanging();
					this._Agency = value;
					this.SendPropertyChanged("Agency");
					this.OnAgencyChanged();
				}
			}
		}
		
		[Column(Name="[Returns]", Storage="_Returns", DbType="Bit")]
		[DataMember(Order=7)]
		public System.Nullable<bool> Returns
		{
			get
			{
				return this._Returns;
			}
			set
			{
				if ((this._Returns != value))
				{
					this.OnReturnsChanging(value);
					this.SendPropertyChanging();
					this._Returns = value;
					this.SendPropertyChanged("Returns");
					this.OnReturnsChanged();
				}
			}
		}
		
		[Column(Storage="_BankId", DbType="Int")]
		[DataMember(Order=8)]
		public System.Nullable<int> BankId
		{
			get
			{
				return this._BankId;
			}
			set
			{
				if ((this._BankId != value))
				{
					if (this._Bank.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBankIdChanging(value);
					this.SendPropertyChanging();
					this._BankId = value;
					this.SendPropertyChanged("BankId");
					this.OnBankIdChanged();
				}
			}
		}
		
		[Association(Name="Bank_Check", Storage="_Bank", ThisKey="BankId", OtherKey="BankId", IsForeignKey=true, DeleteRule="CASCADE")]
		public Bank Bank
		{
			get
			{
				return this._Bank.Entity;
			}
			set
			{
				Bank previousValue = this._Bank.Entity;
				if (((previousValue != value) 
							|| (this._Bank.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bank.Entity = null;
						previousValue.Checks.Remove(this);
					}
					this._Bank.Entity = value;
					if ((value != null))
					{
						value.Checks.Add(this);
						this._BankId = value.BankId;
					}
					else
					{
						this._BankId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Bank");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Bank = default(EntityRef<Bank>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.City")]
	[DataContract()]
	public partial class City : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CityId;
		
		private string _StateId;
		
		private string _Name;
		
		private string _PostalCode;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Neighborhood> _Neighborhoods;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<State> _State;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCityIdChanging(int value);
    partial void OnCityIdChanged();
    partial void OnStateIdChanging(string value);
    partial void OnStateIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPostalCodeChanging(string value);
    partial void OnPostalCodeChanged();
    #endregion
		
		public City()
		{
			this.Initialize();
		}
		
		[Column(Storage="_CityId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int CityId
		{
			get
			{
				return this._CityId;
			}
			set
			{
				if ((this._CityId != value))
				{
					this.OnCityIdChanging(value);
					this.SendPropertyChanging();
					this._CityId = value;
					this.SendPropertyChanged("CityId");
					this.OnCityIdChanged();
				}
			}
		}
		
		[Column(Storage="_StateId", DbType="Char(2)")]
		[DataMember(Order=2)]
		public string StateId
		{
			get
			{
				return this._StateId;
			}
			set
			{
				if ((this._StateId != value))
				{
					if (this._State.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStateIdChanging(value);
					this.SendPropertyChanging();
					this._StateId = value;
					this.SendPropertyChanged("StateId");
					this.OnStateIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50)")]
		[DataMember(Order=3)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_PostalCode", DbType="Char(8)")]
		[DataMember(Order=4)]
		public string PostalCode
		{
			get
			{
				return this._PostalCode;
			}
			set
			{
				if ((this._PostalCode != value))
				{
					this.OnPostalCodeChanging(value);
					this.SendPropertyChanging();
					this._PostalCode = value;
					this.SendPropertyChanged("PostalCode");
					this.OnPostalCodeChanged();
				}
			}
		}
		
		[Association(Name="City_Neighborhood", Storage="_Neighborhoods", ThisKey="CityId", OtherKey="CityId")]
		[DataMember(Order=5, EmitDefaultValue=false)]
		public EntitySet<Neighborhood> Neighborhoods
		{
			get
			{
				if ((this.serializing 
							&& (this._Neighborhoods.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Neighborhoods;
			}
			set
			{
				this._Neighborhoods.Assign(value);
			}
		}
		
		[Association(Name="State_City", Storage="_State", ThisKey="StateId", OtherKey="StateId", IsForeignKey=true)]
		public State State
		{
			get
			{
				return this._State.Entity;
			}
			set
			{
				State previousValue = this._State.Entity;
				if (((previousValue != value) 
							|| (this._State.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._State.Entity = null;
						previousValue.Cities.Remove(this);
					}
					this._State.Entity = value;
					if ((value != null))
					{
						value.Cities.Add(this);
						this._StateId = value.StateId;
					}
					else
					{
						this._StateId = default(string);
					}
					this.SendPropertyChanged("State");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Neighborhoods(Neighborhood entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_Neighborhoods(Neighborhood entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
		
		private void Initialize()
		{
			this._Neighborhoods = new EntitySet<Neighborhood>(new Action<Neighborhood>(this.attach_Neighborhoods), new Action<Neighborhood>(this.detach_Neighborhoods));
			this._State = default(EntityRef<State>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.Cnae")]
	[DataContract()]
	public partial class Cnae : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CnaeId;
		
		private string _Name;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Company> _Companies;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCnaeIdChanging(int value);
    partial void OnCnaeIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Cnae()
		{
			this.Initialize();
		}
		
		[Column(Storage="_CnaeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int CnaeId
		{
			get
			{
				return this._CnaeId;
			}
			set
			{
				if ((this._CnaeId != value))
				{
					this.OnCnaeIdChanging(value);
					this.SendPropertyChanging();
					this._CnaeId = value;
					this.SendPropertyChanged("CnaeId");
					this.OnCnaeIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(120) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="Cnae_Company", Storage="_Companies", ThisKey="CnaeId", OtherKey="CnaeId")]
		[DataMember(Order=3, EmitDefaultValue=false)]
		public EntitySet<Company> Companies
		{
			get
			{
				if ((this.serializing 
							&& (this._Companies.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Companies;
			}
			set
			{
				this._Companies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Companies(Company entity)
		{
			this.SendPropertyChanging();
			entity.Cnae = this;
		}
		
		private void detach_Companies(Company entity)
		{
			this.SendPropertyChanging();
			entity.Cnae = null;
		}
		
		private void Initialize()
		{
			this._Companies = new EntitySet<Company>(new Action<Company>(this.attach_Companies), new Action<Company>(this.detach_Companies));
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.Comment")]
	[DataContract()]
	public partial class Comment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CommentId;
		
		private string _Description;
		
		private string _UserName;
		
		private string _Email;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private string _PageName;
		
		private int _SubjectId;
		
		private string _Website;
		
		private string _FileName;
		
		private string _FileUrl;
		
		private int _CompanyId;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Company> _Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCommentIdChanging(int value);
    partial void OnCommentIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnPageNameChanging(string value);
    partial void OnPageNameChanged();
    partial void OnSubjectIdChanging(int value);
    partial void OnSubjectIdChanged();
    partial void OnWebsiteChanging(string value);
    partial void OnWebsiteChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnFileUrlChanging(string value);
    partial void OnFileUrlChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    #endregion
		
		public Comment()
		{
			this.Initialize();
		}
		
		[Column(Storage="_CommentId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int CommentId
		{
			get
			{
				return this._CommentId;
			}
			set
			{
				if ((this._CommentId != value))
				{
					this.OnCommentIdChanging(value);
					this.SendPropertyChanging();
					this._CommentId = value;
					this.SendPropertyChanged("CommentId");
					this.OnCommentIdChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="VarChar(128) NOT NULL", CanBeNull=false)]
		[DataMember(Order=3)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="VarChar(128) NOT NULL", CanBeNull=false)]
		[DataMember(Order=4)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime")]
		[DataMember(Order=5)]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_PageName", DbType="VarChar(128) NOT NULL", CanBeNull=false)]
		[DataMember(Order=6)]
		public string PageName
		{
			get
			{
				return this._PageName;
			}
			set
			{
				if ((this._PageName != value))
				{
					this.OnPageNameChanging(value);
					this.SendPropertyChanging();
					this._PageName = value;
					this.SendPropertyChanged("PageName");
					this.OnPageNameChanged();
				}
			}
		}
		
		[Column(Storage="_SubjectId", DbType="Int NOT NULL")]
		[DataMember(Order=7)]
		public int SubjectId
		{
			get
			{
				return this._SubjectId;
			}
			set
			{
				if ((this._SubjectId != value))
				{
					this.OnSubjectIdChanging(value);
					this.SendPropertyChanging();
					this._SubjectId = value;
					this.SendPropertyChanged("SubjectId");
					this.OnSubjectIdChanged();
				}
			}
		}
		
		[Column(Storage="_Website", DbType="VarChar(1024)")]
		[DataMember(Order=8)]
		public string Website
		{
			get
			{
				return this._Website;
			}
			set
			{
				if ((this._Website != value))
				{
					this.OnWebsiteChanging(value);
					this.SendPropertyChanging();
					this._Website = value;
					this.SendPropertyChanged("Website");
					this.OnWebsiteChanged();
				}
			}
		}
		
		[Column(Storage="_FileName", DbType="VarChar(1024)")]
		[DataMember(Order=9)]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[Column(Storage="_FileUrl", DbType="VarChar(1024)")]
		[DataMember(Order=10)]
		public string FileUrl
		{
			get
			{
				return this._FileUrl;
			}
			set
			{
				if ((this._FileUrl != value))
				{
					this.OnFileUrlChanging(value);
					this.SendPropertyChanging();
					this._FileUrl = value;
					this.SendPropertyChanged("FileUrl");
					this.OnFileUrlChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=11)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Association(Name="Company_Comment", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.Company")]
	[DataContract()]
	public partial class Company : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CompanyId;
		
		private string _Activities;
		
		private string _Image;
		
		private System.DateTime _NextStatementDueDate;
		
		private System.DateTime _StartDate;
		
		private System.DateTime _ModifiedDate;
		
		private System.Nullable<int> _PlanId;
		
		private System.Nullable<int> _MatrixId;
		
		private string _AddressNumber;
		
		private int _ReferenceCompanyId;
		
		private string _AddressComp;
		
		private System.Nullable<int> _CompanyConfigurationId;
		
		private int _LegalEntityProfileId;
		
		private System.Nullable<int> _CreatorUserId;
		
		private System.Nullable<System.DateTime> _AllowLoginAfterTime;
		
		private System.Nullable<System.DateTime> _AllowLoginBeforeTime;
		
		private System.Nullable<int> _RoleAdminId;
		
		private string _CEI12;
		
		private string _NIT14;
		
		private System.Nullable<int> _ProfitAssessmentId;
		
		private System.Nullable<decimal> _JointStock;
		
		private System.Nullable<int> _CnaeId;
		
		private System.Nullable<int> _JudicialNatureId;
		
		private string _Theme;
		
		private System.Nullable<System.DateTime> _LastSyncDate;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Account> _Accounts;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<AccountingPlan> _AccountingPlans;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<AdditionalInformation> _AdditionalInformations;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<AdditionalInformationData> _AdditionalInformationDatas;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Bill> _Bills;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Budget> _Budgets;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Category> _Categories;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Comment> _Comments;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<CompanyUser> _CompanyUsers;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Contact> _Contacts;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Contract> _Contracts;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<ContractPendency> _ContractPendencies;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<ContractType> _ContractTypes;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<CostCenter> _CostCenters;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<CostCenter> _CostCenters1;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Customer> _Customers;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<CustomerCall> _CustomerCalls;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<CustomerContact> _CustomerContacts;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<CustomerFollowupAction> _CustomerFollowupActions;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<CustomerType> _CustomerTypes;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<CustomFunction> _CustomFunctions;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Deposit> _Deposits;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<DocumentTemplate> _DocumentTemplates;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<DropPayout> _DropPayouts;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Employee> _Employees;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<EmployeeAdditionalInformation> _EmployeeAdditionalInformations;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<EmployeeFunction> _EmployeeFunctions;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<EmployeeFunctionHistory> _EmployeeFunctionHistories;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<ExpenditureAuthorization> _ExpenditureAuthorizations;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<FinancierCondition> _FinancierConditions;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<FinancierOperation> _FinancierOperations;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Inventory> _Inventories;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<InventoryHistory> _InventoryHistories;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<InventoryMoviment> _InventoryMoviments;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<InventoryMoviment> _InventoryMoviments1;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<InventoryRMA> _InventoryRMAs;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Invoice> _Invoices;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<OrganizationLevel> _OrganizationLevels;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<OtherSchool> _OtherSchools;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<PackageAdditional> _PackageAdditionals;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Parcel> _Parcels;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Permission> _Permissions;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Post> _Posts;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Post> _Posts1;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Product> _Products;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<PurchaseOrder> _PurchaseOrders;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<PurchaseRequest> _PurchaseRequests;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Quotation> _Quotations;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Receipt> _Receipts;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<ReceiptFieldConfiguration> _ReceiptFieldConfigurations;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Representant> _Representants;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Role> _Roles;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Sale> _Sales;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Service> _Services;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<ServiceOrder> _ServiceOrders;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<ServiceOrderBook> _ServiceOrderBooks;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<ServiceOrderEquipmentDamage> _ServiceOrderEquipmentDamages;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<ServiceOrderHaltType> _ServiceOrderHaltTypes;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<ServiceOrderInstallType> _ServiceOrderInstallTypes;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<ServiceOrderProductDamage> _ServiceOrderProductDamages;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<ServiceOrderProductType> _ServiceOrderProductTypes;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<ServiceOrderTest> _ServiceOrderTests;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<ServiceOrderType> _ServiceOrderTypes;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<ServiceType> _ServiceTypes;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Statement> _Statements;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<StatusHistory> _StatusHistories;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Supplier> _Suppliers;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<SupplierCategory> _SupplierCategories;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Transporter> _Transporters;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<WebPage> _WebPages;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Cnae> _Cnae;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<CompanyConfiguration> _CompanyConfiguration;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<JudicialNature> _JudicialNature;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<LegalEntityProfile> _LegalEntityProfile;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Plan> _Plan;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<ProfitAssessment> _ProfitAssessment;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<User> _User;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnActivitiesChanging(string value);
    partial void OnActivitiesChanged();
    partial void OnImageChanging(string value);
    partial void OnImageChanged();
    partial void OnNextStatementDueDateChanging(System.DateTime value);
    partial void OnNextStatementDueDateChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnPlanIdChanging(System.Nullable<int> value);
    partial void OnPlanIdChanged();
    partial void OnMatrixIdChanging(System.Nullable<int> value);
    partial void OnMatrixIdChanged();
    partial void OnAddressNumberChanging(string value);
    partial void OnAddressNumberChanged();
    partial void OnReferenceCompanyIdChanging(int value);
    partial void OnReferenceCompanyIdChanged();
    partial void OnAddressCompChanging(string value);
    partial void OnAddressCompChanged();
    partial void OnCompanyConfigurationIdChanging(System.Nullable<int> value);
    partial void OnCompanyConfigurationIdChanged();
    partial void OnLegalEntityProfileIdChanging(int value);
    partial void OnLegalEntityProfileIdChanged();
    partial void OnCreatorUserIdChanging(System.Nullable<int> value);
    partial void OnCreatorUserIdChanged();
    partial void OnAllowLoginAfterTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnAllowLoginAfterTimeChanged();
    partial void OnAllowLoginBeforeTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnAllowLoginBeforeTimeChanged();
    partial void OnRoleAdminIdChanging(System.Nullable<int> value);
    partial void OnRoleAdminIdChanged();
    partial void OnCEI12Changing(string value);
    partial void OnCEI12Changed();
    partial void OnNIT14Changing(string value);
    partial void OnNIT14Changed();
    partial void OnProfitAssessmentIdChanging(System.Nullable<int> value);
    partial void OnProfitAssessmentIdChanged();
    partial void OnJointStockChanging(System.Nullable<decimal> value);
    partial void OnJointStockChanged();
    partial void OnCnaeIdChanging(System.Nullable<int> value);
    partial void OnCnaeIdChanged();
    partial void OnJudicialNatureIdChanging(System.Nullable<int> value);
    partial void OnJudicialNatureIdChanged();
    partial void OnThemeChanging(string value);
    partial void OnThemeChanged();
    partial void OnLastSyncDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastSyncDateChanged();
    #endregion
		
		public Company()
		{
			this.Initialize();
		}
		
		[Column(Storage="_CompanyId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Column(Storage="_Activities", DbType="VarChar(1024)")]
		[DataMember(Order=2)]
		public string Activities
		{
			get
			{
				return this._Activities;
			}
			set
			{
				if ((this._Activities != value))
				{
					this.OnActivitiesChanging(value);
					this.SendPropertyChanging();
					this._Activities = value;
					this.SendPropertyChanged("Activities");
					this.OnActivitiesChanged();
				}
			}
		}
		
		[Column(Storage="_Image", DbType="VarChar(100)")]
		[DataMember(Order=3)]
		public string Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[Column(Storage="_NextStatementDueDate", DbType="DateTime NOT NULL")]
		[DataMember(Order=4)]
		public System.DateTime NextStatementDueDate
		{
			get
			{
				return this._NextStatementDueDate;
			}
			set
			{
				if ((this._NextStatementDueDate != value))
				{
					this.OnNextStatementDueDateChanging(value);
					this.SendPropertyChanging();
					this._NextStatementDueDate = value;
					this.SendPropertyChanged("NextStatementDueDate");
					this.OnNextStatementDueDateChanged();
				}
			}
		}
		
		[Column(Storage="_StartDate", DbType="DateTime NOT NULL")]
		[DataMember(Order=5)]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		[DataMember(Order=6)]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_PlanId", DbType="Int")]
		[DataMember(Order=7)]
		public System.Nullable<int> PlanId
		{
			get
			{
				return this._PlanId;
			}
			set
			{
				if ((this._PlanId != value))
				{
					if (this._Plan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlanIdChanging(value);
					this.SendPropertyChanging();
					this._PlanId = value;
					this.SendPropertyChanged("PlanId");
					this.OnPlanIdChanged();
				}
			}
		}
		
		[Column(Storage="_MatrixId", DbType="Int")]
		[DataMember(Order=8)]
		public System.Nullable<int> MatrixId
		{
			get
			{
				return this._MatrixId;
			}
			set
			{
				if ((this._MatrixId != value))
				{
					this.OnMatrixIdChanging(value);
					this.SendPropertyChanging();
					this._MatrixId = value;
					this.SendPropertyChanged("MatrixId");
					this.OnMatrixIdChanged();
				}
			}
		}
		
		[Column(Storage="_AddressNumber", DbType="VarChar(8)")]
		[DataMember(Order=9)]
		public string AddressNumber
		{
			get
			{
				return this._AddressNumber;
			}
			set
			{
				if ((this._AddressNumber != value))
				{
					this.OnAddressNumberChanging(value);
					this.SendPropertyChanging();
					this._AddressNumber = value;
					this.SendPropertyChanged("AddressNumber");
					this.OnAddressNumberChanged();
				}
			}
		}
		
		[Column(Storage="_ReferenceCompanyId", DbType="Int NOT NULL")]
		[DataMember(Order=10)]
		public int ReferenceCompanyId
		{
			get
			{
				return this._ReferenceCompanyId;
			}
			set
			{
				if ((this._ReferenceCompanyId != value))
				{
					this.OnReferenceCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._ReferenceCompanyId = value;
					this.SendPropertyChanged("ReferenceCompanyId");
					this.OnReferenceCompanyIdChanged();
				}
			}
		}
		
		[Column(Storage="_AddressComp", DbType="VarChar(128)")]
		[DataMember(Order=11)]
		public string AddressComp
		{
			get
			{
				return this._AddressComp;
			}
			set
			{
				if ((this._AddressComp != value))
				{
					this.OnAddressCompChanging(value);
					this.SendPropertyChanging();
					this._AddressComp = value;
					this.SendPropertyChanged("AddressComp");
					this.OnAddressCompChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyConfigurationId", DbType="Int")]
		[DataMember(Order=12)]
		public System.Nullable<int> CompanyConfigurationId
		{
			get
			{
				return this._CompanyConfigurationId;
			}
			set
			{
				if ((this._CompanyConfigurationId != value))
				{
					if (this._CompanyConfiguration.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyConfigurationIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyConfigurationId = value;
					this.SendPropertyChanged("CompanyConfigurationId");
					this.OnCompanyConfigurationIdChanged();
				}
			}
		}
		
		[Column(Storage="_LegalEntityProfileId", DbType="Int NOT NULL")]
		[DataMember(Order=13)]
		public int LegalEntityProfileId
		{
			get
			{
				return this._LegalEntityProfileId;
			}
			set
			{
				if ((this._LegalEntityProfileId != value))
				{
					if (this._LegalEntityProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLegalEntityProfileIdChanging(value);
					this.SendPropertyChanging();
					this._LegalEntityProfileId = value;
					this.SendPropertyChanged("LegalEntityProfileId");
					this.OnLegalEntityProfileIdChanged();
				}
			}
		}
		
		[Column(Storage="_CreatorUserId", DbType="Int")]
		[DataMember(Order=14)]
		public System.Nullable<int> CreatorUserId
		{
			get
			{
				return this._CreatorUserId;
			}
			set
			{
				if ((this._CreatorUserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorUserIdChanging(value);
					this.SendPropertyChanging();
					this._CreatorUserId = value;
					this.SendPropertyChanged("CreatorUserId");
					this.OnCreatorUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_AllowLoginAfterTime", DbType="DateTime")]
		[DataMember(Order=15)]
		public System.Nullable<System.DateTime> AllowLoginAfterTime
		{
			get
			{
				return this._AllowLoginAfterTime;
			}
			set
			{
				if ((this._AllowLoginAfterTime != value))
				{
					this.OnAllowLoginAfterTimeChanging(value);
					this.SendPropertyChanging();
					this._AllowLoginAfterTime = value;
					this.SendPropertyChanged("AllowLoginAfterTime");
					this.OnAllowLoginAfterTimeChanged();
				}
			}
		}
		
		[Column(Storage="_AllowLoginBeforeTime", DbType="DateTime")]
		[DataMember(Order=16)]
		public System.Nullable<System.DateTime> AllowLoginBeforeTime
		{
			get
			{
				return this._AllowLoginBeforeTime;
			}
			set
			{
				if ((this._AllowLoginBeforeTime != value))
				{
					this.OnAllowLoginBeforeTimeChanging(value);
					this.SendPropertyChanging();
					this._AllowLoginBeforeTime = value;
					this.SendPropertyChanged("AllowLoginBeforeTime");
					this.OnAllowLoginBeforeTimeChanged();
				}
			}
		}
		
		[Column(Storage="_RoleAdminId", DbType="Int")]
		[DataMember(Order=17)]
		public System.Nullable<int> RoleAdminId
		{
			get
			{
				return this._RoleAdminId;
			}
			set
			{
				if ((this._RoleAdminId != value))
				{
					this.OnRoleAdminIdChanging(value);
					this.SendPropertyChanging();
					this._RoleAdminId = value;
					this.SendPropertyChanged("RoleAdminId");
					this.OnRoleAdminIdChanged();
				}
			}
		}
		
		[Column(Storage="_CEI12", DbType="VarChar(120)")]
		[DataMember(Order=18)]
		public string CEI12
		{
			get
			{
				return this._CEI12;
			}
			set
			{
				if ((this._CEI12 != value))
				{
					this.OnCEI12Changing(value);
					this.SendPropertyChanging();
					this._CEI12 = value;
					this.SendPropertyChanged("CEI12");
					this.OnCEI12Changed();
				}
			}
		}
		
		[Column(Storage="_NIT14", DbType="VarChar(120)")]
		[DataMember(Order=19)]
		public string NIT14
		{
			get
			{
				return this._NIT14;
			}
			set
			{
				if ((this._NIT14 != value))
				{
					this.OnNIT14Changing(value);
					this.SendPropertyChanging();
					this._NIT14 = value;
					this.SendPropertyChanged("NIT14");
					this.OnNIT14Changed();
				}
			}
		}
		
		[Column(Storage="_ProfitAssessmentId", DbType="Int")]
		[DataMember(Order=20)]
		public System.Nullable<int> ProfitAssessmentId
		{
			get
			{
				return this._ProfitAssessmentId;
			}
			set
			{
				if ((this._ProfitAssessmentId != value))
				{
					if (this._ProfitAssessment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProfitAssessmentIdChanging(value);
					this.SendPropertyChanging();
					this._ProfitAssessmentId = value;
					this.SendPropertyChanged("ProfitAssessmentId");
					this.OnProfitAssessmentIdChanged();
				}
			}
		}
		
		[Column(Storage="_JointStock", DbType="Decimal(18,2)")]
		[DataMember(Order=21)]
		public System.Nullable<decimal> JointStock
		{
			get
			{
				return this._JointStock;
			}
			set
			{
				if ((this._JointStock != value))
				{
					this.OnJointStockChanging(value);
					this.SendPropertyChanging();
					this._JointStock = value;
					this.SendPropertyChanged("JointStock");
					this.OnJointStockChanged();
				}
			}
		}
		
		[Column(Storage="_CnaeId", DbType="Int")]
		[DataMember(Order=22)]
		public System.Nullable<int> CnaeId
		{
			get
			{
				return this._CnaeId;
			}
			set
			{
				if ((this._CnaeId != value))
				{
					if (this._Cnae.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCnaeIdChanging(value);
					this.SendPropertyChanging();
					this._CnaeId = value;
					this.SendPropertyChanged("CnaeId");
					this.OnCnaeIdChanged();
				}
			}
		}
		
		[Column(Storage="_JudicialNatureId", DbType="Int")]
		[DataMember(Order=23)]
		public System.Nullable<int> JudicialNatureId
		{
			get
			{
				return this._JudicialNatureId;
			}
			set
			{
				if ((this._JudicialNatureId != value))
				{
					if (this._JudicialNature.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJudicialNatureIdChanging(value);
					this.SendPropertyChanging();
					this._JudicialNatureId = value;
					this.SendPropertyChanged("JudicialNatureId");
					this.OnJudicialNatureIdChanged();
				}
			}
		}
		
		[Column(Storage="_Theme", DbType="VarChar(50)")]
		[DataMember(Order=24)]
		public string Theme
		{
			get
			{
				return this._Theme;
			}
			set
			{
				if ((this._Theme != value))
				{
					this.OnThemeChanging(value);
					this.SendPropertyChanging();
					this._Theme = value;
					this.SendPropertyChanged("Theme");
					this.OnThemeChanged();
				}
			}
		}
		
		[Column(Storage="_LastSyncDate", DbType="DateTime")]
		[DataMember(Order=25)]
		public System.Nullable<System.DateTime> LastSyncDate
		{
			get
			{
				return this._LastSyncDate;
			}
			set
			{
				if ((this._LastSyncDate != value))
				{
					this.OnLastSyncDateChanging(value);
					this.SendPropertyChanging();
					this._LastSyncDate = value;
					this.SendPropertyChanged("LastSyncDate");
					this.OnLastSyncDateChanged();
				}
			}
		}
		
		[Association(Name="Company_Account", Storage="_Accounts", ThisKey="CompanyId", OtherKey="CompanyId")]
		[DataMember(Order=26, EmitDefaultValue=false)]
		public EntitySet<Account> Accounts
		{
			get
			{
				if ((this.serializing 
							&& (this._Accounts.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Accounts;
			}
			set
			{
				this._Accounts.Assign(value);
			}
		}
		
		[Association(Name="Company_AccountingPlan", Storage="_AccountingPlans", ThisKey="CompanyId", OtherKey="CompanyId")]
		[DataMember(Order=27, EmitDefaultValue=false)]
		public EntitySet<AccountingPlan> AccountingPlans
		{
			get
			{
				if ((this.serializing 
							&& (this._AccountingPlans.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._AccountingPlans;
			}
			set
			{
				this._AccountingPlans.Assign(value);
			}
		}
		
		[Association(Name="Company_AdditionalInformation", Storage="_AdditionalInformations", ThisKey="CompanyId", OtherKey="CompanyId")]
		[DataMember(Order=28, EmitDefaultValue=false)]
		public EntitySet<AdditionalInformation> AdditionalInformations
		{
			get
			{
				if ((this.serializing 
							&& (this._AdditionalInformations.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._AdditionalInformations;
			}
			set
			{
				this._AdditionalInformations.Assign(value);
			}
		}
		
		[Association(Name="Company_AdditionalInformationData", Storage="_AdditionalInformationDatas", ThisKey="CompanyId", OtherKey="CompanyId")]
		[DataMember(Order=29, EmitDefaultValue=false)]
		public EntitySet<AdditionalInformationData> AdditionalInformationDatas
		{
			get
			{
				if ((this.serializing 
							&& (this._AdditionalInformationDatas.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._AdditionalInformationDatas;
			}
			set
			{
				this._AdditionalInformationDatas.Assign(value);
			}
		}
		
		[Association(Name="Company_Bill", Storage="_Bills", ThisKey="CompanyId", OtherKey="CompanyId")]
		[DataMember(Order=30, EmitDefaultValue=false)]
		public EntitySet<Bill> Bills
		{
			get
			{
				if ((this.serializing 
							&& (this._Bills.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Bills;
			}
			set
			{
				this._Bills.Assign(value);
			}
		}
		
		[Association(Name="Company_Budget", Storage="_Budgets", ThisKey="CompanyId", OtherKey="CompanyId")]
		[DataMember(Order=31, EmitDefaultValue=false)]
		public EntitySet<Budget> Budgets
		{
			get
			{
				if ((this.serializing 
							&& (this._Budgets.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Budgets;
			}
			set
			{
				this._Budgets.Assign(value);
			}
		}
		
		[Association(Name="Company_Category", Storage="_Categories", ThisKey="CompanyId", OtherKey="CompanyId")]
		[DataMember(Order=32, EmitDefaultValue=false)]
		public EntitySet<Category> Categories
		{
			get
			{
				if ((this.serializing 
							&& (this._Categories.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Categories;
			}
			set
			{
				this._Categories.Assign(value);
			}
		}
		
		[Association(Name="Company_Comment", Storage="_Comments", ThisKey="CompanyId", OtherKey="CompanyId")]
		[DataMember(Order=33, EmitDefaultValue=false)]
		public EntitySet<Comment> Comments
		{
			get
			{
				if ((this.serializing 
							&& (this._Comments.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		[Association(Name="Company_CompanyUser", Storage="_CompanyUsers", ThisKey="CompanyId", OtherKey="CompanyId")]
		[DataMember(Order=34, EmitDefaultValue=false)]
		public EntitySet<CompanyUser> CompanyUsers
		{
			get
			{
				if ((this.serializing 
							&& (this._CompanyUsers.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._CompanyUsers;
			}
			set
			{
				this._CompanyUsers.Assign(value);
			}
		}
		
		[Association(Name="Company_Contact", Storage="_Contacts", ThisKey="CompanyId", OtherKey="CompanyId")]
		[DataMember(Order=35, EmitDefaultValue=false)]
		public EntitySet<Contact> Contacts
		{
			get
			{
				if ((this.serializing 
							&& (this._Contacts.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Contacts;
			}
			set
			{
				this._Contacts.Assign(value);
			}
		}
		
		[Association(Name="Company_Contract", Storage="_Contracts", ThisKey="CompanyId", OtherKey="CompanyId")]
		[DataMember(Order=36, EmitDefaultValue=false)]
		public EntitySet<Contract> Contracts
		{
			get
			{
				if ((this.serializing 
							&& (this._Contracts.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Contracts;
			}
			set
			{
				this._Contracts.Assign(value);
			}
		}
		
		[Association(Name="Company_ContractPendency", Storage="_ContractPendencies", ThisKey="CompanyId", OtherKey="CompanyId")]
		[DataMember(Order=37, EmitDefaultValue=false)]
		public EntitySet<ContractPendency> ContractPendencies
		{
			get
			{
				if ((this.serializing 
							&& (this._ContractPendencies.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ContractPendencies;
			}
			set
			{
				this._ContractPendencies.Assign(value);
			}
		}
		
		[Association(Name="Company_ContractType", Storage="_ContractTypes", ThisKey="CompanyId", OtherKey="CompanyId")]
		[DataMember(Order=38, EmitDefaultValue=false)]
		public EntitySet<ContractType> ContractTypes
		{
			get
			{
				if ((this.serializing 
							&& (this._ContractTypes.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ContractTypes;
			}
			set
			{
				this._ContractTypes.Assign(value);
			}
		}
		
		[Association(Name="Company_CostCenter", Storage="_CostCenters", ThisKey="CompanyId", OtherKey="CompanyId")]
		[DataMember(Order=39, EmitDefaultValue=false)]
		public EntitySet<CostCenter> CostCenters
		{
			get
			{
				if ((this.serializing 
							&& (this._CostCenters.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._CostCenters;
			}
			set
			{
				this._CostCenters.Assign(value);
			}
		}
		
		[Association(Name="Company_CostCenter1", Storage="_CostCenters1", ThisKey="CompanyId", OtherKey="CompanyId")]
		[DataMember(Order=40, EmitDefaultValue=false)]
		public EntitySet<CostCenter> CostCenters1
		{
			get
			{
				if ((this.serializing 
							&& (this._CostCenters1.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._CostCenters1;
			}
			set
			{
				this._CostCenters1.Assign(value);
			}
		}
		
		[Association(Name="Company_Customer", Storage="_Customers", ThisKey="CompanyId", OtherKey="CompanyId")]
		[DataMember(Order=41, EmitDefaultValue=false)]
		public EntitySet<Customer> Customers
		{
			get
			{
				if ((this.serializing 
							&& (this._Customers.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Customers;
			}
			set
			{
				this._Customers.Assign(value);
			}
		}
		
		[Association(Name="Company_CustomerCall", Storage="_CustomerCalls", ThisKey="CompanyId", OtherKey="CompanyId")]
		[DataMember(Order=42, EmitDefaultValue=false)]
		public EntitySet<CustomerCall> CustomerCalls
		{
			get
			{
				if ((this.serializing 
							&& (this._CustomerCalls.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._CustomerCalls;
			}
			set
			{
				this._CustomerCalls.Assign(value);
			}
		}
		
		[Association(Name="Company_CustomerContact", Storage="_CustomerContacts", ThisKey="CompanyId", OtherKey="CompanyId")]
		[DataMember(Order=43, EmitDefaultValue=false)]
		public EntitySet<CustomerContact> CustomerContacts
		{
			get
			{
				if ((this.serializing 
							&& (this._CustomerContacts.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._CustomerContacts;
			}
			set
			{
				this._CustomerContacts.Assign(value);
			}
		}
		
		[Association(Name="Company_CustomerFollowupAction", Storage="_CustomerFollowupActions", ThisKey="CompanyId", OtherKey="CompanyId")]
		[DataMember(Order=44, EmitDefaultValue=false)]
		public EntitySet<CustomerFollowupAction> CustomerFollowupActions
		{
			get
			{
				if ((this.serializing 
							&& (this._CustomerFollowupActions.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._CustomerFollowupActions;
			}
			set
			{
				this._CustomerFollowupActions.Assign(value);
			}
		}
		
		[Association(Name="Company_CustomerType", Storage="_CustomerTypes", ThisKey="CompanyId", OtherKey="CompanyId")]
		[DataMember(Order=45, EmitDefaultValue=false)]
		public EntitySet<CustomerType> CustomerTypes
		{
			get
			{
				if ((this.serializing 
							&& (this._CustomerTypes.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._CustomerTypes;
			}
			set
			{
				this._CustomerTypes.Assign(value);
			}
		}
		
		[Association(Name="Company_CustomFunction", Storage="_CustomFunctions", ThisKey="CompanyId", OtherKey="CompanyId")]
		[DataMember(Order=46, EmitDefaultValue=false)]
		public EntitySet<CustomFunction> CustomFunctions
		{
			get
			{
				if ((this.serializing 
							&& (this._CustomFunctions.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._CustomFunctions;
			}
			set
			{
				this._CustomFunctions.Assign(value);
			}
		}
		
		[Association(Name="Company_Deposit", Storage="_Deposits", ThisKey="CompanyId", OtherKey="CompanyId")]
		[DataMember(Order=47, EmitDefaultValue=false)]
		public EntitySet<Deposit> Deposits
		{
			get
			{
				if ((this.serializing 
							&& (this._Deposits.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Deposits;
			}
			set
			{
				this._Deposits.Assign(value);
			}
		}
		
		[Association(Name="Company_DocumentTemplate", Storage="_DocumentTemplates", ThisKey="CompanyId", OtherKey="CompanyId")]
		[DataMember(Order=48, EmitDefaultValue=false)]
		public EntitySet<DocumentTemplate> DocumentTemplates
		{
			get
			{
				if ((this.serializing 
							&& (this._DocumentTemplates.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._DocumentTemplates;
			}
			set
			{
				this._DocumentTemplates.Assign(value);
			}
		}
		
		[Association(Name="Company_DropPayout", Storage="_DropPayouts", ThisKey="CompanyId", OtherKey="CompanyId")]
		[DataMember(Order=49, EmitDefaultValue=false)]
		public EntitySet<DropPayout> DropPayouts
		{
			get
			{
				if ((this.serializing 
							&& (this._DropPayouts.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._DropPayouts;
			}
			set
			{
				this._DropPayouts.Assign(value);
			}
		}
		
		[Association(Name="Company_Employee", Storage="_Employees", ThisKey="CompanyId", OtherKey="CompanyId")]
		[DataMember(Order=50, EmitDefaultValue=false)]
		public EntitySet<Employee> Employees
		{
			get
			{
				if ((this.serializing 
							&& (this._Employees.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		[Association(Name="Company_EmployeeAdditionalInformation", Storage="_EmployeeAdditionalInformations", ThisKey="CompanyId", OtherKey="CompanyId")]
		[DataMember(Order=51, EmitDefaultValue=false)]
		public EntitySet<EmployeeAdditionalInformation> EmployeeAdditionalInformations
		{
			get
			{
				if ((this.serializing 
							&& (this._EmployeeAdditionalInformations.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._EmployeeAdditionalInformations;
			}
			set
			{
				this._EmployeeAdditionalInformations.Assign(value);
			}
		}
		
		[Association(Name="Company_EmployeeFunction", Storage="_EmployeeFunctions", ThisKey="CompanyId", OtherKey="CompanyId")]
		[DataMember(Order=52, EmitDefaultValue=false)]
		public EntitySet<EmployeeFunction> EmployeeFunctions
		{
			get
			{
				if ((this.serializing 
							&& (this._EmployeeFunctions.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._EmployeeFunctions;
			}
			set
			{
				this._EmployeeFunctions.Assign(value);
			}
		}
		
		[Association(Name="Company_EmployeeFunctionHistory", Storage="_EmployeeFunctionHistories", ThisKey="CompanyId", OtherKey="CompanyId")]
		[DataMember(Order=53, EmitDefaultValue=false)]
		public EntitySet<EmployeeFunctionHistory> EmployeeFunctionHistories
		{
			get
			{
				if ((this.serializing 
							&& (this._EmployeeFunctionHistories.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._EmployeeFunctionHistories;
			}
			set
			{
				this._EmployeeFunctionHistories.Assign(value);
			}
		}
		
		[Association(Name="Company_ExpenditureAuthorization", Storage="_ExpenditureAuthorizations", ThisKey="CompanyId", OtherKey="CompanyId")]
		[DataMember(Order=54, EmitDefaultValue=false)]
		public EntitySet<ExpenditureAuthorization> ExpenditureAuthorizations
		{
			get
			{
				if ((this.serializing 
							&& (this._ExpenditureAuthorizations.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ExpenditureAuthorizations;
			}
			set
			{
				this._ExpenditureAuthorizations.Assign(value);
			}
		}
		
		[Association(Name="Company_FinancierCondition", Storage="_FinancierConditions", ThisKey="CompanyId", OtherKey="CompanyId")]
		[DataMember(Order=55, EmitDefaultValue=false)]
		public EntitySet<FinancierCondition> FinancierConditions
		{
			get
			{
				if ((this.serializing 
							&& (this._FinancierConditions.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._FinancierConditions;
			}
			set
			{
				this._FinancierConditions.Assign(value);
			}
		}
		
		[Association(Name="Company_FinancierOperation", Storage="_FinancierOperations", ThisKey="CompanyId", OtherKey="CompanyId")]
		[DataMember(Order=56, EmitDefaultValue=false)]
		public EntitySet<FinancierOperation> FinancierOperations
		{
			get
			{
				if ((this.serializing 
							&& (this._FinancierOperations.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._FinancierOperations;
			}
			set
			{
				this._FinancierOperations.Assign(value);
			}
		}
		
		[Association(Name="Company_Inventory", Storage="_Inventories", ThisKey="CompanyId", OtherKey="CompanyId")]
		[DataMember(Order=57, EmitDefaultValue=false)]
		public EntitySet<Inventory> Inventories
		{
			get
			{
				if ((this.serializing 
							&& (this._Inventories.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Inventories;
			}
			set
			{
				this._Inventories.Assign(value);
			}
		}
		
		[Association(Name="Company_InventoryHistory", Storage="_InventoryHistories", ThisKey="CompanyId", OtherKey="CompanyId")]
		[DataMember(Order=58, EmitDefaultValue=false)]
		public EntitySet<InventoryHistory> InventoryHistories
		{
			get
			{
				if ((this.serializing 
							&& (this._InventoryHistories.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._InventoryHistories;
			}
			set
			{
				this._InventoryHistories.Assign(value);
			}
		}
		
		[Association(Name="Company_InventoryMoviment", Storage="_InventoryMoviments", ThisKey="CompanyId", OtherKey="CompanyDestinationId")]
		[DataMember(Order=59, EmitDefaultValue=false)]
		public EntitySet<InventoryMoviment> InventoryMoviments
		{
			get
			{
				if ((this.serializing 
							&& (this._InventoryMoviments.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._InventoryMoviments;
			}
			set
			{
				this._InventoryMoviments.Assign(value);
			}
		}
		
		[Association(Name="Company_InventoryMoviment1", Storage="_InventoryMoviments1", ThisKey="CompanyId", OtherKey="CompanyId")]
		[DataMember(Order=60, EmitDefaultValue=false)]
		public EntitySet<InventoryMoviment> InventoryMoviments1
		{
			get
			{
				if ((this.serializing 
							&& (this._InventoryMoviments1.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._InventoryMoviments1;
			}
			set
			{
				this._InventoryMoviments1.Assign(value);
			}
		}
		
		[Association(Name="Company_InventoryRMA", Storage="_InventoryRMAs", ThisKey="CompanyId", OtherKey="CompanyId")]
		[DataMember(Order=61, EmitDefaultValue=false)]
		public EntitySet<InventoryRMA> InventoryRMAs
		{
			get
			{
				if ((this.serializing 
							&& (this._InventoryRMAs.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._InventoryRMAs;
			}
			set
			{
				this._InventoryRMAs.Assign(value);
			}
		}
		
		[Association(Name="Company_Invoice", Storage="_Invoices", ThisKey="CompanyId", OtherKey="CompanyId")]
		[DataMember(Order=62, EmitDefaultValue=false)]
		public EntitySet<Invoice> Invoices
		{
			get
			{
				if ((this.serializing 
							&& (this._Invoices.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Invoices;
			}
			set
			{
				this._Invoices.Assign(value);
			}
		}
		
		[Association(Name="Company_OrganizationLevel", Storage="_OrganizationLevels", ThisKey="CompanyId", OtherKey="CompanyId")]
		[DataMember(Order=63, EmitDefaultValue=false)]
		public EntitySet<OrganizationLevel> OrganizationLevels
		{
			get
			{
				if ((this.serializing 
							&& (this._OrganizationLevels.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._OrganizationLevels;
			}
			set
			{
				this._OrganizationLevels.Assign(value);
			}
		}
		
		[Association(Name="Company_OtherSchool", Storage="_OtherSchools", ThisKey="CompanyId", OtherKey="CompanyId")]
		[DataMember(Order=64, EmitDefaultValue=false)]
		public EntitySet<OtherSchool> OtherSchools
		{
			get
			{
				if ((this.serializing 
							&& (this._OtherSchools.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._OtherSchools;
			}
			set
			{
				this._OtherSchools.Assign(value);
			}
		}
		
		[Association(Name="Company_PackageAdditional", Storage="_PackageAdditionals", ThisKey="CompanyId", OtherKey="CompanyId")]
		[DataMember(Order=65, EmitDefaultValue=false)]
		public EntitySet<PackageAdditional> PackageAdditionals
		{
			get
			{
				if ((this.serializing 
							&& (this._PackageAdditionals.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._PackageAdditionals;
			}
			set
			{
				this._PackageAdditionals.Assign(value);
			}
		}
		
		[Association(Name="Company_Parcel", Storage="_Parcels", ThisKey="CompanyId", OtherKey="CompanyId")]
		[DataMember(Order=66, EmitDefaultValue=false)]
		public EntitySet<Parcel> Parcels
		{
			get
			{
				if ((this.serializing 
							&& (this._Parcels.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Parcels;
			}
			set
			{
				this._Parcels.Assign(value);
			}
		}
		
		[Association(Name="Company_Permission", Storage="_Permissions", ThisKey="CompanyId", OtherKey="CompanyId")]
		[DataMember(Order=67, EmitDefaultValue=false)]
		public EntitySet<Permission> Permissions
		{
			get
			{
				if ((this.serializing 
							&& (this._Permissions.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Permissions;
			}
			set
			{
				this._Permissions.Assign(value);
			}
		}
		
		[Association(Name="Company_Post", Storage="_Posts", ThisKey="CompanyId", OtherKey="CompanyId")]
		[DataMember(Order=68, EmitDefaultValue=false)]
		public EntitySet<Post> Posts
		{
			get
			{
				if ((this.serializing 
							&& (this._Posts.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Posts;
			}
			set
			{
				this._Posts.Assign(value);
			}
		}
		
		[Association(Name="Company_Post1", Storage="_Posts1", ThisKey="CompanyId", OtherKey="CompanyId")]
		[DataMember(Order=69, EmitDefaultValue=false)]
		public EntitySet<Post> Posts1
		{
			get
			{
				if ((this.serializing 
							&& (this._Posts1.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Posts1;
			}
			set
			{
				this._Posts1.Assign(value);
			}
		}
		
		[Association(Name="Company_Product", Storage="_Products", ThisKey="CompanyId", OtherKey="CompanyId")]
		[DataMember(Order=70, EmitDefaultValue=false)]
		public EntitySet<Product> Products
		{
			get
			{
				if ((this.serializing 
							&& (this._Products.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		[Association(Name="Company_PurchaseOrder", Storage="_PurchaseOrders", ThisKey="CompanyId", OtherKey="CompanyId")]
		[DataMember(Order=71, EmitDefaultValue=false)]
		public EntitySet<PurchaseOrder> PurchaseOrders
		{
			get
			{
				if ((this.serializing 
							&& (this._PurchaseOrders.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._PurchaseOrders;
			}
			set
			{
				this._PurchaseOrders.Assign(value);
			}
		}
		
		[Association(Name="Company_PurchaseRequest", Storage="_PurchaseRequests", ThisKey="CompanyId", OtherKey="CompanyId")]
		[DataMember(Order=72, EmitDefaultValue=false)]
		public EntitySet<PurchaseRequest> PurchaseRequests
		{
			get
			{
				if ((this.serializing 
							&& (this._PurchaseRequests.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._PurchaseRequests;
			}
			set
			{
				this._PurchaseRequests.Assign(value);
			}
		}
		
		[Association(Name="Company_Quotation", Storage="_Quotations", ThisKey="CompanyId", OtherKey="CompanyId")]
		[DataMember(Order=73, EmitDefaultValue=false)]
		public EntitySet<Quotation> Quotations
		{
			get
			{
				if ((this.serializing 
							&& (this._Quotations.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Quotations;
			}
			set
			{
				this._Quotations.Assign(value);
			}
		}
		
		[Association(Name="Company_Receipt", Storage="_Receipts", ThisKey="CompanyId", OtherKey="CompanyId")]
		[DataMember(Order=74, EmitDefaultValue=false)]
		public EntitySet<Receipt> Receipts
		{
			get
			{
				if ((this.serializing 
							&& (this._Receipts.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Receipts;
			}
			set
			{
				this._Receipts.Assign(value);
			}
		}
		
		[Association(Name="Company_ReceiptFieldConfiguration", Storage="_ReceiptFieldConfigurations", ThisKey="CompanyId", OtherKey="CompanyId")]
		[DataMember(Order=75, EmitDefaultValue=false)]
		public EntitySet<ReceiptFieldConfiguration> ReceiptFieldConfigurations
		{
			get
			{
				if ((this.serializing 
							&& (this._ReceiptFieldConfigurations.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ReceiptFieldConfigurations;
			}
			set
			{
				this._ReceiptFieldConfigurations.Assign(value);
			}
		}
		
		[Association(Name="Company_Representant", Storage="_Representants", ThisKey="CompanyId", OtherKey="CompanyId")]
		[DataMember(Order=76, EmitDefaultValue=false)]
		public EntitySet<Representant> Representants
		{
			get
			{
				if ((this.serializing 
							&& (this._Representants.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Representants;
			}
			set
			{
				this._Representants.Assign(value);
			}
		}
		
		[Association(Name="Company_Role", Storage="_Roles", ThisKey="CompanyId", OtherKey="CompanyId")]
		[DataMember(Order=77, EmitDefaultValue=false)]
		public EntitySet<Role> Roles
		{
			get
			{
				if ((this.serializing 
							&& (this._Roles.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Roles;
			}
			set
			{
				this._Roles.Assign(value);
			}
		}
		
		[Association(Name="Company_Sale", Storage="_Sales", ThisKey="CompanyId", OtherKey="CompanyId")]
		[DataMember(Order=78, EmitDefaultValue=false)]
		public EntitySet<Sale> Sales
		{
			get
			{
				if ((this.serializing 
							&& (this._Sales.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Sales;
			}
			set
			{
				this._Sales.Assign(value);
			}
		}
		
		[Association(Name="Company_Service", Storage="_Services", ThisKey="CompanyId", OtherKey="CompanyId")]
		[DataMember(Order=79, EmitDefaultValue=false)]
		public EntitySet<Service> Services
		{
			get
			{
				if ((this.serializing 
							&& (this._Services.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Services;
			}
			set
			{
				this._Services.Assign(value);
			}
		}
		
		[Association(Name="Company_ServiceOrder", Storage="_ServiceOrders", ThisKey="CompanyId", OtherKey="CompanyId")]
		[DataMember(Order=80, EmitDefaultValue=false)]
		public EntitySet<ServiceOrder> ServiceOrders
		{
			get
			{
				if ((this.serializing 
							&& (this._ServiceOrders.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ServiceOrders;
			}
			set
			{
				this._ServiceOrders.Assign(value);
			}
		}
		
		[Association(Name="Company_ServiceOrderBook", Storage="_ServiceOrderBooks", ThisKey="CompanyId", OtherKey="CompanyId")]
		[DataMember(Order=81, EmitDefaultValue=false)]
		public EntitySet<ServiceOrderBook> ServiceOrderBooks
		{
			get
			{
				if ((this.serializing 
							&& (this._ServiceOrderBooks.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ServiceOrderBooks;
			}
			set
			{
				this._ServiceOrderBooks.Assign(value);
			}
		}
		
		[Association(Name="Company_ServiceOrderEquipmentDamage", Storage="_ServiceOrderEquipmentDamages", ThisKey="CompanyId", OtherKey="CompanyId")]
		[DataMember(Order=82, EmitDefaultValue=false)]
		public EntitySet<ServiceOrderEquipmentDamage> ServiceOrderEquipmentDamages
		{
			get
			{
				if ((this.serializing 
							&& (this._ServiceOrderEquipmentDamages.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ServiceOrderEquipmentDamages;
			}
			set
			{
				this._ServiceOrderEquipmentDamages.Assign(value);
			}
		}
		
		[Association(Name="Company_ServiceOrderHaltType", Storage="_ServiceOrderHaltTypes", ThisKey="CompanyId", OtherKey="CompanyId")]
		[DataMember(Order=83, EmitDefaultValue=false)]
		public EntitySet<ServiceOrderHaltType> ServiceOrderHaltTypes
		{
			get
			{
				if ((this.serializing 
							&& (this._ServiceOrderHaltTypes.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ServiceOrderHaltTypes;
			}
			set
			{
				this._ServiceOrderHaltTypes.Assign(value);
			}
		}
		
		[Association(Name="Company_ServiceOrderInstallType", Storage="_ServiceOrderInstallTypes", ThisKey="CompanyId", OtherKey="CompanyId")]
		[DataMember(Order=84, EmitDefaultValue=false)]
		public EntitySet<ServiceOrderInstallType> ServiceOrderInstallTypes
		{
			get
			{
				if ((this.serializing 
							&& (this._ServiceOrderInstallTypes.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ServiceOrderInstallTypes;
			}
			set
			{
				this._ServiceOrderInstallTypes.Assign(value);
			}
		}
		
		[Association(Name="Company_ServiceOrderProductDamage", Storage="_ServiceOrderProductDamages", ThisKey="CompanyId", OtherKey="CompanyId")]
		[DataMember(Order=85, EmitDefaultValue=false)]
		public EntitySet<ServiceOrderProductDamage> ServiceOrderProductDamages
		{
			get
			{
				if ((this.serializing 
							&& (this._ServiceOrderProductDamages.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ServiceOrderProductDamages;
			}
			set
			{
				this._ServiceOrderProductDamages.Assign(value);
			}
		}
		
		[Association(Name="Company_ServiceOrderProductType", Storage="_ServiceOrderProductTypes", ThisKey="CompanyId", OtherKey="CompanyId")]
		[DataMember(Order=86, EmitDefaultValue=false)]
		public EntitySet<ServiceOrderProductType> ServiceOrderProductTypes
		{
			get
			{
				if ((this.serializing 
							&& (this._ServiceOrderProductTypes.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ServiceOrderProductTypes;
			}
			set
			{
				this._ServiceOrderProductTypes.Assign(value);
			}
		}
		
		[Association(Name="Company_ServiceOrderTest", Storage="_ServiceOrderTests", ThisKey="CompanyId", OtherKey="CompanyId")]
		[DataMember(Order=87, EmitDefaultValue=false)]
		public EntitySet<ServiceOrderTest> ServiceOrderTests
		{
			get
			{
				if ((this.serializing 
							&& (this._ServiceOrderTests.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ServiceOrderTests;
			}
			set
			{
				this._ServiceOrderTests.Assign(value);
			}
		}
		
		[Association(Name="Company_ServiceOrderType", Storage="_ServiceOrderTypes", ThisKey="CompanyId", OtherKey="CompanyId")]
		[DataMember(Order=88, EmitDefaultValue=false)]
		public EntitySet<ServiceOrderType> ServiceOrderTypes
		{
			get
			{
				if ((this.serializing 
							&& (this._ServiceOrderTypes.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ServiceOrderTypes;
			}
			set
			{
				this._ServiceOrderTypes.Assign(value);
			}
		}
		
		[Association(Name="Company_ServiceType", Storage="_ServiceTypes", ThisKey="CompanyId", OtherKey="CompanyId")]
		[DataMember(Order=89, EmitDefaultValue=false)]
		public EntitySet<ServiceType> ServiceTypes
		{
			get
			{
				if ((this.serializing 
							&& (this._ServiceTypes.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ServiceTypes;
			}
			set
			{
				this._ServiceTypes.Assign(value);
			}
		}
		
		[Association(Name="Company_Statement", Storage="_Statements", ThisKey="CompanyId", OtherKey="CompanyId")]
		[DataMember(Order=90, EmitDefaultValue=false)]
		public EntitySet<Statement> Statements
		{
			get
			{
				if ((this.serializing 
							&& (this._Statements.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Statements;
			}
			set
			{
				this._Statements.Assign(value);
			}
		}
		
		[Association(Name="Company_StatusHistory", Storage="_StatusHistories", ThisKey="CompanyId", OtherKey="CompanyId")]
		[DataMember(Order=91, EmitDefaultValue=false)]
		public EntitySet<StatusHistory> StatusHistories
		{
			get
			{
				if ((this.serializing 
							&& (this._StatusHistories.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._StatusHistories;
			}
			set
			{
				this._StatusHistories.Assign(value);
			}
		}
		
		[Association(Name="Company_Supplier", Storage="_Suppliers", ThisKey="CompanyId", OtherKey="CompanyId")]
		[DataMember(Order=92, EmitDefaultValue=false)]
		public EntitySet<Supplier> Suppliers
		{
			get
			{
				if ((this.serializing 
							&& (this._Suppliers.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Suppliers;
			}
			set
			{
				this._Suppliers.Assign(value);
			}
		}
		
		[Association(Name="Company_SupplierCategory", Storage="_SupplierCategories", ThisKey="CompanyId", OtherKey="CompanyId")]
		[DataMember(Order=93, EmitDefaultValue=false)]
		public EntitySet<SupplierCategory> SupplierCategories
		{
			get
			{
				if ((this.serializing 
							&& (this._SupplierCategories.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._SupplierCategories;
			}
			set
			{
				this._SupplierCategories.Assign(value);
			}
		}
		
		[Association(Name="Company_Transporter", Storage="_Transporters", ThisKey="CompanyId", OtherKey="CompanyId")]
		[DataMember(Order=94, EmitDefaultValue=false)]
		public EntitySet<Transporter> Transporters
		{
			get
			{
				if ((this.serializing 
							&& (this._Transporters.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Transporters;
			}
			set
			{
				this._Transporters.Assign(value);
			}
		}
		
		[Association(Name="Company_WebPage", Storage="_WebPages", ThisKey="CompanyId", OtherKey="CompanyId")]
		[DataMember(Order=95, EmitDefaultValue=false)]
		public EntitySet<WebPage> WebPages
		{
			get
			{
				if ((this.serializing 
							&& (this._WebPages.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._WebPages;
			}
			set
			{
				this._WebPages.Assign(value);
			}
		}
		
		[Association(Name="Cnae_Company", Storage="_Cnae", ThisKey="CnaeId", OtherKey="CnaeId", IsForeignKey=true)]
		public Cnae Cnae
		{
			get
			{
				return this._Cnae.Entity;
			}
			set
			{
				Cnae previousValue = this._Cnae.Entity;
				if (((previousValue != value) 
							|| (this._Cnae.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Cnae.Entity = null;
						previousValue.Companies.Remove(this);
					}
					this._Cnae.Entity = value;
					if ((value != null))
					{
						value.Companies.Add(this);
						this._CnaeId = value.CnaeId;
					}
					else
					{
						this._CnaeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Cnae");
				}
			}
		}
		
		[Association(Name="CompanyConfiguration_Company", Storage="_CompanyConfiguration", ThisKey="CompanyConfigurationId", OtherKey="CompanyConfigurationId", IsForeignKey=true)]
		public CompanyConfiguration CompanyConfiguration
		{
			get
			{
				return this._CompanyConfiguration.Entity;
			}
			set
			{
				CompanyConfiguration previousValue = this._CompanyConfiguration.Entity;
				if (((previousValue != value) 
							|| (this._CompanyConfiguration.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CompanyConfiguration.Entity = null;
						previousValue.Companies.Remove(this);
					}
					this._CompanyConfiguration.Entity = value;
					if ((value != null))
					{
						value.Companies.Add(this);
						this._CompanyConfigurationId = value.CompanyConfigurationId;
					}
					else
					{
						this._CompanyConfigurationId = default(Nullable<int>);
					}
					this.SendPropertyChanged("CompanyConfiguration");
				}
			}
		}
		
		[Association(Name="JudicialNature_Company", Storage="_JudicialNature", ThisKey="JudicialNatureId", OtherKey="JudicialNatureId", IsForeignKey=true)]
		public JudicialNature JudicialNature
		{
			get
			{
				return this._JudicialNature.Entity;
			}
			set
			{
				JudicialNature previousValue = this._JudicialNature.Entity;
				if (((previousValue != value) 
							|| (this._JudicialNature.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._JudicialNature.Entity = null;
						previousValue.Companies.Remove(this);
					}
					this._JudicialNature.Entity = value;
					if ((value != null))
					{
						value.Companies.Add(this);
						this._JudicialNatureId = value.JudicialNatureId;
					}
					else
					{
						this._JudicialNatureId = default(Nullable<int>);
					}
					this.SendPropertyChanged("JudicialNature");
				}
			}
		}
		
		[Association(Name="LegalEntityProfile_Company", Storage="_LegalEntityProfile", ThisKey="LegalEntityProfileId", OtherKey="LegalEntityProfileId", IsForeignKey=true)]
		public LegalEntityProfile LegalEntityProfile
		{
			get
			{
				return this._LegalEntityProfile.Entity;
			}
			set
			{
				LegalEntityProfile previousValue = this._LegalEntityProfile.Entity;
				if (((previousValue != value) 
							|| (this._LegalEntityProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LegalEntityProfile.Entity = null;
						previousValue.Companies.Remove(this);
					}
					this._LegalEntityProfile.Entity = value;
					if ((value != null))
					{
						value.Companies.Add(this);
						this._LegalEntityProfileId = value.LegalEntityProfileId;
					}
					else
					{
						this._LegalEntityProfileId = default(int);
					}
					this.SendPropertyChanged("LegalEntityProfile");
				}
			}
		}
		
		[Association(Name="Plan_Company", Storage="_Plan", ThisKey="PlanId", OtherKey="PlanId", IsForeignKey=true)]
		public Plan Plan
		{
			get
			{
				return this._Plan.Entity;
			}
			set
			{
				Plan previousValue = this._Plan.Entity;
				if (((previousValue != value) 
							|| (this._Plan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Plan.Entity = null;
						previousValue.Companies.Remove(this);
					}
					this._Plan.Entity = value;
					if ((value != null))
					{
						value.Companies.Add(this);
						this._PlanId = value.PlanId;
					}
					else
					{
						this._PlanId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Plan");
				}
			}
		}
		
		[Association(Name="ProfitAssessment_Company", Storage="_ProfitAssessment", ThisKey="ProfitAssessmentId", OtherKey="ProfitAssessmentId", IsForeignKey=true)]
		public ProfitAssessment ProfitAssessment
		{
			get
			{
				return this._ProfitAssessment.Entity;
			}
			set
			{
				ProfitAssessment previousValue = this._ProfitAssessment.Entity;
				if (((previousValue != value) 
							|| (this._ProfitAssessment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProfitAssessment.Entity = null;
						previousValue.Companies.Remove(this);
					}
					this._ProfitAssessment.Entity = value;
					if ((value != null))
					{
						value.Companies.Add(this);
						this._ProfitAssessmentId = value.ProfitAssessmentId;
					}
					else
					{
						this._ProfitAssessmentId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProfitAssessment");
				}
			}
		}
		
		[Association(Name="User_Company", Storage="_User", ThisKey="CreatorUserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Companies.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Companies.Add(this);
						this._CreatorUserId = value.UserId;
					}
					else
					{
						this._CreatorUserId = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_AccountingPlans(AccountingPlan entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_AccountingPlans(AccountingPlan entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_AdditionalInformations(AdditionalInformation entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_AdditionalInformations(AdditionalInformation entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_AdditionalInformationDatas(AdditionalInformationData entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_AdditionalInformationDatas(AdditionalInformationData entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_Bills(Bill entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Bills(Bill entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_Budgets(Budget entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Budgets(Budget entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_Categories(Category entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Categories(Category entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_CompanyUsers(CompanyUser entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_CompanyUsers(CompanyUser entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_Contacts(Contact entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Contacts(Contact entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_Contracts(Contract entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Contracts(Contract entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_ContractPendencies(ContractPendency entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_ContractPendencies(ContractPendency entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_ContractTypes(ContractType entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_ContractTypes(ContractType entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_CostCenters(CostCenter entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_CostCenters(CostCenter entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_CostCenters1(CostCenter entity)
		{
			this.SendPropertyChanging();
			entity.Company1 = this;
		}
		
		private void detach_CostCenters1(CostCenter entity)
		{
			this.SendPropertyChanging();
			entity.Company1 = null;
		}
		
		private void attach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_CustomerCalls(CustomerCall entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_CustomerCalls(CustomerCall entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_CustomerContacts(CustomerContact entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_CustomerContacts(CustomerContact entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_CustomerFollowupActions(CustomerFollowupAction entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_CustomerFollowupActions(CustomerFollowupAction entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_CustomerTypes(CustomerType entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_CustomerTypes(CustomerType entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_CustomFunctions(CustomFunction entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_CustomFunctions(CustomFunction entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_Deposits(Deposit entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Deposits(Deposit entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_DocumentTemplates(DocumentTemplate entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_DocumentTemplates(DocumentTemplate entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_DropPayouts(DropPayout entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_DropPayouts(DropPayout entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_EmployeeAdditionalInformations(EmployeeAdditionalInformation entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_EmployeeAdditionalInformations(EmployeeAdditionalInformation entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_EmployeeFunctions(EmployeeFunction entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_EmployeeFunctions(EmployeeFunction entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_EmployeeFunctionHistories(EmployeeFunctionHistory entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_EmployeeFunctionHistories(EmployeeFunctionHistory entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_ExpenditureAuthorizations(ExpenditureAuthorization entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_ExpenditureAuthorizations(ExpenditureAuthorization entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_FinancierConditions(FinancierCondition entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_FinancierConditions(FinancierCondition entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_FinancierOperations(FinancierOperation entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_FinancierOperations(FinancierOperation entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_Inventories(Inventory entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Inventories(Inventory entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_InventoryHistories(InventoryHistory entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_InventoryHistories(InventoryHistory entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_InventoryMoviments(InventoryMoviment entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_InventoryMoviments(InventoryMoviment entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_InventoryMoviments1(InventoryMoviment entity)
		{
			this.SendPropertyChanging();
			entity.Company1 = this;
		}
		
		private void detach_InventoryMoviments1(InventoryMoviment entity)
		{
			this.SendPropertyChanging();
			entity.Company1 = null;
		}
		
		private void attach_InventoryRMAs(InventoryRMA entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_InventoryRMAs(InventoryRMA entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_OrganizationLevels(OrganizationLevel entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_OrganizationLevels(OrganizationLevel entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_OtherSchools(OtherSchool entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_OtherSchools(OtherSchool entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_PackageAdditionals(PackageAdditional entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_PackageAdditionals(PackageAdditional entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_Parcels(Parcel entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Parcels(Parcel entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_Permissions(Permission entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Permissions(Permission entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_Posts(Post entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Posts(Post entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_Posts1(Post entity)
		{
			this.SendPropertyChanging();
			entity.Company1 = this;
		}
		
		private void detach_Posts1(Post entity)
		{
			this.SendPropertyChanging();
			entity.Company1 = null;
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_PurchaseOrders(PurchaseOrder entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_PurchaseOrders(PurchaseOrder entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_PurchaseRequests(PurchaseRequest entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_PurchaseRequests(PurchaseRequest entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_Quotations(Quotation entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Quotations(Quotation entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_Receipts(Receipt entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Receipts(Receipt entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_ReceiptFieldConfigurations(ReceiptFieldConfiguration entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_ReceiptFieldConfigurations(ReceiptFieldConfiguration entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_Representants(Representant entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Representants(Representant entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_Roles(Role entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Roles(Role entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_Sales(Sale entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Sales(Sale entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_Services(Service entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Services(Service entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_ServiceOrders(ServiceOrder entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_ServiceOrders(ServiceOrder entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_ServiceOrderBooks(ServiceOrderBook entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_ServiceOrderBooks(ServiceOrderBook entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_ServiceOrderEquipmentDamages(ServiceOrderEquipmentDamage entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_ServiceOrderEquipmentDamages(ServiceOrderEquipmentDamage entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_ServiceOrderHaltTypes(ServiceOrderHaltType entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_ServiceOrderHaltTypes(ServiceOrderHaltType entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_ServiceOrderInstallTypes(ServiceOrderInstallType entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_ServiceOrderInstallTypes(ServiceOrderInstallType entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_ServiceOrderProductDamages(ServiceOrderProductDamage entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_ServiceOrderProductDamages(ServiceOrderProductDamage entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_ServiceOrderProductTypes(ServiceOrderProductType entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_ServiceOrderProductTypes(ServiceOrderProductType entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_ServiceOrderTests(ServiceOrderTest entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_ServiceOrderTests(ServiceOrderTest entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_ServiceOrderTypes(ServiceOrderType entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_ServiceOrderTypes(ServiceOrderType entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_ServiceTypes(ServiceType entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_ServiceTypes(ServiceType entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_Statements(Statement entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Statements(Statement entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_StatusHistories(StatusHistory entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_StatusHistories(StatusHistory entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_Suppliers(Supplier entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Suppliers(Supplier entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_SupplierCategories(SupplierCategory entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_SupplierCategories(SupplierCategory entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_Transporters(Transporter entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Transporters(Transporter entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_WebPages(WebPage entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_WebPages(WebPage entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void Initialize()
		{
			this._Accounts = new EntitySet<Account>(new Action<Account>(this.attach_Accounts), new Action<Account>(this.detach_Accounts));
			this._AccountingPlans = new EntitySet<AccountingPlan>(new Action<AccountingPlan>(this.attach_AccountingPlans), new Action<AccountingPlan>(this.detach_AccountingPlans));
			this._AdditionalInformations = new EntitySet<AdditionalInformation>(new Action<AdditionalInformation>(this.attach_AdditionalInformations), new Action<AdditionalInformation>(this.detach_AdditionalInformations));
			this._AdditionalInformationDatas = new EntitySet<AdditionalInformationData>(new Action<AdditionalInformationData>(this.attach_AdditionalInformationDatas), new Action<AdditionalInformationData>(this.detach_AdditionalInformationDatas));
			this._Bills = new EntitySet<Bill>(new Action<Bill>(this.attach_Bills), new Action<Bill>(this.detach_Bills));
			this._Budgets = new EntitySet<Budget>(new Action<Budget>(this.attach_Budgets), new Action<Budget>(this.detach_Budgets));
			this._Categories = new EntitySet<Category>(new Action<Category>(this.attach_Categories), new Action<Category>(this.detach_Categories));
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			this._CompanyUsers = new EntitySet<CompanyUser>(new Action<CompanyUser>(this.attach_CompanyUsers), new Action<CompanyUser>(this.detach_CompanyUsers));
			this._Contacts = new EntitySet<Contact>(new Action<Contact>(this.attach_Contacts), new Action<Contact>(this.detach_Contacts));
			this._Contracts = new EntitySet<Contract>(new Action<Contract>(this.attach_Contracts), new Action<Contract>(this.detach_Contracts));
			this._ContractPendencies = new EntitySet<ContractPendency>(new Action<ContractPendency>(this.attach_ContractPendencies), new Action<ContractPendency>(this.detach_ContractPendencies));
			this._ContractTypes = new EntitySet<ContractType>(new Action<ContractType>(this.attach_ContractTypes), new Action<ContractType>(this.detach_ContractTypes));
			this._CostCenters = new EntitySet<CostCenter>(new Action<CostCenter>(this.attach_CostCenters), new Action<CostCenter>(this.detach_CostCenters));
			this._CostCenters1 = new EntitySet<CostCenter>(new Action<CostCenter>(this.attach_CostCenters1), new Action<CostCenter>(this.detach_CostCenters1));
			this._Customers = new EntitySet<Customer>(new Action<Customer>(this.attach_Customers), new Action<Customer>(this.detach_Customers));
			this._CustomerCalls = new EntitySet<CustomerCall>(new Action<CustomerCall>(this.attach_CustomerCalls), new Action<CustomerCall>(this.detach_CustomerCalls));
			this._CustomerContacts = new EntitySet<CustomerContact>(new Action<CustomerContact>(this.attach_CustomerContacts), new Action<CustomerContact>(this.detach_CustomerContacts));
			this._CustomerFollowupActions = new EntitySet<CustomerFollowupAction>(new Action<CustomerFollowupAction>(this.attach_CustomerFollowupActions), new Action<CustomerFollowupAction>(this.detach_CustomerFollowupActions));
			this._CustomerTypes = new EntitySet<CustomerType>(new Action<CustomerType>(this.attach_CustomerTypes), new Action<CustomerType>(this.detach_CustomerTypes));
			this._CustomFunctions = new EntitySet<CustomFunction>(new Action<CustomFunction>(this.attach_CustomFunctions), new Action<CustomFunction>(this.detach_CustomFunctions));
			this._Deposits = new EntitySet<Deposit>(new Action<Deposit>(this.attach_Deposits), new Action<Deposit>(this.detach_Deposits));
			this._DocumentTemplates = new EntitySet<DocumentTemplate>(new Action<DocumentTemplate>(this.attach_DocumentTemplates), new Action<DocumentTemplate>(this.detach_DocumentTemplates));
			this._DropPayouts = new EntitySet<DropPayout>(new Action<DropPayout>(this.attach_DropPayouts), new Action<DropPayout>(this.detach_DropPayouts));
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			this._EmployeeAdditionalInformations = new EntitySet<EmployeeAdditionalInformation>(new Action<EmployeeAdditionalInformation>(this.attach_EmployeeAdditionalInformations), new Action<EmployeeAdditionalInformation>(this.detach_EmployeeAdditionalInformations));
			this._EmployeeFunctions = new EntitySet<EmployeeFunction>(new Action<EmployeeFunction>(this.attach_EmployeeFunctions), new Action<EmployeeFunction>(this.detach_EmployeeFunctions));
			this._EmployeeFunctionHistories = new EntitySet<EmployeeFunctionHistory>(new Action<EmployeeFunctionHistory>(this.attach_EmployeeFunctionHistories), new Action<EmployeeFunctionHistory>(this.detach_EmployeeFunctionHistories));
			this._ExpenditureAuthorizations = new EntitySet<ExpenditureAuthorization>(new Action<ExpenditureAuthorization>(this.attach_ExpenditureAuthorizations), new Action<ExpenditureAuthorization>(this.detach_ExpenditureAuthorizations));
			this._FinancierConditions = new EntitySet<FinancierCondition>(new Action<FinancierCondition>(this.attach_FinancierConditions), new Action<FinancierCondition>(this.detach_FinancierConditions));
			this._FinancierOperations = new EntitySet<FinancierOperation>(new Action<FinancierOperation>(this.attach_FinancierOperations), new Action<FinancierOperation>(this.detach_FinancierOperations));
			this._Inventories = new EntitySet<Inventory>(new Action<Inventory>(this.attach_Inventories), new Action<Inventory>(this.detach_Inventories));
			this._InventoryHistories = new EntitySet<InventoryHistory>(new Action<InventoryHistory>(this.attach_InventoryHistories), new Action<InventoryHistory>(this.detach_InventoryHistories));
			this._InventoryMoviments = new EntitySet<InventoryMoviment>(new Action<InventoryMoviment>(this.attach_InventoryMoviments), new Action<InventoryMoviment>(this.detach_InventoryMoviments));
			this._InventoryMoviments1 = new EntitySet<InventoryMoviment>(new Action<InventoryMoviment>(this.attach_InventoryMoviments1), new Action<InventoryMoviment>(this.detach_InventoryMoviments1));
			this._InventoryRMAs = new EntitySet<InventoryRMA>(new Action<InventoryRMA>(this.attach_InventoryRMAs), new Action<InventoryRMA>(this.detach_InventoryRMAs));
			this._Invoices = new EntitySet<Invoice>(new Action<Invoice>(this.attach_Invoices), new Action<Invoice>(this.detach_Invoices));
			this._OrganizationLevels = new EntitySet<OrganizationLevel>(new Action<OrganizationLevel>(this.attach_OrganizationLevels), new Action<OrganizationLevel>(this.detach_OrganizationLevels));
			this._OtherSchools = new EntitySet<OtherSchool>(new Action<OtherSchool>(this.attach_OtherSchools), new Action<OtherSchool>(this.detach_OtherSchools));
			this._PackageAdditionals = new EntitySet<PackageAdditional>(new Action<PackageAdditional>(this.attach_PackageAdditionals), new Action<PackageAdditional>(this.detach_PackageAdditionals));
			this._Parcels = new EntitySet<Parcel>(new Action<Parcel>(this.attach_Parcels), new Action<Parcel>(this.detach_Parcels));
			this._Permissions = new EntitySet<Permission>(new Action<Permission>(this.attach_Permissions), new Action<Permission>(this.detach_Permissions));
			this._Posts = new EntitySet<Post>(new Action<Post>(this.attach_Posts), new Action<Post>(this.detach_Posts));
			this._Posts1 = new EntitySet<Post>(new Action<Post>(this.attach_Posts1), new Action<Post>(this.detach_Posts1));
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			this._PurchaseOrders = new EntitySet<PurchaseOrder>(new Action<PurchaseOrder>(this.attach_PurchaseOrders), new Action<PurchaseOrder>(this.detach_PurchaseOrders));
			this._PurchaseRequests = new EntitySet<PurchaseRequest>(new Action<PurchaseRequest>(this.attach_PurchaseRequests), new Action<PurchaseRequest>(this.detach_PurchaseRequests));
			this._Quotations = new EntitySet<Quotation>(new Action<Quotation>(this.attach_Quotations), new Action<Quotation>(this.detach_Quotations));
			this._Receipts = new EntitySet<Receipt>(new Action<Receipt>(this.attach_Receipts), new Action<Receipt>(this.detach_Receipts));
			this._ReceiptFieldConfigurations = new EntitySet<ReceiptFieldConfiguration>(new Action<ReceiptFieldConfiguration>(this.attach_ReceiptFieldConfigurations), new Action<ReceiptFieldConfiguration>(this.detach_ReceiptFieldConfigurations));
			this._Representants = new EntitySet<Representant>(new Action<Representant>(this.attach_Representants), new Action<Representant>(this.detach_Representants));
			this._Roles = new EntitySet<Role>(new Action<Role>(this.attach_Roles), new Action<Role>(this.detach_Roles));
			this._Sales = new EntitySet<Sale>(new Action<Sale>(this.attach_Sales), new Action<Sale>(this.detach_Sales));
			this._Services = new EntitySet<Service>(new Action<Service>(this.attach_Services), new Action<Service>(this.detach_Services));
			this._ServiceOrders = new EntitySet<ServiceOrder>(new Action<ServiceOrder>(this.attach_ServiceOrders), new Action<ServiceOrder>(this.detach_ServiceOrders));
			this._ServiceOrderBooks = new EntitySet<ServiceOrderBook>(new Action<ServiceOrderBook>(this.attach_ServiceOrderBooks), new Action<ServiceOrderBook>(this.detach_ServiceOrderBooks));
			this._ServiceOrderEquipmentDamages = new EntitySet<ServiceOrderEquipmentDamage>(new Action<ServiceOrderEquipmentDamage>(this.attach_ServiceOrderEquipmentDamages), new Action<ServiceOrderEquipmentDamage>(this.detach_ServiceOrderEquipmentDamages));
			this._ServiceOrderHaltTypes = new EntitySet<ServiceOrderHaltType>(new Action<ServiceOrderHaltType>(this.attach_ServiceOrderHaltTypes), new Action<ServiceOrderHaltType>(this.detach_ServiceOrderHaltTypes));
			this._ServiceOrderInstallTypes = new EntitySet<ServiceOrderInstallType>(new Action<ServiceOrderInstallType>(this.attach_ServiceOrderInstallTypes), new Action<ServiceOrderInstallType>(this.detach_ServiceOrderInstallTypes));
			this._ServiceOrderProductDamages = new EntitySet<ServiceOrderProductDamage>(new Action<ServiceOrderProductDamage>(this.attach_ServiceOrderProductDamages), new Action<ServiceOrderProductDamage>(this.detach_ServiceOrderProductDamages));
			this._ServiceOrderProductTypes = new EntitySet<ServiceOrderProductType>(new Action<ServiceOrderProductType>(this.attach_ServiceOrderProductTypes), new Action<ServiceOrderProductType>(this.detach_ServiceOrderProductTypes));
			this._ServiceOrderTests = new EntitySet<ServiceOrderTest>(new Action<ServiceOrderTest>(this.attach_ServiceOrderTests), new Action<ServiceOrderTest>(this.detach_ServiceOrderTests));
			this._ServiceOrderTypes = new EntitySet<ServiceOrderType>(new Action<ServiceOrderType>(this.attach_ServiceOrderTypes), new Action<ServiceOrderType>(this.detach_ServiceOrderTypes));
			this._ServiceTypes = new EntitySet<ServiceType>(new Action<ServiceType>(this.attach_ServiceTypes), new Action<ServiceType>(this.detach_ServiceTypes));
			this._Statements = new EntitySet<Statement>(new Action<Statement>(this.attach_Statements), new Action<Statement>(this.detach_Statements));
			this._StatusHistories = new EntitySet<StatusHistory>(new Action<StatusHistory>(this.attach_StatusHistories), new Action<StatusHistory>(this.detach_StatusHistories));
			this._Suppliers = new EntitySet<Supplier>(new Action<Supplier>(this.attach_Suppliers), new Action<Supplier>(this.detach_Suppliers));
			this._SupplierCategories = new EntitySet<SupplierCategory>(new Action<SupplierCategory>(this.attach_SupplierCategories), new Action<SupplierCategory>(this.detach_SupplierCategories));
			this._Transporters = new EntitySet<Transporter>(new Action<Transporter>(this.attach_Transporters), new Action<Transporter>(this.detach_Transporters));
			this._WebPages = new EntitySet<WebPage>(new Action<WebPage>(this.attach_WebPages), new Action<WebPage>(this.detach_WebPages));
			this._Cnae = default(EntityRef<Cnae>);
			this._CompanyConfiguration = default(EntityRef<CompanyConfiguration>);
			this._JudicialNature = default(EntityRef<JudicialNature>);
			this._LegalEntityProfile = default(EntityRef<LegalEntityProfile>);
			this._Plan = default(EntityRef<Plan>);
			this._ProfitAssessment = default(EntityRef<ProfitAssessment>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.CompanyConfiguration")]
	[DataContract()]
	public partial class CompanyConfiguration : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CompanyConfigurationId;
		
		private System.Data.Linq.Binary _Logo;
		
		private string _ReportHeader;
		
		private string _ReportFooter;
		
		private string _ReportMarginTop;
		
		private string _ReportMargimBottom;
		
		private string _ReportMarginLeft;
		
		private string _ReportMarginRight;
		
		private string _WelcomeText;
		
		private string _PrinterFooter;
		
		private string _UnitPrice1Name;
		
		private string _UnitPrice2Name;
		
		private string _UnitPrice3Name;
		
		private string _UnitPrice4Name;
		
		private string _UnitPrice5Name;
		
		private string _ContractAdditionalValue1Name;
		
		private string _ContractAdditionalValue2Name;
		
		private string _ContractAdditionalValue3Name;
		
		private string _ContractAdditionalValue4Name;
		
		private string _ContractAdditionalValue5Name;
		
		private string _PurchaseOrderTemplate;
		
		private string _BudgetTemplate;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Company> _Companies;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyConfigurationIdChanging(int value);
    partial void OnCompanyConfigurationIdChanged();
    partial void OnLogoChanging(System.Data.Linq.Binary value);
    partial void OnLogoChanged();
    partial void OnReportHeaderChanging(string value);
    partial void OnReportHeaderChanged();
    partial void OnReportFooterChanging(string value);
    partial void OnReportFooterChanged();
    partial void OnReportMarginTopChanging(string value);
    partial void OnReportMarginTopChanged();
    partial void OnReportMargimBottomChanging(string value);
    partial void OnReportMargimBottomChanged();
    partial void OnReportMarginLeftChanging(string value);
    partial void OnReportMarginLeftChanged();
    partial void OnReportMarginRightChanging(string value);
    partial void OnReportMarginRightChanged();
    partial void OnWelcomeTextChanging(string value);
    partial void OnWelcomeTextChanged();
    partial void OnPrinterFooterChanging(string value);
    partial void OnPrinterFooterChanged();
    partial void OnUnitPrice1NameChanging(string value);
    partial void OnUnitPrice1NameChanged();
    partial void OnUnitPrice2NameChanging(string value);
    partial void OnUnitPrice2NameChanged();
    partial void OnUnitPrice3NameChanging(string value);
    partial void OnUnitPrice3NameChanged();
    partial void OnUnitPrice4NameChanging(string value);
    partial void OnUnitPrice4NameChanged();
    partial void OnUnitPrice5NameChanging(string value);
    partial void OnUnitPrice5NameChanged();
    partial void OnContractAdditionalValue1NameChanging(string value);
    partial void OnContractAdditionalValue1NameChanged();
    partial void OnContractAdditionalValue2NameChanging(string value);
    partial void OnContractAdditionalValue2NameChanged();
    partial void OnContractAdditionalValue3NameChanging(string value);
    partial void OnContractAdditionalValue3NameChanged();
    partial void OnContractAdditionalValue4NameChanging(string value);
    partial void OnContractAdditionalValue4NameChanged();
    partial void OnContractAdditionalValue5NameChanging(string value);
    partial void OnContractAdditionalValue5NameChanged();
    partial void OnPurchaseOrderTemplateChanging(string value);
    partial void OnPurchaseOrderTemplateChanged();
    partial void OnBudgetTemplateChanging(string value);
    partial void OnBudgetTemplateChanged();
    #endregion
		
		public CompanyConfiguration()
		{
			this.Initialize();
		}
		
		[Column(Storage="_CompanyConfigurationId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int CompanyConfigurationId
		{
			get
			{
				return this._CompanyConfigurationId;
			}
			set
			{
				if ((this._CompanyConfigurationId != value))
				{
					this.OnCompanyConfigurationIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyConfigurationId = value;
					this.SendPropertyChanged("CompanyConfigurationId");
					this.OnCompanyConfigurationIdChanged();
				}
			}
		}
		
		[Column(Storage="_Logo", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public System.Data.Linq.Binary Logo
		{
			get
			{
				return this._Logo;
			}
			set
			{
				if ((this._Logo != value))
				{
					this.OnLogoChanging(value);
					this.SendPropertyChanging();
					this._Logo = value;
					this.SendPropertyChanged("Logo");
					this.OnLogoChanged();
				}
			}
		}
		
		[Column(Storage="_ReportHeader", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=3)]
		public string ReportHeader
		{
			get
			{
				return this._ReportHeader;
			}
			set
			{
				if ((this._ReportHeader != value))
				{
					this.OnReportHeaderChanging(value);
					this.SendPropertyChanging();
					this._ReportHeader = value;
					this.SendPropertyChanged("ReportHeader");
					this.OnReportHeaderChanged();
				}
			}
		}
		
		[Column(Storage="_ReportFooter", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=4)]
		public string ReportFooter
		{
			get
			{
				return this._ReportFooter;
			}
			set
			{
				if ((this._ReportFooter != value))
				{
					this.OnReportFooterChanging(value);
					this.SendPropertyChanging();
					this._ReportFooter = value;
					this.SendPropertyChanged("ReportFooter");
					this.OnReportFooterChanged();
				}
			}
		}
		
		[Column(Storage="_ReportMarginTop", DbType="Char(18)")]
		[DataMember(Order=5)]
		public string ReportMarginTop
		{
			get
			{
				return this._ReportMarginTop;
			}
			set
			{
				if ((this._ReportMarginTop != value))
				{
					this.OnReportMarginTopChanging(value);
					this.SendPropertyChanging();
					this._ReportMarginTop = value;
					this.SendPropertyChanged("ReportMarginTop");
					this.OnReportMarginTopChanged();
				}
			}
		}
		
		[Column(Storage="_ReportMargimBottom", DbType="Char(18)")]
		[DataMember(Order=6)]
		public string ReportMargimBottom
		{
			get
			{
				return this._ReportMargimBottom;
			}
			set
			{
				if ((this._ReportMargimBottom != value))
				{
					this.OnReportMargimBottomChanging(value);
					this.SendPropertyChanging();
					this._ReportMargimBottom = value;
					this.SendPropertyChanged("ReportMargimBottom");
					this.OnReportMargimBottomChanged();
				}
			}
		}
		
		[Column(Storage="_ReportMarginLeft", DbType="Char(18)")]
		[DataMember(Order=7)]
		public string ReportMarginLeft
		{
			get
			{
				return this._ReportMarginLeft;
			}
			set
			{
				if ((this._ReportMarginLeft != value))
				{
					this.OnReportMarginLeftChanging(value);
					this.SendPropertyChanging();
					this._ReportMarginLeft = value;
					this.SendPropertyChanged("ReportMarginLeft");
					this.OnReportMarginLeftChanged();
				}
			}
		}
		
		[Column(Storage="_ReportMarginRight", DbType="Char(18)")]
		[DataMember(Order=8)]
		public string ReportMarginRight
		{
			get
			{
				return this._ReportMarginRight;
			}
			set
			{
				if ((this._ReportMarginRight != value))
				{
					this.OnReportMarginRightChanging(value);
					this.SendPropertyChanging();
					this._ReportMarginRight = value;
					this.SendPropertyChanged("ReportMarginRight");
					this.OnReportMarginRightChanged();
				}
			}
		}
		
		[Column(Storage="_WelcomeText", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=9)]
		public string WelcomeText
		{
			get
			{
				return this._WelcomeText;
			}
			set
			{
				if ((this._WelcomeText != value))
				{
					this.OnWelcomeTextChanging(value);
					this.SendPropertyChanging();
					this._WelcomeText = value;
					this.SendPropertyChanged("WelcomeText");
					this.OnWelcomeTextChanged();
				}
			}
		}
		
		[Column(Storage="_PrinterFooter", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=10)]
		public string PrinterFooter
		{
			get
			{
				return this._PrinterFooter;
			}
			set
			{
				if ((this._PrinterFooter != value))
				{
					this.OnPrinterFooterChanging(value);
					this.SendPropertyChanging();
					this._PrinterFooter = value;
					this.SendPropertyChanged("PrinterFooter");
					this.OnPrinterFooterChanged();
				}
			}
		}
		
		[Column(Storage="_UnitPrice1Name", DbType="VarChar(50)")]
		[DataMember(Order=11)]
		public string UnitPrice1Name
		{
			get
			{
				return this._UnitPrice1Name;
			}
			set
			{
				if ((this._UnitPrice1Name != value))
				{
					this.OnUnitPrice1NameChanging(value);
					this.SendPropertyChanging();
					this._UnitPrice1Name = value;
					this.SendPropertyChanged("UnitPrice1Name");
					this.OnUnitPrice1NameChanged();
				}
			}
		}
		
		[Column(Storage="_UnitPrice2Name", DbType="VarChar(50)")]
		[DataMember(Order=12)]
		public string UnitPrice2Name
		{
			get
			{
				return this._UnitPrice2Name;
			}
			set
			{
				if ((this._UnitPrice2Name != value))
				{
					this.OnUnitPrice2NameChanging(value);
					this.SendPropertyChanging();
					this._UnitPrice2Name = value;
					this.SendPropertyChanged("UnitPrice2Name");
					this.OnUnitPrice2NameChanged();
				}
			}
		}
		
		[Column(Storage="_UnitPrice3Name", DbType="VarChar(50)")]
		[DataMember(Order=13)]
		public string UnitPrice3Name
		{
			get
			{
				return this._UnitPrice3Name;
			}
			set
			{
				if ((this._UnitPrice3Name != value))
				{
					this.OnUnitPrice3NameChanging(value);
					this.SendPropertyChanging();
					this._UnitPrice3Name = value;
					this.SendPropertyChanged("UnitPrice3Name");
					this.OnUnitPrice3NameChanged();
				}
			}
		}
		
		[Column(Storage="_UnitPrice4Name", DbType="VarChar(50)")]
		[DataMember(Order=14)]
		public string UnitPrice4Name
		{
			get
			{
				return this._UnitPrice4Name;
			}
			set
			{
				if ((this._UnitPrice4Name != value))
				{
					this.OnUnitPrice4NameChanging(value);
					this.SendPropertyChanging();
					this._UnitPrice4Name = value;
					this.SendPropertyChanged("UnitPrice4Name");
					this.OnUnitPrice4NameChanged();
				}
			}
		}
		
		[Column(Storage="_UnitPrice5Name", DbType="VarChar(50)")]
		[DataMember(Order=15)]
		public string UnitPrice5Name
		{
			get
			{
				return this._UnitPrice5Name;
			}
			set
			{
				if ((this._UnitPrice5Name != value))
				{
					this.OnUnitPrice5NameChanging(value);
					this.SendPropertyChanging();
					this._UnitPrice5Name = value;
					this.SendPropertyChanged("UnitPrice5Name");
					this.OnUnitPrice5NameChanged();
				}
			}
		}
		
		[Column(Storage="_ContractAdditionalValue1Name", DbType="VarChar(50)")]
		[DataMember(Order=16)]
		public string ContractAdditionalValue1Name
		{
			get
			{
				return this._ContractAdditionalValue1Name;
			}
			set
			{
				if ((this._ContractAdditionalValue1Name != value))
				{
					this.OnContractAdditionalValue1NameChanging(value);
					this.SendPropertyChanging();
					this._ContractAdditionalValue1Name = value;
					this.SendPropertyChanged("ContractAdditionalValue1Name");
					this.OnContractAdditionalValue1NameChanged();
				}
			}
		}
		
		[Column(Storage="_ContractAdditionalValue2Name", DbType="VarChar(50)")]
		[DataMember(Order=17)]
		public string ContractAdditionalValue2Name
		{
			get
			{
				return this._ContractAdditionalValue2Name;
			}
			set
			{
				if ((this._ContractAdditionalValue2Name != value))
				{
					this.OnContractAdditionalValue2NameChanging(value);
					this.SendPropertyChanging();
					this._ContractAdditionalValue2Name = value;
					this.SendPropertyChanged("ContractAdditionalValue2Name");
					this.OnContractAdditionalValue2NameChanged();
				}
			}
		}
		
		[Column(Storage="_ContractAdditionalValue3Name", DbType="VarChar(50)")]
		[DataMember(Order=18)]
		public string ContractAdditionalValue3Name
		{
			get
			{
				return this._ContractAdditionalValue3Name;
			}
			set
			{
				if ((this._ContractAdditionalValue3Name != value))
				{
					this.OnContractAdditionalValue3NameChanging(value);
					this.SendPropertyChanging();
					this._ContractAdditionalValue3Name = value;
					this.SendPropertyChanged("ContractAdditionalValue3Name");
					this.OnContractAdditionalValue3NameChanged();
				}
			}
		}
		
		[Column(Storage="_ContractAdditionalValue4Name", DbType="VarChar(50)")]
		[DataMember(Order=19)]
		public string ContractAdditionalValue4Name
		{
			get
			{
				return this._ContractAdditionalValue4Name;
			}
			set
			{
				if ((this._ContractAdditionalValue4Name != value))
				{
					this.OnContractAdditionalValue4NameChanging(value);
					this.SendPropertyChanging();
					this._ContractAdditionalValue4Name = value;
					this.SendPropertyChanged("ContractAdditionalValue4Name");
					this.OnContractAdditionalValue4NameChanged();
				}
			}
		}
		
		[Column(Storage="_ContractAdditionalValue5Name", DbType="VarChar(50)")]
		[DataMember(Order=20)]
		public string ContractAdditionalValue5Name
		{
			get
			{
				return this._ContractAdditionalValue5Name;
			}
			set
			{
				if ((this._ContractAdditionalValue5Name != value))
				{
					this.OnContractAdditionalValue5NameChanging(value);
					this.SendPropertyChanging();
					this._ContractAdditionalValue5Name = value;
					this.SendPropertyChanged("ContractAdditionalValue5Name");
					this.OnContractAdditionalValue5NameChanged();
				}
			}
		}
		
		[Column(Storage="_PurchaseOrderTemplate", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=21)]
		public string PurchaseOrderTemplate
		{
			get
			{
				return this._PurchaseOrderTemplate;
			}
			set
			{
				if ((this._PurchaseOrderTemplate != value))
				{
					this.OnPurchaseOrderTemplateChanging(value);
					this.SendPropertyChanging();
					this._PurchaseOrderTemplate = value;
					this.SendPropertyChanged("PurchaseOrderTemplate");
					this.OnPurchaseOrderTemplateChanged();
				}
			}
		}
		
		[Column(Storage="_BudgetTemplate", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=22)]
		public string BudgetTemplate
		{
			get
			{
				return this._BudgetTemplate;
			}
			set
			{
				if ((this._BudgetTemplate != value))
				{
					this.OnBudgetTemplateChanging(value);
					this.SendPropertyChanging();
					this._BudgetTemplate = value;
					this.SendPropertyChanged("BudgetTemplate");
					this.OnBudgetTemplateChanged();
				}
			}
		}
		
		[Association(Name="CompanyConfiguration_Company", Storage="_Companies", ThisKey="CompanyConfigurationId", OtherKey="CompanyConfigurationId")]
		[DataMember(Order=23, EmitDefaultValue=false)]
		public EntitySet<Company> Companies
		{
			get
			{
				if ((this.serializing 
							&& (this._Companies.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Companies;
			}
			set
			{
				this._Companies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Companies(Company entity)
		{
			this.SendPropertyChanging();
			entity.CompanyConfiguration = this;
		}
		
		private void detach_Companies(Company entity)
		{
			this.SendPropertyChanging();
			entity.CompanyConfiguration = null;
		}
		
		private void Initialize()
		{
			this._Companies = new EntitySet<Company>(new Action<Company>(this.attach_Companies), new Action<Company>(this.detach_Companies));
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.CompanyUser")]
	[DataContract()]
	public partial class CompanyUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CompanyId;
		
		private int _UserId;
		
		private System.Nullable<int> _DepositId;
		
		private bool _IsMain;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<UsersInRole> _UsersInRoles;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Company> _Company;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Deposit> _Deposit;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<User> _User;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnDepositIdChanging(System.Nullable<int> value);
    partial void OnDepositIdChanged();
    partial void OnIsMainChanging(bool value);
    partial void OnIsMainChanged();
    #endregion
		
		public CompanyUser()
		{
			this.Initialize();
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=1)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=2)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_DepositId", DbType="Int")]
		[DataMember(Order=3)]
		public System.Nullable<int> DepositId
		{
			get
			{
				return this._DepositId;
			}
			set
			{
				if ((this._DepositId != value))
				{
					if (this._Deposit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepositIdChanging(value);
					this.SendPropertyChanging();
					this._DepositId = value;
					this.SendPropertyChanged("DepositId");
					this.OnDepositIdChanged();
				}
			}
		}
		
		[Column(Storage="_IsMain", DbType="Bit NOT NULL")]
		[DataMember(Order=4)]
		public bool IsMain
		{
			get
			{
				return this._IsMain;
			}
			set
			{
				if ((this._IsMain != value))
				{
					this.OnIsMainChanging(value);
					this.SendPropertyChanging();
					this._IsMain = value;
					this.SendPropertyChanged("IsMain");
					this.OnIsMainChanged();
				}
			}
		}
		
		[Association(Name="CompanyUser_UsersInRole", Storage="_UsersInRoles", ThisKey="CompanyId,UserId", OtherKey="CompanyId,UserId")]
		[DataMember(Order=5, EmitDefaultValue=false)]
		public EntitySet<UsersInRole> UsersInRoles
		{
			get
			{
				if ((this.serializing 
							&& (this._UsersInRoles.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._UsersInRoles;
			}
			set
			{
				this._UsersInRoles.Assign(value);
			}
		}
		
		[Association(Name="Company_CompanyUser", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.CompanyUsers.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.CompanyUsers.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[Association(Name="Deposit_CompanyUser", Storage="_Deposit", ThisKey="DepositId,CompanyId", OtherKey="DepositId,CompanyId", IsForeignKey=true)]
		public Deposit Deposit
		{
			get
			{
				return this._Deposit.Entity;
			}
			set
			{
				Deposit previousValue = this._Deposit.Entity;
				if (((previousValue != value) 
							|| (this._Deposit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Deposit.Entity = null;
						previousValue.CompanyUsers.Remove(this);
					}
					this._Deposit.Entity = value;
					if ((value != null))
					{
						value.CompanyUsers.Add(this);
						this._DepositId = value.DepositId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._DepositId = default(Nullable<int>);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Deposit");
				}
			}
		}
		
		[Association(Name="User_CompanyUser", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.CompanyUsers.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.CompanyUsers.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UsersInRoles(UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.CompanyUser = this;
		}
		
		private void detach_UsersInRoles(UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.CompanyUser = null;
		}
		
		private void Initialize()
		{
			this._UsersInRoles = new EntitySet<UsersInRole>(new Action<UsersInRole>(this.attach_UsersInRoles), new Action<UsersInRole>(this.detach_UsersInRoles));
			this._Company = default(EntityRef<Company>);
			this._Deposit = default(EntityRef<Deposit>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.CompositeProduct")]
	[DataContract()]
	public partial class CompositeProduct : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CompositeId;
		
		private int _Amount;
		
		private int _CompositeProductId;
		
		private int _ProductId;
		
		private System.Nullable<int> _ProductPackageId;
		
		private System.Nullable<int> _ProductManufacturerId;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Product> _Product;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Product> _Product1;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<ProductManufacturer> _ProductManufacturer;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<ProductPackage> _ProductPackage;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompositeIdChanging(int value);
    partial void OnCompositeIdChanged();
    partial void OnAmountChanging(int value);
    partial void OnAmountChanged();
    partial void OnCompositeProductIdChanging(int value);
    partial void OnCompositeProductIdChanged();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnProductPackageIdChanging(System.Nullable<int> value);
    partial void OnProductPackageIdChanged();
    partial void OnProductManufacturerIdChanging(System.Nullable<int> value);
    partial void OnProductManufacturerIdChanged();
    #endregion
		
		public CompositeProduct()
		{
			this.Initialize();
		}
		
		[Column(Storage="_CompositeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int CompositeId
		{
			get
			{
				return this._CompositeId;
			}
			set
			{
				if ((this._CompositeId != value))
				{
					this.OnCompositeIdChanging(value);
					this.SendPropertyChanging();
					this._CompositeId = value;
					this.SendPropertyChanged("CompositeId");
					this.OnCompositeIdChanged();
				}
			}
		}
		
		[Column(Storage="_Amount", DbType="Int NOT NULL")]
		[DataMember(Order=2)]
		public int Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[Column(Storage="_CompositeProductId", DbType="Int NOT NULL")]
		[DataMember(Order=3)]
		public int CompositeProductId
		{
			get
			{
				return this._CompositeProductId;
			}
			set
			{
				if ((this._CompositeProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompositeProductIdChanging(value);
					this.SendPropertyChanging();
					this._CompositeProductId = value;
					this.SendPropertyChanged("CompositeProductId");
					this.OnCompositeProductIdChanged();
				}
			}
		}
		
		[Column(Storage="_ProductId", DbType="Int NOT NULL")]
		[DataMember(Order=4)]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[Column(Storage="_ProductPackageId", DbType="Int")]
		[DataMember(Order=5)]
		public System.Nullable<int> ProductPackageId
		{
			get
			{
				return this._ProductPackageId;
			}
			set
			{
				if ((this._ProductPackageId != value))
				{
					if (this._ProductPackage.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductPackageIdChanging(value);
					this.SendPropertyChanging();
					this._ProductPackageId = value;
					this.SendPropertyChanged("ProductPackageId");
					this.OnProductPackageIdChanged();
				}
			}
		}
		
		[Column(Storage="_ProductManufacturerId", DbType="Int")]
		[DataMember(Order=6)]
		public System.Nullable<int> ProductManufacturerId
		{
			get
			{
				return this._ProductManufacturerId;
			}
			set
			{
				if ((this._ProductManufacturerId != value))
				{
					if (this._ProductManufacturer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductManufacturerIdChanging(value);
					this.SendPropertyChanging();
					this._ProductManufacturerId = value;
					this.SendPropertyChanged("ProductManufacturerId");
					this.OnProductManufacturerIdChanged();
				}
			}
		}
		
		[Association(Name="Product_CompositeProduct", Storage="_Product", ThisKey="CompositeProductId", OtherKey="ProductId", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.CompositeProducts.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.CompositeProducts.Add(this);
						this._CompositeProductId = value.ProductId;
					}
					else
					{
						this._CompositeProductId = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		[Association(Name="Product_CompositeProduct1", Storage="_Product1", ThisKey="ProductId", OtherKey="ProductId", IsForeignKey=true)]
		public Product Product1
		{
			get
			{
				return this._Product1.Entity;
			}
			set
			{
				Product previousValue = this._Product1.Entity;
				if (((previousValue != value) 
							|| (this._Product1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product1.Entity = null;
						previousValue.CompositeProducts1.Remove(this);
					}
					this._Product1.Entity = value;
					if ((value != null))
					{
						value.CompositeProducts1.Add(this);
						this._ProductId = value.ProductId;
					}
					else
					{
						this._ProductId = default(int);
					}
					this.SendPropertyChanged("Product1");
				}
			}
		}
		
		[Association(Name="ProductManufacturer_CompositeProduct", Storage="_ProductManufacturer", ThisKey="ProductManufacturerId", OtherKey="ProductManufacturerId", IsForeignKey=true)]
		public ProductManufacturer ProductManufacturer
		{
			get
			{
				return this._ProductManufacturer.Entity;
			}
			set
			{
				ProductManufacturer previousValue = this._ProductManufacturer.Entity;
				if (((previousValue != value) 
							|| (this._ProductManufacturer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductManufacturer.Entity = null;
						previousValue.CompositeProducts.Remove(this);
					}
					this._ProductManufacturer.Entity = value;
					if ((value != null))
					{
						value.CompositeProducts.Add(this);
						this._ProductManufacturerId = value.ProductManufacturerId;
					}
					else
					{
						this._ProductManufacturerId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProductManufacturer");
				}
			}
		}
		
		[Association(Name="ProductPackage_CompositeProduct", Storage="_ProductPackage", ThisKey="ProductPackageId", OtherKey="ProductPackageId", IsForeignKey=true)]
		public ProductPackage ProductPackage
		{
			get
			{
				return this._ProductPackage.Entity;
			}
			set
			{
				ProductPackage previousValue = this._ProductPackage.Entity;
				if (((previousValue != value) 
							|| (this._ProductPackage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductPackage.Entity = null;
						previousValue.CompositeProducts.Remove(this);
					}
					this._ProductPackage.Entity = value;
					if ((value != null))
					{
						value.CompositeProducts.Add(this);
						this._ProductPackageId = value.ProductPackageId;
					}
					else
					{
						this._ProductPackageId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProductPackage");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Product = default(EntityRef<Product>);
			this._Product1 = default(EntityRef<Product>);
			this._ProductManufacturer = default(EntityRef<ProductManufacturer>);
			this._ProductPackage = default(EntityRef<ProductPackage>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.Contact")]
	[DataContract()]
	public partial class Contact : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ContactId;
		
		private string _Name;
		
		private string _Phone;
		
		private string _Email;
		
		private string _AddressComp;
		
		private string _AddressNumber;
		
		private string _Sector;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private string _PostalCode;
		
		private string _Skype;
		
		private string _Msn;
		
		private string _CellPhone;
		
		private string _Phone2;
		
		private string _Observation;
		
		private System.Nullable<int> _UserId;
		
		private System.Nullable<int> _CompanyId;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<CustomerContact> _CustomerContacts;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<CustomerFollowup> _CustomerFollowups;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<SupplierContact> _SupplierContacts;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Address> _Address;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Company> _Company;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<User> _User;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContactIdChanging(int value);
    partial void OnContactIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnAddressCompChanging(string value);
    partial void OnAddressCompChanged();
    partial void OnAddressNumberChanging(string value);
    partial void OnAddressNumberChanged();
    partial void OnSectorChanging(string value);
    partial void OnSectorChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    partial void OnPostalCodeChanging(string value);
    partial void OnPostalCodeChanged();
    partial void OnSkypeChanging(string value);
    partial void OnSkypeChanged();
    partial void OnMsnChanging(string value);
    partial void OnMsnChanged();
    partial void OnCellPhoneChanging(string value);
    partial void OnCellPhoneChanged();
    partial void OnPhone2Changing(string value);
    partial void OnPhone2Changed();
    partial void OnObservationChanging(string value);
    partial void OnObservationChanged();
    partial void OnUserIdChanging(System.Nullable<int> value);
    partial void OnUserIdChanged();
    partial void OnCompanyIdChanging(System.Nullable<int> value);
    partial void OnCompanyIdChanged();
    #endregion
		
		public Contact()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ContactId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int ContactId
		{
			get
			{
				return this._ContactId;
			}
			set
			{
				if ((this._ContactId != value))
				{
					this.OnContactIdChanging(value);
					this.SendPropertyChanging();
					this._ContactId = value;
					this.SendPropertyChanged("ContactId");
					this.OnContactIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Phone", DbType="VarChar(50)")]
		[DataMember(Order=3)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="VarChar(50)")]
		[DataMember(Order=4)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_AddressComp", DbType="VarChar(50)")]
		[DataMember(Order=5)]
		public string AddressComp
		{
			get
			{
				return this._AddressComp;
			}
			set
			{
				if ((this._AddressComp != value))
				{
					this.OnAddressCompChanging(value);
					this.SendPropertyChanging();
					this._AddressComp = value;
					this.SendPropertyChanged("AddressComp");
					this.OnAddressCompChanged();
				}
			}
		}
		
		[Column(Storage="_AddressNumber", DbType="VarChar(50)")]
		[DataMember(Order=6)]
		public string AddressNumber
		{
			get
			{
				return this._AddressNumber;
			}
			set
			{
				if ((this._AddressNumber != value))
				{
					this.OnAddressNumberChanging(value);
					this.SendPropertyChanging();
					this._AddressNumber = value;
					this.SendPropertyChanged("AddressNumber");
					this.OnAddressNumberChanged();
				}
			}
		}
		
		[Column(Storage="_Sector", DbType="VarChar(50)")]
		[DataMember(Order=7)]
		public string Sector
		{
			get
			{
				return this._Sector;
			}
			set
			{
				if ((this._Sector != value))
				{
					this.OnSectorChanging(value);
					this.SendPropertyChanging();
					this._Sector = value;
					this.SendPropertyChanged("Sector");
					this.OnSectorChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime")]
		[DataMember(Order=8)]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_PostalCode", DbType="Char(8)")]
		[DataMember(Order=9)]
		public string PostalCode
		{
			get
			{
				return this._PostalCode;
			}
			set
			{
				if ((this._PostalCode != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPostalCodeChanging(value);
					this.SendPropertyChanging();
					this._PostalCode = value;
					this.SendPropertyChanged("PostalCode");
					this.OnPostalCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Skype", DbType="VarChar(50)")]
		[DataMember(Order=10)]
		public string Skype
		{
			get
			{
				return this._Skype;
			}
			set
			{
				if ((this._Skype != value))
				{
					this.OnSkypeChanging(value);
					this.SendPropertyChanging();
					this._Skype = value;
					this.SendPropertyChanged("Skype");
					this.OnSkypeChanged();
				}
			}
		}
		
		[Column(Storage="_Msn", DbType="VarChar(50)")]
		[DataMember(Order=11)]
		public string Msn
		{
			get
			{
				return this._Msn;
			}
			set
			{
				if ((this._Msn != value))
				{
					this.OnMsnChanging(value);
					this.SendPropertyChanging();
					this._Msn = value;
					this.SendPropertyChanged("Msn");
					this.OnMsnChanged();
				}
			}
		}
		
		[Column(Storage="_CellPhone", DbType="VarChar(50)")]
		[DataMember(Order=12)]
		public string CellPhone
		{
			get
			{
				return this._CellPhone;
			}
			set
			{
				if ((this._CellPhone != value))
				{
					this.OnCellPhoneChanging(value);
					this.SendPropertyChanging();
					this._CellPhone = value;
					this.SendPropertyChanged("CellPhone");
					this.OnCellPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_Phone2", DbType="VarChar(50)")]
		[DataMember(Order=13)]
		public string Phone2
		{
			get
			{
				return this._Phone2;
			}
			set
			{
				if ((this._Phone2 != value))
				{
					this.OnPhone2Changing(value);
					this.SendPropertyChanging();
					this._Phone2 = value;
					this.SendPropertyChanged("Phone2");
					this.OnPhone2Changed();
				}
			}
		}
		
		[Column(Storage="_Observation", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=14)]
		public string Observation
		{
			get
			{
				return this._Observation;
			}
			set
			{
				if ((this._Observation != value))
				{
					this.OnObservationChanging(value);
					this.SendPropertyChanging();
					this._Observation = value;
					this.SendPropertyChanged("Observation");
					this.OnObservationChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="Int")]
		[DataMember(Order=15)]
		public System.Nullable<int> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int")]
		[DataMember(Order=16)]
		public System.Nullable<int> CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Association(Name="Contact_CustomerContact", Storage="_CustomerContacts", ThisKey="ContactId", OtherKey="ContactId")]
		[DataMember(Order=17, EmitDefaultValue=false)]
		public EntitySet<CustomerContact> CustomerContacts
		{
			get
			{
				if ((this.serializing 
							&& (this._CustomerContacts.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._CustomerContacts;
			}
			set
			{
				this._CustomerContacts.Assign(value);
			}
		}
		
		[Association(Name="Contact_CustomerFollowup", Storage="_CustomerFollowups", ThisKey="ContactId", OtherKey="ContactId")]
		[DataMember(Order=18, EmitDefaultValue=false)]
		public EntitySet<CustomerFollowup> CustomerFollowups
		{
			get
			{
				if ((this.serializing 
							&& (this._CustomerFollowups.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._CustomerFollowups;
			}
			set
			{
				this._CustomerFollowups.Assign(value);
			}
		}
		
		[Association(Name="Contact_SupplierContact", Storage="_SupplierContacts", ThisKey="ContactId", OtherKey="ContactId")]
		[DataMember(Order=19, EmitDefaultValue=false)]
		public EntitySet<SupplierContact> SupplierContacts
		{
			get
			{
				if ((this.serializing 
							&& (this._SupplierContacts.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._SupplierContacts;
			}
			set
			{
				this._SupplierContacts.Assign(value);
			}
		}
		
		[Association(Name="Address_Contact", Storage="_Address", ThisKey="PostalCode", OtherKey="PostalCode", IsForeignKey=true)]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.Contacts.Remove(this);
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.Contacts.Add(this);
						this._PostalCode = value.PostalCode;
					}
					else
					{
						this._PostalCode = default(string);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		[Association(Name="Company_Contact", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Contacts.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Contacts.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[Association(Name="User_Contact", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Contacts.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Contacts.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CustomerContacts(CustomerContact entity)
		{
			this.SendPropertyChanging();
			entity.Contact = this;
		}
		
		private void detach_CustomerContacts(CustomerContact entity)
		{
			this.SendPropertyChanging();
			entity.Contact = null;
		}
		
		private void attach_CustomerFollowups(CustomerFollowup entity)
		{
			this.SendPropertyChanging();
			entity.Contact = this;
		}
		
		private void detach_CustomerFollowups(CustomerFollowup entity)
		{
			this.SendPropertyChanging();
			entity.Contact = null;
		}
		
		private void attach_SupplierContacts(SupplierContact entity)
		{
			this.SendPropertyChanging();
			entity.Contact = this;
		}
		
		private void detach_SupplierContacts(SupplierContact entity)
		{
			this.SendPropertyChanging();
			entity.Contact = null;
		}
		
		private void Initialize()
		{
			this._CustomerContacts = new EntitySet<CustomerContact>(new Action<CustomerContact>(this.attach_CustomerContacts), new Action<CustomerContact>(this.detach_CustomerContacts));
			this._CustomerFollowups = new EntitySet<CustomerFollowup>(new Action<CustomerFollowup>(this.attach_CustomerFollowups), new Action<CustomerFollowup>(this.detach_CustomerFollowups));
			this._SupplierContacts = new EntitySet<SupplierContact>(new Action<SupplierContact>(this.attach_SupplierContacts), new Action<SupplierContact>(this.detach_SupplierContacts));
			this._Address = default(EntityRef<Address>);
			this._Company = default(EntityRef<Company>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.Contract")]
	[DataContract()]
	public partial class Contract : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CompanyId;
		
		private int _ContractId;
		
		private int _CustomerId;
		
		private System.DateTime _BeginDate;
		
		private System.Nullable<decimal> _HH;
		
		private System.DateTime _ExpiresDate;
		
		private System.Nullable<decimal> _InterestDeferredPayment;
		
		private System.Nullable<decimal> _Penalty;
		
		private System.Nullable<decimal> _ContractValue;
		
		private System.Nullable<decimal> _AdditionalValue1;
		
		private System.Nullable<decimal> _AdditionalValue2;
		
		private System.Nullable<decimal> _AdditionalValue3;
		
		private System.Nullable<decimal> _AdditionalValue4;
		
		private System.Nullable<decimal> _AdditionalValue5;
		
		private System.Nullable<int> _InvoiceId;
		
		private System.Nullable<int> _Periodicity;
		
		private string _Observation;
		
		private int _ContractTypeId;
		
		private int _ContractStatusId;
		
		private System.Nullable<int> _Parcels;
		
		private System.Nullable<System.DateTime> _FirstParcelDueDate;
		
		private string _ContractNumber;
		
		private System.Nullable<int> _FinancierConditionId;
		
		private System.Nullable<int> _FinancierOperationId;
		
		private System.Nullable<int> _RepresentantId;
		
		private System.Nullable<int> _EmployeeId;
		
		private System.Nullable<decimal> _MoneyReserves;
		
		private System.Nullable<decimal> _MonthlyFee;
		
		private System.Nullable<decimal> _Insurance;
		
		private System.Nullable<int> _BillId;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<ContractAssociated> _ContractAssociateds;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<CustomerEquipment> _CustomerEquipments;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<ServiceOrder> _ServiceOrders;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Company> _Company;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Bill> _Bill;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<ContractStatus> _ContractStatus;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<ContractType> _ContractType;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Customer> _Customer;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Employee> _Employee;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<FinancierCondition> _FinancierCondition;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<FinancierOperation> _FinancierOperation;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Invoice> _Invoice;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Representant> _Representant;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnContractIdChanging(int value);
    partial void OnContractIdChanged();
    partial void OnCustomerIdChanging(int value);
    partial void OnCustomerIdChanged();
    partial void OnBeginDateChanging(System.DateTime value);
    partial void OnBeginDateChanged();
    partial void OnHHChanging(System.Nullable<decimal> value);
    partial void OnHHChanged();
    partial void OnExpiresDateChanging(System.DateTime value);
    partial void OnExpiresDateChanged();
    partial void OnInterestDeferredPaymentChanging(System.Nullable<decimal> value);
    partial void OnInterestDeferredPaymentChanged();
    partial void OnPenaltyChanging(System.Nullable<decimal> value);
    partial void OnPenaltyChanged();
    partial void OnContractValueChanging(System.Nullable<decimal> value);
    partial void OnContractValueChanged();
    partial void OnAdditionalValue1Changing(System.Nullable<decimal> value);
    partial void OnAdditionalValue1Changed();
    partial void OnAdditionalValue2Changing(System.Nullable<decimal> value);
    partial void OnAdditionalValue2Changed();
    partial void OnAdditionalValue3Changing(System.Nullable<decimal> value);
    partial void OnAdditionalValue3Changed();
    partial void OnAdditionalValue4Changing(System.Nullable<decimal> value);
    partial void OnAdditionalValue4Changed();
    partial void OnAdditionalValue5Changing(System.Nullable<decimal> value);
    partial void OnAdditionalValue5Changed();
    partial void OnInvoiceIdChanging(System.Nullable<int> value);
    partial void OnInvoiceIdChanged();
    partial void OnPeriodicityChanging(System.Nullable<int> value);
    partial void OnPeriodicityChanged();
    partial void OnObservationChanging(string value);
    partial void OnObservationChanged();
    partial void OnContractTypeIdChanging(int value);
    partial void OnContractTypeIdChanged();
    partial void OnContractStatusIdChanging(int value);
    partial void OnContractStatusIdChanged();
    partial void OnParcelsChanging(System.Nullable<int> value);
    partial void OnParcelsChanged();
    partial void OnFirstParcelDueDateChanging(System.Nullable<System.DateTime> value);
    partial void OnFirstParcelDueDateChanged();
    partial void OnContractNumberChanging(string value);
    partial void OnContractNumberChanged();
    partial void OnFinancierConditionIdChanging(System.Nullable<int> value);
    partial void OnFinancierConditionIdChanged();
    partial void OnFinancierOperationIdChanging(System.Nullable<int> value);
    partial void OnFinancierOperationIdChanged();
    partial void OnRepresentantIdChanging(System.Nullable<int> value);
    partial void OnRepresentantIdChanged();
    partial void OnEmployeeIdChanging(System.Nullable<int> value);
    partial void OnEmployeeIdChanged();
    partial void OnMoneyReservesChanging(System.Nullable<decimal> value);
    partial void OnMoneyReservesChanged();
    partial void OnMonthlyFeeChanging(System.Nullable<decimal> value);
    partial void OnMonthlyFeeChanged();
    partial void OnInsuranceChanging(System.Nullable<decimal> value);
    partial void OnInsuranceChanged();
    partial void OnBillIdChanging(System.Nullable<int> value);
    partial void OnBillIdChanged();
    #endregion
		
		public Contract()
		{
			this.Initialize();
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=1)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Column(Storage="_ContractId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=2)]
		public int ContractId
		{
			get
			{
				return this._ContractId;
			}
			set
			{
				if ((this._ContractId != value))
				{
					this.OnContractIdChanging(value);
					this.SendPropertyChanging();
					this._ContractId = value;
					this.SendPropertyChanged("ContractId");
					this.OnContractIdChanged();
				}
			}
		}
		
		[Column(Storage="_CustomerId", DbType="Int NOT NULL")]
		[DataMember(Order=3)]
		public int CustomerId
		{
			get
			{
				return this._CustomerId;
			}
			set
			{
				if ((this._CustomerId != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerId = value;
					this.SendPropertyChanged("CustomerId");
					this.OnCustomerIdChanged();
				}
			}
		}
		
		[Column(Storage="_BeginDate", DbType="DateTime NOT NULL")]
		[DataMember(Order=4)]
		public System.DateTime BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}
		
		[Column(Storage="_HH", DbType="Decimal(18,2)")]
		[DataMember(Order=5)]
		public System.Nullable<decimal> HH
		{
			get
			{
				return this._HH;
			}
			set
			{
				if ((this._HH != value))
				{
					this.OnHHChanging(value);
					this.SendPropertyChanging();
					this._HH = value;
					this.SendPropertyChanged("HH");
					this.OnHHChanged();
				}
			}
		}
		
		[Column(Storage="_ExpiresDate", DbType="DateTime NOT NULL")]
		[DataMember(Order=6)]
		public System.DateTime ExpiresDate
		{
			get
			{
				return this._ExpiresDate;
			}
			set
			{
				if ((this._ExpiresDate != value))
				{
					this.OnExpiresDateChanging(value);
					this.SendPropertyChanging();
					this._ExpiresDate = value;
					this.SendPropertyChanged("ExpiresDate");
					this.OnExpiresDateChanged();
				}
			}
		}
		
		[Column(Storage="_InterestDeferredPayment", DbType="Decimal(18,2)")]
		[DataMember(Order=7)]
		public System.Nullable<decimal> InterestDeferredPayment
		{
			get
			{
				return this._InterestDeferredPayment;
			}
			set
			{
				if ((this._InterestDeferredPayment != value))
				{
					this.OnInterestDeferredPaymentChanging(value);
					this.SendPropertyChanging();
					this._InterestDeferredPayment = value;
					this.SendPropertyChanged("InterestDeferredPayment");
					this.OnInterestDeferredPaymentChanged();
				}
			}
		}
		
		[Column(Storage="_Penalty", DbType="Decimal(18,2)")]
		[DataMember(Order=8)]
		public System.Nullable<decimal> Penalty
		{
			get
			{
				return this._Penalty;
			}
			set
			{
				if ((this._Penalty != value))
				{
					this.OnPenaltyChanging(value);
					this.SendPropertyChanging();
					this._Penalty = value;
					this.SendPropertyChanged("Penalty");
					this.OnPenaltyChanged();
				}
			}
		}
		
		[Column(Storage="_ContractValue", DbType="Decimal(18,2)")]
		[DataMember(Order=9)]
		public System.Nullable<decimal> ContractValue
		{
			get
			{
				return this._ContractValue;
			}
			set
			{
				if ((this._ContractValue != value))
				{
					this.OnContractValueChanging(value);
					this.SendPropertyChanging();
					this._ContractValue = value;
					this.SendPropertyChanged("ContractValue");
					this.OnContractValueChanged();
				}
			}
		}
		
		[Column(Storage="_AdditionalValue1", DbType="Decimal(18,2)")]
		[DataMember(Order=10)]
		public System.Nullable<decimal> AdditionalValue1
		{
			get
			{
				return this._AdditionalValue1;
			}
			set
			{
				if ((this._AdditionalValue1 != value))
				{
					this.OnAdditionalValue1Changing(value);
					this.SendPropertyChanging();
					this._AdditionalValue1 = value;
					this.SendPropertyChanged("AdditionalValue1");
					this.OnAdditionalValue1Changed();
				}
			}
		}
		
		[Column(Storage="_AdditionalValue2", DbType="Decimal(18,2)")]
		[DataMember(Order=11)]
		public System.Nullable<decimal> AdditionalValue2
		{
			get
			{
				return this._AdditionalValue2;
			}
			set
			{
				if ((this._AdditionalValue2 != value))
				{
					this.OnAdditionalValue2Changing(value);
					this.SendPropertyChanging();
					this._AdditionalValue2 = value;
					this.SendPropertyChanged("AdditionalValue2");
					this.OnAdditionalValue2Changed();
				}
			}
		}
		
		[Column(Storage="_AdditionalValue3", DbType="Decimal(18,2)")]
		[DataMember(Order=12)]
		public System.Nullable<decimal> AdditionalValue3
		{
			get
			{
				return this._AdditionalValue3;
			}
			set
			{
				if ((this._AdditionalValue3 != value))
				{
					this.OnAdditionalValue3Changing(value);
					this.SendPropertyChanging();
					this._AdditionalValue3 = value;
					this.SendPropertyChanged("AdditionalValue3");
					this.OnAdditionalValue3Changed();
				}
			}
		}
		
		[Column(Storage="_AdditionalValue4", DbType="Decimal(18,2)")]
		[DataMember(Order=13)]
		public System.Nullable<decimal> AdditionalValue4
		{
			get
			{
				return this._AdditionalValue4;
			}
			set
			{
				if ((this._AdditionalValue4 != value))
				{
					this.OnAdditionalValue4Changing(value);
					this.SendPropertyChanging();
					this._AdditionalValue4 = value;
					this.SendPropertyChanged("AdditionalValue4");
					this.OnAdditionalValue4Changed();
				}
			}
		}
		
		[Column(Storage="_AdditionalValue5", DbType="Decimal(18,2)")]
		[DataMember(Order=14)]
		public System.Nullable<decimal> AdditionalValue5
		{
			get
			{
				return this._AdditionalValue5;
			}
			set
			{
				if ((this._AdditionalValue5 != value))
				{
					this.OnAdditionalValue5Changing(value);
					this.SendPropertyChanging();
					this._AdditionalValue5 = value;
					this.SendPropertyChanged("AdditionalValue5");
					this.OnAdditionalValue5Changed();
				}
			}
		}
		
		[Column(Storage="_InvoiceId", DbType="Int")]
		[DataMember(Order=15)]
		public System.Nullable<int> InvoiceId
		{
			get
			{
				return this._InvoiceId;
			}
			set
			{
				if ((this._InvoiceId != value))
				{
					if (this._Invoice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInvoiceIdChanging(value);
					this.SendPropertyChanging();
					this._InvoiceId = value;
					this.SendPropertyChanged("InvoiceId");
					this.OnInvoiceIdChanged();
				}
			}
		}
		
		[Column(Storage="_Periodicity", DbType="Int")]
		[DataMember(Order=16)]
		public System.Nullable<int> Periodicity
		{
			get
			{
				return this._Periodicity;
			}
			set
			{
				if ((this._Periodicity != value))
				{
					this.OnPeriodicityChanging(value);
					this.SendPropertyChanging();
					this._Periodicity = value;
					this.SendPropertyChanged("Periodicity");
					this.OnPeriodicityChanged();
				}
			}
		}
		
		[Column(Storage="_Observation", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=17)]
		public string Observation
		{
			get
			{
				return this._Observation;
			}
			set
			{
				if ((this._Observation != value))
				{
					this.OnObservationChanging(value);
					this.SendPropertyChanging();
					this._Observation = value;
					this.SendPropertyChanged("Observation");
					this.OnObservationChanged();
				}
			}
		}
		
		[Column(Storage="_ContractTypeId", DbType="Int NOT NULL")]
		[DataMember(Order=18)]
		public int ContractTypeId
		{
			get
			{
				return this._ContractTypeId;
			}
			set
			{
				if ((this._ContractTypeId != value))
				{
					if (this._ContractType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContractTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ContractTypeId = value;
					this.SendPropertyChanged("ContractTypeId");
					this.OnContractTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_ContractStatusId", DbType="Int NOT NULL")]
		[DataMember(Order=19)]
		public int ContractStatusId
		{
			get
			{
				return this._ContractStatusId;
			}
			set
			{
				if ((this._ContractStatusId != value))
				{
					if (this._ContractStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContractStatusIdChanging(value);
					this.SendPropertyChanging();
					this._ContractStatusId = value;
					this.SendPropertyChanged("ContractStatusId");
					this.OnContractStatusIdChanged();
				}
			}
		}
		
		[Column(Storage="_Parcels", DbType="Int")]
		[DataMember(Order=20)]
		public System.Nullable<int> Parcels
		{
			get
			{
				return this._Parcels;
			}
			set
			{
				if ((this._Parcels != value))
				{
					this.OnParcelsChanging(value);
					this.SendPropertyChanging();
					this._Parcels = value;
					this.SendPropertyChanged("Parcels");
					this.OnParcelsChanged();
				}
			}
		}
		
		[Column(Storage="_FirstParcelDueDate", DbType="DateTime")]
		[DataMember(Order=21)]
		public System.Nullable<System.DateTime> FirstParcelDueDate
		{
			get
			{
				return this._FirstParcelDueDate;
			}
			set
			{
				if ((this._FirstParcelDueDate != value))
				{
					this.OnFirstParcelDueDateChanging(value);
					this.SendPropertyChanging();
					this._FirstParcelDueDate = value;
					this.SendPropertyChanged("FirstParcelDueDate");
					this.OnFirstParcelDueDateChanged();
				}
			}
		}
		
		[Column(Storage="_ContractNumber", DbType="VarChar(50)")]
		[DataMember(Order=22)]
		public string ContractNumber
		{
			get
			{
				return this._ContractNumber;
			}
			set
			{
				if ((this._ContractNumber != value))
				{
					this.OnContractNumberChanging(value);
					this.SendPropertyChanging();
					this._ContractNumber = value;
					this.SendPropertyChanged("ContractNumber");
					this.OnContractNumberChanged();
				}
			}
		}
		
		[Column(Storage="_FinancierConditionId", DbType="Int")]
		[DataMember(Order=23)]
		public System.Nullable<int> FinancierConditionId
		{
			get
			{
				return this._FinancierConditionId;
			}
			set
			{
				if ((this._FinancierConditionId != value))
				{
					if (this._FinancierCondition.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFinancierConditionIdChanging(value);
					this.SendPropertyChanging();
					this._FinancierConditionId = value;
					this.SendPropertyChanged("FinancierConditionId");
					this.OnFinancierConditionIdChanged();
				}
			}
		}
		
		[Column(Storage="_FinancierOperationId", DbType="Int")]
		[DataMember(Order=24)]
		public System.Nullable<int> FinancierOperationId
		{
			get
			{
				return this._FinancierOperationId;
			}
			set
			{
				if ((this._FinancierOperationId != value))
				{
					if (this._FinancierCondition.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFinancierOperationIdChanging(value);
					this.SendPropertyChanging();
					this._FinancierOperationId = value;
					this.SendPropertyChanged("FinancierOperationId");
					this.OnFinancierOperationIdChanged();
				}
			}
		}
		
		[Column(Storage="_RepresentantId", DbType="Int")]
		[DataMember(Order=25)]
		public System.Nullable<int> RepresentantId
		{
			get
			{
				return this._RepresentantId;
			}
			set
			{
				if ((this._RepresentantId != value))
				{
					if (this._Representant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRepresentantIdChanging(value);
					this.SendPropertyChanging();
					this._RepresentantId = value;
					this.SendPropertyChanged("RepresentantId");
					this.OnRepresentantIdChanged();
				}
			}
		}
		
		[Column(Storage="_EmployeeId", DbType="Int")]
		[DataMember(Order=26)]
		public System.Nullable<int> EmployeeId
		{
			get
			{
				return this._EmployeeId;
			}
			set
			{
				if ((this._EmployeeId != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeId = value;
					this.SendPropertyChanged("EmployeeId");
					this.OnEmployeeIdChanged();
				}
			}
		}
		
		[Column(Storage="_MoneyReserves", DbType="Decimal(18,2)")]
		[DataMember(Order=27)]
		public System.Nullable<decimal> MoneyReserves
		{
			get
			{
				return this._MoneyReserves;
			}
			set
			{
				if ((this._MoneyReserves != value))
				{
					this.OnMoneyReservesChanging(value);
					this.SendPropertyChanging();
					this._MoneyReserves = value;
					this.SendPropertyChanged("MoneyReserves");
					this.OnMoneyReservesChanged();
				}
			}
		}
		
		[Column(Storage="_MonthlyFee", DbType="Decimal(18,2)")]
		[DataMember(Order=28)]
		public System.Nullable<decimal> MonthlyFee
		{
			get
			{
				return this._MonthlyFee;
			}
			set
			{
				if ((this._MonthlyFee != value))
				{
					this.OnMonthlyFeeChanging(value);
					this.SendPropertyChanging();
					this._MonthlyFee = value;
					this.SendPropertyChanged("MonthlyFee");
					this.OnMonthlyFeeChanged();
				}
			}
		}
		
		[Column(Storage="_Insurance", DbType="Decimal(18,2)")]
		[DataMember(Order=29)]
		public System.Nullable<decimal> Insurance
		{
			get
			{
				return this._Insurance;
			}
			set
			{
				if ((this._Insurance != value))
				{
					this.OnInsuranceChanging(value);
					this.SendPropertyChanging();
					this._Insurance = value;
					this.SendPropertyChanged("Insurance");
					this.OnInsuranceChanged();
				}
			}
		}
		
		[Column(Storage="_BillId", DbType="Int")]
		[DataMember(Order=30)]
		public System.Nullable<int> BillId
		{
			get
			{
				return this._BillId;
			}
			set
			{
				if ((this._BillId != value))
				{
					if (this._Bill.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBillIdChanging(value);
					this.SendPropertyChanging();
					this._BillId = value;
					this.SendPropertyChanged("BillId");
					this.OnBillIdChanged();
				}
			}
		}
		
		[Association(Name="Contract_ContractAssociated", Storage="_ContractAssociateds", ThisKey="ContractId,CompanyId", OtherKey="ContractId,CompanyId")]
		[DataMember(Order=31, EmitDefaultValue=false)]
		public EntitySet<ContractAssociated> ContractAssociateds
		{
			get
			{
				if ((this.serializing 
							&& (this._ContractAssociateds.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ContractAssociateds;
			}
			set
			{
				this._ContractAssociateds.Assign(value);
			}
		}
		
		[Association(Name="Contract_CustomerEquipment", Storage="_CustomerEquipments", ThisKey="ContractId,CompanyId", OtherKey="ContractId,CompanyId")]
		[DataMember(Order=32, EmitDefaultValue=false)]
		public EntitySet<CustomerEquipment> CustomerEquipments
		{
			get
			{
				if ((this.serializing 
							&& (this._CustomerEquipments.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._CustomerEquipments;
			}
			set
			{
				this._CustomerEquipments.Assign(value);
			}
		}
		
		[Association(Name="Contract_ServiceOrder", Storage="_ServiceOrders", ThisKey="ContractId,CompanyId", OtherKey="ContractId,CompanyId")]
		[DataMember(Order=33, EmitDefaultValue=false)]
		public EntitySet<ServiceOrder> ServiceOrders
		{
			get
			{
				if ((this.serializing 
							&& (this._ServiceOrders.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ServiceOrders;
			}
			set
			{
				this._ServiceOrders.Assign(value);
			}
		}
		
		[Association(Name="Company_Contract", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Contracts.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Contracts.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[Association(Name="Bill_Contract", Storage="_Bill", ThisKey="BillId,CompanyId", OtherKey="BillId,CompanyId", IsForeignKey=true)]
		public Bill Bill
		{
			get
			{
				return this._Bill.Entity;
			}
			set
			{
				Bill previousValue = this._Bill.Entity;
				if (((previousValue != value) 
							|| (this._Bill.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bill.Entity = null;
						previousValue.Contracts.Remove(this);
					}
					this._Bill.Entity = value;
					if ((value != null))
					{
						value.Contracts.Add(this);
						this._BillId = value.BillId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._BillId = default(Nullable<int>);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Bill");
				}
			}
		}
		
		[Association(Name="ContractStatus_Contract", Storage="_ContractStatus", ThisKey="ContractStatusId", OtherKey="ContractStatusId", IsForeignKey=true)]
		public ContractStatus ContractStatus
		{
			get
			{
				return this._ContractStatus.Entity;
			}
			set
			{
				ContractStatus previousValue = this._ContractStatus.Entity;
				if (((previousValue != value) 
							|| (this._ContractStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContractStatus.Entity = null;
						previousValue.Contracts.Remove(this);
					}
					this._ContractStatus.Entity = value;
					if ((value != null))
					{
						value.Contracts.Add(this);
						this._ContractStatusId = value.ContractStatusId;
					}
					else
					{
						this._ContractStatusId = default(int);
					}
					this.SendPropertyChanged("ContractStatus");
				}
			}
		}
		
		[Association(Name="ContractType_Contract", Storage="_ContractType", ThisKey="ContractTypeId,CompanyId", OtherKey="ContractTypeId,CompanyId", IsForeignKey=true)]
		public ContractType ContractType
		{
			get
			{
				return this._ContractType.Entity;
			}
			set
			{
				ContractType previousValue = this._ContractType.Entity;
				if (((previousValue != value) 
							|| (this._ContractType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContractType.Entity = null;
						previousValue.Contracts.Remove(this);
					}
					this._ContractType.Entity = value;
					if ((value != null))
					{
						value.Contracts.Add(this);
						this._ContractTypeId = value.ContractTypeId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._ContractTypeId = default(int);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("ContractType");
				}
			}
		}
		
		[Association(Name="Customer_Contract", Storage="_Customer", ThisKey="CustomerId", OtherKey="CustomerId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Contracts.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Contracts.Add(this);
						this._CustomerId = value.CustomerId;
					}
					else
					{
						this._CustomerId = default(int);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[Association(Name="Employee_Contract", Storage="_Employee", ThisKey="EmployeeId,CompanyId", OtherKey="EmployeeId,CompanyId", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Contracts.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Contracts.Add(this);
						this._EmployeeId = value.EmployeeId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._EmployeeId = default(Nullable<int>);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[Association(Name="FinancierCondition_Contract", Storage="_FinancierCondition", ThisKey="CompanyId,FinancierOperationId,FinancierConditionId", OtherKey="CompanyId,FinancierOperationId,FinancierConditionId", IsForeignKey=true)]
		public FinancierCondition FinancierCondition
		{
			get
			{
				return this._FinancierCondition.Entity;
			}
			set
			{
				FinancierCondition previousValue = this._FinancierCondition.Entity;
				if (((previousValue != value) 
							|| (this._FinancierCondition.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FinancierCondition.Entity = null;
						previousValue.Contracts.Remove(this);
					}
					this._FinancierCondition.Entity = value;
					if ((value != null))
					{
						value.Contracts.Add(this);
						this._CompanyId = value.CompanyId;
						this._FinancierOperationId = value.FinancierOperationId;
						this._FinancierConditionId = value.FinancierConditionId;
					}
					else
					{
						this._CompanyId = default(int);
						this._FinancierOperationId = default(Nullable<int>);
						this._FinancierConditionId = default(Nullable<int>);
					}
					this.SendPropertyChanged("FinancierCondition");
				}
			}
		}
		
		[Association(Name="FinancierOperation_Contract", Storage="_FinancierOperation", ThisKey="FinancierOperationId,CompanyId", OtherKey="FinancierOperationId,CompanyId", IsForeignKey=true)]
		public FinancierOperation FinancierOperation
		{
			get
			{
				return this._FinancierOperation.Entity;
			}
			set
			{
				FinancierOperation previousValue = this._FinancierOperation.Entity;
				if (((previousValue != value) 
							|| (this._FinancierOperation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FinancierOperation.Entity = null;
						previousValue.Contracts.Remove(this);
					}
					this._FinancierOperation.Entity = value;
					if ((value != null))
					{
						value.Contracts.Add(this);
						this._FinancierOperationId = value.FinancierOperationId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._FinancierOperationId = default(Nullable<int>);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("FinancierOperation");
				}
			}
		}
		
		[Association(Name="Invoice_Contract", Storage="_Invoice", ThisKey="InvoiceId,CompanyId", OtherKey="InvoiceId,CompanyId", IsForeignKey=true)]
		public Invoice Invoice
		{
			get
			{
				return this._Invoice.Entity;
			}
			set
			{
				Invoice previousValue = this._Invoice.Entity;
				if (((previousValue != value) 
							|| (this._Invoice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Invoice.Entity = null;
						previousValue.Contracts.Remove(this);
					}
					this._Invoice.Entity = value;
					if ((value != null))
					{
						value.Contracts.Add(this);
						this._InvoiceId = value.InvoiceId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._InvoiceId = default(Nullable<int>);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Invoice");
				}
			}
		}
		
		[Association(Name="Representant_Contract", Storage="_Representant", ThisKey="RepresentantId,CompanyId", OtherKey="RepresentantId,CompanyId", IsForeignKey=true)]
		public Representant Representant
		{
			get
			{
				return this._Representant.Entity;
			}
			set
			{
				Representant previousValue = this._Representant.Entity;
				if (((previousValue != value) 
							|| (this._Representant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Representant.Entity = null;
						previousValue.Contracts.Remove(this);
					}
					this._Representant.Entity = value;
					if ((value != null))
					{
						value.Contracts.Add(this);
						this._RepresentantId = value.RepresentantId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._RepresentantId = default(Nullable<int>);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Representant");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ContractAssociateds(ContractAssociated entity)
		{
			this.SendPropertyChanging();
			entity.Contract = this;
		}
		
		private void detach_ContractAssociateds(ContractAssociated entity)
		{
			this.SendPropertyChanging();
			entity.Contract = null;
		}
		
		private void attach_CustomerEquipments(CustomerEquipment entity)
		{
			this.SendPropertyChanging();
			entity.Contract = this;
		}
		
		private void detach_CustomerEquipments(CustomerEquipment entity)
		{
			this.SendPropertyChanging();
			entity.Contract = null;
		}
		
		private void attach_ServiceOrders(ServiceOrder entity)
		{
			this.SendPropertyChanging();
			entity.Contract = this;
		}
		
		private void detach_ServiceOrders(ServiceOrder entity)
		{
			this.SendPropertyChanging();
			entity.Contract = null;
		}
		
		private void Initialize()
		{
			this._ContractAssociateds = new EntitySet<ContractAssociated>(new Action<ContractAssociated>(this.attach_ContractAssociateds), new Action<ContractAssociated>(this.detach_ContractAssociateds));
			this._CustomerEquipments = new EntitySet<CustomerEquipment>(new Action<CustomerEquipment>(this.attach_CustomerEquipments), new Action<CustomerEquipment>(this.detach_CustomerEquipments));
			this._ServiceOrders = new EntitySet<ServiceOrder>(new Action<ServiceOrder>(this.attach_ServiceOrders), new Action<ServiceOrder>(this.detach_ServiceOrders));
			this._Company = default(EntityRef<Company>);
			this._Bill = default(EntityRef<Bill>);
			this._ContractStatus = default(EntityRef<ContractStatus>);
			this._ContractType = default(EntityRef<ContractType>);
			this._Customer = default(EntityRef<Customer>);
			this._Employee = default(EntityRef<Employee>);
			this._FinancierCondition = default(EntityRef<FinancierCondition>);
			this._FinancierOperation = default(EntityRef<FinancierOperation>);
			this._Invoice = default(EntityRef<Invoice>);
			this._Representant = default(EntityRef<Representant>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.ContractAssociated")]
	[DataContract()]
	public partial class ContractAssociated : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ContractAssociatedId;
		
		private decimal _Amount;
		
		private System.Nullable<System.DateTime> _PaidDate;
		
		private System.DateTime _DueDate;
		
		private System.Nullable<int> _ContractId;
		
		private int _CompanyId;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Contract> _Contract;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContractAssociatedIdChanging(int value);
    partial void OnContractAssociatedIdChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnPaidDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPaidDateChanged();
    partial void OnDueDateChanging(System.DateTime value);
    partial void OnDueDateChanged();
    partial void OnContractIdChanging(System.Nullable<int> value);
    partial void OnContractIdChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    #endregion
		
		public ContractAssociated()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ContractAssociatedId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int ContractAssociatedId
		{
			get
			{
				return this._ContractAssociatedId;
			}
			set
			{
				if ((this._ContractAssociatedId != value))
				{
					this.OnContractAssociatedIdChanging(value);
					this.SendPropertyChanging();
					this._ContractAssociatedId = value;
					this.SendPropertyChanged("ContractAssociatedId");
					this.OnContractAssociatedIdChanged();
				}
			}
		}
		
		[Column(Storage="_Amount", DbType="Decimal(18,2) NOT NULL")]
		[DataMember(Order=2)]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[Column(Storage="_PaidDate", DbType="DateTime")]
		[DataMember(Order=3)]
		public System.Nullable<System.DateTime> PaidDate
		{
			get
			{
				return this._PaidDate;
			}
			set
			{
				if ((this._PaidDate != value))
				{
					this.OnPaidDateChanging(value);
					this.SendPropertyChanging();
					this._PaidDate = value;
					this.SendPropertyChanged("PaidDate");
					this.OnPaidDateChanged();
				}
			}
		}
		
		[Column(Storage="_DueDate", DbType="DateTime NOT NULL")]
		[DataMember(Order=4)]
		public System.DateTime DueDate
		{
			get
			{
				return this._DueDate;
			}
			set
			{
				if ((this._DueDate != value))
				{
					this.OnDueDateChanging(value);
					this.SendPropertyChanging();
					this._DueDate = value;
					this.SendPropertyChanged("DueDate");
					this.OnDueDateChanged();
				}
			}
		}
		
		[Column(Storage="_ContractId", DbType="Int")]
		[DataMember(Order=5)]
		public System.Nullable<int> ContractId
		{
			get
			{
				return this._ContractId;
			}
			set
			{
				if ((this._ContractId != value))
				{
					if (this._Contract.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContractIdChanging(value);
					this.SendPropertyChanging();
					this._ContractId = value;
					this.SendPropertyChanged("ContractId");
					this.OnContractIdChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=6)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Contract.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Association(Name="Contract_ContractAssociated", Storage="_Contract", ThisKey="ContractId,CompanyId", OtherKey="ContractId,CompanyId", IsForeignKey=true)]
		public Contract Contract
		{
			get
			{
				return this._Contract.Entity;
			}
			set
			{
				Contract previousValue = this._Contract.Entity;
				if (((previousValue != value) 
							|| (this._Contract.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contract.Entity = null;
						previousValue.ContractAssociateds.Remove(this);
					}
					this._Contract.Entity = value;
					if ((value != null))
					{
						value.ContractAssociateds.Add(this);
						this._ContractId = value.ContractId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._ContractId = default(Nullable<int>);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Contract");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Contract = default(EntityRef<Contract>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.ContractPendency")]
	[DataContract()]
	public partial class ContractPendency : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ContractPendencyId;
		
		private int _CompanyId;
		
		private string _Name;
		
		private int _TermDays;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Company> _Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContractPendencyIdChanging(int value);
    partial void OnContractPendencyIdChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTermDaysChanging(int value);
    partial void OnTermDaysChanged();
    #endregion
		
		public ContractPendency()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ContractPendencyId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int ContractPendencyId
		{
			get
			{
				return this._ContractPendencyId;
			}
			set
			{
				if ((this._ContractPendencyId != value))
				{
					this.OnContractPendencyIdChanging(value);
					this.SendPropertyChanging();
					this._ContractPendencyId = value;
					this.SendPropertyChanged("ContractPendencyId");
					this.OnContractPendencyIdChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=2)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(128) NOT NULL", CanBeNull=false)]
		[DataMember(Order=3)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_TermDays", DbType="Int NOT NULL")]
		[DataMember(Order=4)]
		public int TermDays
		{
			get
			{
				return this._TermDays;
			}
			set
			{
				if ((this._TermDays != value))
				{
					this.OnTermDaysChanging(value);
					this.SendPropertyChanging();
					this._TermDays = value;
					this.SendPropertyChanged("TermDays");
					this.OnTermDaysChanged();
				}
			}
		}
		
		[Association(Name="Company_ContractPendency", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.ContractPendencies.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.ContractPendencies.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.ContractStatus")]
	[DataContract()]
	public partial class ContractStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ContractStatusId;
		
		private string _Name;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Contract> _Contracts;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContractStatusIdChanging(int value);
    partial void OnContractStatusIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public ContractStatus()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ContractStatusId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int ContractStatusId
		{
			get
			{
				return this._ContractStatusId;
			}
			set
			{
				if ((this._ContractStatusId != value))
				{
					this.OnContractStatusIdChanging(value);
					this.SendPropertyChanging();
					this._ContractStatusId = value;
					this.SendPropertyChanged("ContractStatusId");
					this.OnContractStatusIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(128)")]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="ContractStatus_Contract", Storage="_Contracts", ThisKey="ContractStatusId", OtherKey="ContractStatusId")]
		[DataMember(Order=3, EmitDefaultValue=false)]
		public EntitySet<Contract> Contracts
		{
			get
			{
				if ((this.serializing 
							&& (this._Contracts.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Contracts;
			}
			set
			{
				this._Contracts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Contracts(Contract entity)
		{
			this.SendPropertyChanging();
			entity.ContractStatus = this;
		}
		
		private void detach_Contracts(Contract entity)
		{
			this.SendPropertyChanging();
			entity.ContractStatus = null;
		}
		
		private void Initialize()
		{
			this._Contracts = new EntitySet<Contract>(new Action<Contract>(this.attach_Contracts), new Action<Contract>(this.detach_Contracts));
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.ContractType")]
	[DataContract()]
	public partial class ContractType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ContractTypeId;
		
		private int _CompanyId;
		
		private string _Name;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Contract> _Contracts;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Company> _Company;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContractTypeIdChanging(int value);
    partial void OnContractTypeIdChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public ContractType()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ContractTypeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int ContractTypeId
		{
			get
			{
				return this._ContractTypeId;
			}
			set
			{
				if ((this._ContractTypeId != value))
				{
					this.OnContractTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ContractTypeId = value;
					this.SendPropertyChanged("ContractTypeId");
					this.OnContractTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=2)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(128) NOT NULL", CanBeNull=false)]
		[DataMember(Order=3)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="ContractType_Contract", Storage="_Contracts", ThisKey="ContractTypeId,CompanyId", OtherKey="ContractTypeId,CompanyId")]
		[DataMember(Order=4, EmitDefaultValue=false)]
		public EntitySet<Contract> Contracts
		{
			get
			{
				if ((this.serializing 
							&& (this._Contracts.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Contracts;
			}
			set
			{
				this._Contracts.Assign(value);
			}
		}
		
		[Association(Name="Company_ContractType", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.ContractTypes.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.ContractTypes.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Contracts(Contract entity)
		{
			this.SendPropertyChanging();
			entity.ContractType = this;
		}
		
		private void detach_Contracts(Contract entity)
		{
			this.SendPropertyChanging();
			entity.ContractType = null;
		}
		
		private void Initialize()
		{
			this._Contracts = new EntitySet<Contract>(new Action<Contract>(this.attach_Contracts), new Action<Contract>(this.detach_Contracts));
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.CostCenter")]
	[DataContract()]
	public partial class CostCenter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CostCenterId;
		
		private string _Name;
		
		private int _CompanyId;
		
		private System.Nullable<int> _ParentId;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Bill> _Bills;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<CostCenter> _CostCenters;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Invoice> _Invoices;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<PurchaseRequest> _PurchaseRequests;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Company> _Company;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<CostCenter> _CostCenter1;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Company> _Company1;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCostCenterIdChanging(int value);
    partial void OnCostCenterIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnParentIdChanging(System.Nullable<int> value);
    partial void OnParentIdChanged();
    #endregion
		
		public CostCenter()
		{
			this.Initialize();
		}
		
		[Column(Storage="_CostCenterId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int CostCenterId
		{
			get
			{
				return this._CostCenterId;
			}
			set
			{
				if ((this._CostCenterId != value))
				{
					this.OnCostCenterIdChanging(value);
					this.SendPropertyChanging();
					this._CostCenterId = value;
					this.SendPropertyChanged("CostCenterId");
					this.OnCostCenterIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=3)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Column(Storage="_ParentId", DbType="Int")]
		[DataMember(Order=4)]
		public System.Nullable<int> ParentId
		{
			get
			{
				return this._ParentId;
			}
			set
			{
				if ((this._ParentId != value))
				{
					if (this._CostCenter1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIdChanging(value);
					this.SendPropertyChanging();
					this._ParentId = value;
					this.SendPropertyChanged("ParentId");
					this.OnParentIdChanged();
				}
			}
		}
		
		[Association(Name="CostCenter_Bill", Storage="_Bills", ThisKey="CostCenterId,CompanyId", OtherKey="CostCenterId,CompanyId")]
		[DataMember(Order=5, EmitDefaultValue=false)]
		public EntitySet<Bill> Bills
		{
			get
			{
				if ((this.serializing 
							&& (this._Bills.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Bills;
			}
			set
			{
				this._Bills.Assign(value);
			}
		}
		
		[Association(Name="CostCenter_CostCenter", Storage="_CostCenters", ThisKey="CostCenterId,CompanyId", OtherKey="ParentId,CompanyId")]
		[DataMember(Order=6, EmitDefaultValue=false)]
		public EntitySet<CostCenter> CostCenters
		{
			get
			{
				if ((this.serializing 
							&& (this._CostCenters.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._CostCenters;
			}
			set
			{
				this._CostCenters.Assign(value);
			}
		}
		
		[Association(Name="CostCenter_Invoice", Storage="_Invoices", ThisKey="CostCenterId,CompanyId", OtherKey="CostCenterId,CompanyId")]
		[DataMember(Order=7, EmitDefaultValue=false)]
		public EntitySet<Invoice> Invoices
		{
			get
			{
				if ((this.serializing 
							&& (this._Invoices.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Invoices;
			}
			set
			{
				this._Invoices.Assign(value);
			}
		}
		
		[Association(Name="CostCenter_PurchaseRequest", Storage="_PurchaseRequests", ThisKey="CostCenterId,CompanyId", OtherKey="CostCenterId,CompanyId")]
		[DataMember(Order=8, EmitDefaultValue=false)]
		public EntitySet<PurchaseRequest> PurchaseRequests
		{
			get
			{
				if ((this.serializing 
							&& (this._PurchaseRequests.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._PurchaseRequests;
			}
			set
			{
				this._PurchaseRequests.Assign(value);
			}
		}
		
		[Association(Name="Company_CostCenter", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.CostCenters.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.CostCenters.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[Association(Name="CostCenter_CostCenter", Storage="_CostCenter1", ThisKey="ParentId,CompanyId", OtherKey="CostCenterId,CompanyId", IsForeignKey=true)]
		public CostCenter CostCenter1
		{
			get
			{
				return this._CostCenter1.Entity;
			}
			set
			{
				CostCenter previousValue = this._CostCenter1.Entity;
				if (((previousValue != value) 
							|| (this._CostCenter1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CostCenter1.Entity = null;
						previousValue.CostCenters.Remove(this);
					}
					this._CostCenter1.Entity = value;
					if ((value != null))
					{
						value.CostCenters.Add(this);
						this._ParentId = value.CostCenterId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._ParentId = default(Nullable<int>);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("CostCenter1");
				}
			}
		}
		
		[Association(Name="Company_CostCenter1", Storage="_Company1", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Company Company1
		{
			get
			{
				return this._Company1.Entity;
			}
			set
			{
				Company previousValue = this._Company1.Entity;
				if (((previousValue != value) 
							|| (this._Company1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company1.Entity = null;
						previousValue.CostCenters1.Remove(this);
					}
					this._Company1.Entity = value;
					if ((value != null))
					{
						value.CostCenters1.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Bills(Bill entity)
		{
			this.SendPropertyChanging();
			entity.CostCenter = this;
		}
		
		private void detach_Bills(Bill entity)
		{
			this.SendPropertyChanging();
			entity.CostCenter = null;
		}
		
		private void attach_CostCenters(CostCenter entity)
		{
			this.SendPropertyChanging();
			entity.CostCenter1 = this;
		}
		
		private void detach_CostCenters(CostCenter entity)
		{
			this.SendPropertyChanging();
			entity.CostCenter1 = null;
		}
		
		private void attach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.CostCenter = this;
		}
		
		private void detach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.CostCenter = null;
		}
		
		private void attach_PurchaseRequests(PurchaseRequest entity)
		{
			this.SendPropertyChanging();
			entity.CostCenter = this;
		}
		
		private void detach_PurchaseRequests(PurchaseRequest entity)
		{
			this.SendPropertyChanging();
			entity.CostCenter = null;
		}
		
		private void Initialize()
		{
			this._Bills = new EntitySet<Bill>(new Action<Bill>(this.attach_Bills), new Action<Bill>(this.detach_Bills));
			this._CostCenters = new EntitySet<CostCenter>(new Action<CostCenter>(this.attach_CostCenters), new Action<CostCenter>(this.detach_CostCenters));
			this._Invoices = new EntitySet<Invoice>(new Action<Invoice>(this.attach_Invoices), new Action<Invoice>(this.detach_Invoices));
			this._PurchaseRequests = new EntitySet<PurchaseRequest>(new Action<PurchaseRequest>(this.attach_PurchaseRequests), new Action<PurchaseRequest>(this.detach_PurchaseRequests));
			this._Company = default(EntityRef<Company>);
			this._CostCenter1 = default(EntityRef<CostCenter>);
			this._Company1 = default(EntityRef<Company>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.CurrencyRate")]
	[DataContract()]
	public partial class CurrencyRate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CurrencyRateId;
		
		private string _Name;
		
		private string _Symbol;
		
		private System.Nullable<decimal> _EndOfDayRate;
		
		private System.DateTime _ModifiedDate;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Inventory> _Inventories;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCurrencyRateIdChanging(int value);
    partial void OnCurrencyRateIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSymbolChanging(string value);
    partial void OnSymbolChanged();
    partial void OnEndOfDayRateChanging(System.Nullable<decimal> value);
    partial void OnEndOfDayRateChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public CurrencyRate()
		{
			this.Initialize();
		}
		
		[Column(Storage="_CurrencyRateId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int CurrencyRateId
		{
			get
			{
				return this._CurrencyRateId;
			}
			set
			{
				if ((this._CurrencyRateId != value))
				{
					this.OnCurrencyRateIdChanging(value);
					this.SendPropertyChanging();
					this._CurrencyRateId = value;
					this.SendPropertyChanged("CurrencyRateId");
					this.OnCurrencyRateIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Symbol", DbType="Char(3) NOT NULL", CanBeNull=false)]
		[DataMember(Order=3)]
		public string Symbol
		{
			get
			{
				return this._Symbol;
			}
			set
			{
				if ((this._Symbol != value))
				{
					this.OnSymbolChanging(value);
					this.SendPropertyChanging();
					this._Symbol = value;
					this.SendPropertyChanged("Symbol");
					this.OnSymbolChanged();
				}
			}
		}
		
		[Column(Storage="_EndOfDayRate", DbType="Decimal(18,2)")]
		[DataMember(Order=4)]
		public System.Nullable<decimal> EndOfDayRate
		{
			get
			{
				return this._EndOfDayRate;
			}
			set
			{
				if ((this._EndOfDayRate != value))
				{
					this.OnEndOfDayRateChanging(value);
					this.SendPropertyChanging();
					this._EndOfDayRate = value;
					this.SendPropertyChanged("EndOfDayRate");
					this.OnEndOfDayRateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		[DataMember(Order=5)]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Association(Name="CurrencyRate_Inventory", Storage="_Inventories", ThisKey="CurrencyRateId", OtherKey="CurrencyRateId")]
		[DataMember(Order=6, EmitDefaultValue=false)]
		public EntitySet<Inventory> Inventories
		{
			get
			{
				if ((this.serializing 
							&& (this._Inventories.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Inventories;
			}
			set
			{
				this._Inventories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Inventories(Inventory entity)
		{
			this.SendPropertyChanging();
			entity.CurrencyRate = this;
		}
		
		private void detach_Inventories(Inventory entity)
		{
			this.SendPropertyChanging();
			entity.CurrencyRate = null;
		}
		
		private void Initialize()
		{
			this._Inventories = new EntitySet<Inventory>(new Action<Inventory>(this.attach_Inventories), new Action<Inventory>(this.detach_Inventories));
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.Customer")]
	[DataContract()]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CustomerId;
		
		private bool _BlockSalesInDebit;
		
		private System.Nullable<int> _CustomerTypeId;
		
		private System.Nullable<int> _ProfileId;
		
		private System.Nullable<int> _LegalEntityProfileId;
		
		private System.DateTime _ModifiedDate;
		
		private System.Nullable<int> _SalesPersonId;
		
		private int _CompanyId;
		
		private System.Nullable<int> _SupplementalSalesPersonId;
		
		private System.Nullable<decimal> _SalesPersonCommission;
		
		private System.Nullable<decimal> _SupplementalSalesPersonCommission;
		
		private System.Nullable<int> _UserId;
		
		private System.Nullable<int> _BankId;
		
		private string _Agency;
		
		private string _AccountNumber;
		
		private System.Nullable<System.DateTime> _AccountCreatedDate;
		
		private System.Nullable<int> _Ranking;
		
		private string _Observation;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<decimal> _CreditLimit;
		
		private System.Nullable<int> _RepresentantId;
		
		private string _CreatedByUser;
		
		private string _ModifiedByUser;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Budget> _Budgets;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Contract> _Contracts;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<CustomerCall> _CustomerCalls;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<CustomerContact> _CustomerContacts;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<CustomerEquipment> _CustomerEquipments;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Invoice> _Invoices;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Receipt> _Receipts;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Sale> _Sales;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<ServiceOrder> _ServiceOrders;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Bank> _Bank;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Company> _Company;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<CustomerType> _CustomerType;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Employee> _Employee;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Employee> _Employee1;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<LegalEntityProfile> _LegalEntityProfile;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Profile> _Profile;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Representant> _Representant;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<User> _User;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomerIdChanging(int value);
    partial void OnCustomerIdChanged();
    partial void OnBlockSalesInDebitChanging(bool value);
    partial void OnBlockSalesInDebitChanged();
    partial void OnCustomerTypeIdChanging(System.Nullable<int> value);
    partial void OnCustomerTypeIdChanged();
    partial void OnProfileIdChanging(System.Nullable<int> value);
    partial void OnProfileIdChanged();
    partial void OnLegalEntityProfileIdChanging(System.Nullable<int> value);
    partial void OnLegalEntityProfileIdChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnSalesPersonIdChanging(System.Nullable<int> value);
    partial void OnSalesPersonIdChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnSupplementalSalesPersonIdChanging(System.Nullable<int> value);
    partial void OnSupplementalSalesPersonIdChanged();
    partial void OnSalesPersonCommissionChanging(System.Nullable<decimal> value);
    partial void OnSalesPersonCommissionChanged();
    partial void OnSupplementalSalesPersonCommissionChanging(System.Nullable<decimal> value);
    partial void OnSupplementalSalesPersonCommissionChanged();
    partial void OnUserIdChanging(System.Nullable<int> value);
    partial void OnUserIdChanged();
    partial void OnBankIdChanging(System.Nullable<int> value);
    partial void OnBankIdChanged();
    partial void OnAgencyChanging(string value);
    partial void OnAgencyChanged();
    partial void OnAccountNumberChanging(string value);
    partial void OnAccountNumberChanged();
    partial void OnAccountCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAccountCreatedDateChanged();
    partial void OnRankingChanging(System.Nullable<int> value);
    partial void OnRankingChanged();
    partial void OnObservationChanging(string value);
    partial void OnObservationChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnCreditLimitChanging(System.Nullable<decimal> value);
    partial void OnCreditLimitChanged();
    partial void OnRepresentantIdChanging(System.Nullable<int> value);
    partial void OnRepresentantIdChanged();
    partial void OnCreatedByUserChanging(string value);
    partial void OnCreatedByUserChanged();
    partial void OnModifiedByUserChanging(string value);
    partial void OnModifiedByUserChanged();
    #endregion
		
		public Customer()
		{
			this.Initialize();
		}
		
		[Column(Storage="_CustomerId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int CustomerId
		{
			get
			{
				return this._CustomerId;
			}
			set
			{
				if ((this._CustomerId != value))
				{
					this.OnCustomerIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerId = value;
					this.SendPropertyChanged("CustomerId");
					this.OnCustomerIdChanged();
				}
			}
		}
		
		[Column(Storage="_BlockSalesInDebit", DbType="Bit NOT NULL")]
		[DataMember(Order=2)]
		public bool BlockSalesInDebit
		{
			get
			{
				return this._BlockSalesInDebit;
			}
			set
			{
				if ((this._BlockSalesInDebit != value))
				{
					this.OnBlockSalesInDebitChanging(value);
					this.SendPropertyChanging();
					this._BlockSalesInDebit = value;
					this.SendPropertyChanged("BlockSalesInDebit");
					this.OnBlockSalesInDebitChanged();
				}
			}
		}
		
		[Column(Storage="_CustomerTypeId", DbType="Int")]
		[DataMember(Order=3)]
		public System.Nullable<int> CustomerTypeId
		{
			get
			{
				return this._CustomerTypeId;
			}
			set
			{
				if ((this._CustomerTypeId != value))
				{
					if (this._CustomerType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerTypeIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerTypeId = value;
					this.SendPropertyChanged("CustomerTypeId");
					this.OnCustomerTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_ProfileId", DbType="Int")]
		[DataMember(Order=4)]
		public System.Nullable<int> ProfileId
		{
			get
			{
				return this._ProfileId;
			}
			set
			{
				if ((this._ProfileId != value))
				{
					if (this._Profile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProfileIdChanging(value);
					this.SendPropertyChanging();
					this._ProfileId = value;
					this.SendPropertyChanged("ProfileId");
					this.OnProfileIdChanged();
				}
			}
		}
		
		[Column(Storage="_LegalEntityProfileId", DbType="Int")]
		[DataMember(Order=5)]
		public System.Nullable<int> LegalEntityProfileId
		{
			get
			{
				return this._LegalEntityProfileId;
			}
			set
			{
				if ((this._LegalEntityProfileId != value))
				{
					if (this._LegalEntityProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLegalEntityProfileIdChanging(value);
					this.SendPropertyChanging();
					this._LegalEntityProfileId = value;
					this.SendPropertyChanged("LegalEntityProfileId");
					this.OnLegalEntityProfileIdChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		[DataMember(Order=6)]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_SalesPersonId", DbType="Int")]
		[DataMember(Order=7)]
		public System.Nullable<int> SalesPersonId
		{
			get
			{
				return this._SalesPersonId;
			}
			set
			{
				if ((this._SalesPersonId != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSalesPersonIdChanging(value);
					this.SendPropertyChanging();
					this._SalesPersonId = value;
					this.SendPropertyChanged("SalesPersonId");
					this.OnSalesPersonIdChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL")]
		[DataMember(Order=8)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Column(Storage="_SupplementalSalesPersonId", DbType="Int")]
		[DataMember(Order=9)]
		public System.Nullable<int> SupplementalSalesPersonId
		{
			get
			{
				return this._SupplementalSalesPersonId;
			}
			set
			{
				if ((this._SupplementalSalesPersonId != value))
				{
					if (this._Employee1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSupplementalSalesPersonIdChanging(value);
					this.SendPropertyChanging();
					this._SupplementalSalesPersonId = value;
					this.SendPropertyChanged("SupplementalSalesPersonId");
					this.OnSupplementalSalesPersonIdChanged();
				}
			}
		}
		
		[Column(Storage="_SalesPersonCommission", DbType="Decimal(18,2)")]
		[DataMember(Order=10)]
		public System.Nullable<decimal> SalesPersonCommission
		{
			get
			{
				return this._SalesPersonCommission;
			}
			set
			{
				if ((this._SalesPersonCommission != value))
				{
					this.OnSalesPersonCommissionChanging(value);
					this.SendPropertyChanging();
					this._SalesPersonCommission = value;
					this.SendPropertyChanged("SalesPersonCommission");
					this.OnSalesPersonCommissionChanged();
				}
			}
		}
		
		[Column(Storage="_SupplementalSalesPersonCommission", DbType="Decimal(18,2)")]
		[DataMember(Order=11)]
		public System.Nullable<decimal> SupplementalSalesPersonCommission
		{
			get
			{
				return this._SupplementalSalesPersonCommission;
			}
			set
			{
				if ((this._SupplementalSalesPersonCommission != value))
				{
					this.OnSupplementalSalesPersonCommissionChanging(value);
					this.SendPropertyChanging();
					this._SupplementalSalesPersonCommission = value;
					this.SendPropertyChanged("SupplementalSalesPersonCommission");
					this.OnSupplementalSalesPersonCommissionChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="Int")]
		[DataMember(Order=12)]
		public System.Nullable<int> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_BankId", DbType="Int")]
		[DataMember(Order=13)]
		public System.Nullable<int> BankId
		{
			get
			{
				return this._BankId;
			}
			set
			{
				if ((this._BankId != value))
				{
					if (this._Bank.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBankIdChanging(value);
					this.SendPropertyChanging();
					this._BankId = value;
					this.SendPropertyChanged("BankId");
					this.OnBankIdChanged();
				}
			}
		}
		
		[Column(Storage="_Agency", DbType="VarChar(10)")]
		[DataMember(Order=14)]
		public string Agency
		{
			get
			{
				return this._Agency;
			}
			set
			{
				if ((this._Agency != value))
				{
					this.OnAgencyChanging(value);
					this.SendPropertyChanging();
					this._Agency = value;
					this.SendPropertyChanged("Agency");
					this.OnAgencyChanged();
				}
			}
		}
		
		[Column(Storage="_AccountNumber", DbType="VarChar(10)")]
		[DataMember(Order=15)]
		public string AccountNumber
		{
			get
			{
				return this._AccountNumber;
			}
			set
			{
				if ((this._AccountNumber != value))
				{
					this.OnAccountNumberChanging(value);
					this.SendPropertyChanging();
					this._AccountNumber = value;
					this.SendPropertyChanged("AccountNumber");
					this.OnAccountNumberChanged();
				}
			}
		}
		
		[Column(Storage="_AccountCreatedDate", DbType="DateTime")]
		[DataMember(Order=16)]
		public System.Nullable<System.DateTime> AccountCreatedDate
		{
			get
			{
				return this._AccountCreatedDate;
			}
			set
			{
				if ((this._AccountCreatedDate != value))
				{
					this.OnAccountCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._AccountCreatedDate = value;
					this.SendPropertyChanged("AccountCreatedDate");
					this.OnAccountCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_Ranking", DbType="Int")]
		[DataMember(Order=17)]
		public System.Nullable<int> Ranking
		{
			get
			{
				return this._Ranking;
			}
			set
			{
				if ((this._Ranking != value))
				{
					this.OnRankingChanging(value);
					this.SendPropertyChanging();
					this._Ranking = value;
					this.SendPropertyChanged("Ranking");
					this.OnRankingChanged();
				}
			}
		}
		
		[Column(Storage="_Observation", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=18)]
		public string Observation
		{
			get
			{
				return this._Observation;
			}
			set
			{
				if ((this._Observation != value))
				{
					this.OnObservationChanging(value);
					this.SendPropertyChanging();
					this._Observation = value;
					this.SendPropertyChanged("Observation");
					this.OnObservationChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime")]
		[DataMember(Order=19)]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_CreditLimit", DbType="Decimal(18,2)")]
		[DataMember(Order=20)]
		public System.Nullable<decimal> CreditLimit
		{
			get
			{
				return this._CreditLimit;
			}
			set
			{
				if ((this._CreditLimit != value))
				{
					this.OnCreditLimitChanging(value);
					this.SendPropertyChanging();
					this._CreditLimit = value;
					this.SendPropertyChanged("CreditLimit");
					this.OnCreditLimitChanged();
				}
			}
		}
		
		[Column(Storage="_RepresentantId", DbType="Int")]
		[DataMember(Order=21)]
		public System.Nullable<int> RepresentantId
		{
			get
			{
				return this._RepresentantId;
			}
			set
			{
				if ((this._RepresentantId != value))
				{
					if (this._Representant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRepresentantIdChanging(value);
					this.SendPropertyChanging();
					this._RepresentantId = value;
					this.SendPropertyChanged("RepresentantId");
					this.OnRepresentantIdChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedByUser", DbType="VarChar(50)")]
		[DataMember(Order=22)]
		public string CreatedByUser
		{
			get
			{
				return this._CreatedByUser;
			}
			set
			{
				if ((this._CreatedByUser != value))
				{
					this.OnCreatedByUserChanging(value);
					this.SendPropertyChanging();
					this._CreatedByUser = value;
					this.SendPropertyChanged("CreatedByUser");
					this.OnCreatedByUserChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedByUser", DbType="VarChar(50)")]
		[DataMember(Order=23)]
		public string ModifiedByUser
		{
			get
			{
				return this._ModifiedByUser;
			}
			set
			{
				if ((this._ModifiedByUser != value))
				{
					this.OnModifiedByUserChanging(value);
					this.SendPropertyChanging();
					this._ModifiedByUser = value;
					this.SendPropertyChanged("ModifiedByUser");
					this.OnModifiedByUserChanged();
				}
			}
		}
		
		[Association(Name="Customer_Budget", Storage="_Budgets", ThisKey="CustomerId", OtherKey="CustomerId")]
		[DataMember(Order=24, EmitDefaultValue=false)]
		public EntitySet<Budget> Budgets
		{
			get
			{
				if ((this.serializing 
							&& (this._Budgets.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Budgets;
			}
			set
			{
				this._Budgets.Assign(value);
			}
		}
		
		[Association(Name="Customer_Contract", Storage="_Contracts", ThisKey="CustomerId", OtherKey="CustomerId")]
		[DataMember(Order=25, EmitDefaultValue=false)]
		public EntitySet<Contract> Contracts
		{
			get
			{
				if ((this.serializing 
							&& (this._Contracts.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Contracts;
			}
			set
			{
				this._Contracts.Assign(value);
			}
		}
		
		[Association(Name="Customer_CustomerCall", Storage="_CustomerCalls", ThisKey="CustomerId", OtherKey="CustomerId")]
		[DataMember(Order=26, EmitDefaultValue=false)]
		public EntitySet<CustomerCall> CustomerCalls
		{
			get
			{
				if ((this.serializing 
							&& (this._CustomerCalls.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._CustomerCalls;
			}
			set
			{
				this._CustomerCalls.Assign(value);
			}
		}
		
		[Association(Name="Customer_CustomerContact", Storage="_CustomerContacts", ThisKey="CustomerId", OtherKey="CustomerId")]
		[DataMember(Order=27, EmitDefaultValue=false)]
		public EntitySet<CustomerContact> CustomerContacts
		{
			get
			{
				if ((this.serializing 
							&& (this._CustomerContacts.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._CustomerContacts;
			}
			set
			{
				this._CustomerContacts.Assign(value);
			}
		}
		
		[Association(Name="Customer_CustomerEquipment", Storage="_CustomerEquipments", ThisKey="CustomerId", OtherKey="CustomerId")]
		[DataMember(Order=28, EmitDefaultValue=false)]
		public EntitySet<CustomerEquipment> CustomerEquipments
		{
			get
			{
				if ((this.serializing 
							&& (this._CustomerEquipments.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._CustomerEquipments;
			}
			set
			{
				this._CustomerEquipments.Assign(value);
			}
		}
		
		[Association(Name="Customer_Invoice", Storage="_Invoices", ThisKey="CustomerId", OtherKey="CustomerId")]
		[DataMember(Order=29, EmitDefaultValue=false)]
		public EntitySet<Invoice> Invoices
		{
			get
			{
				if ((this.serializing 
							&& (this._Invoices.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Invoices;
			}
			set
			{
				this._Invoices.Assign(value);
			}
		}
		
		[Association(Name="Customer_Receipt", Storage="_Receipts", ThisKey="CustomerId", OtherKey="CustomerId")]
		[DataMember(Order=30, EmitDefaultValue=false)]
		public EntitySet<Receipt> Receipts
		{
			get
			{
				if ((this.serializing 
							&& (this._Receipts.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Receipts;
			}
			set
			{
				this._Receipts.Assign(value);
			}
		}
		
		[Association(Name="Customer_Sale", Storage="_Sales", ThisKey="CustomerId", OtherKey="CustomerId")]
		[DataMember(Order=31, EmitDefaultValue=false)]
		public EntitySet<Sale> Sales
		{
			get
			{
				if ((this.serializing 
							&& (this._Sales.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Sales;
			}
			set
			{
				this._Sales.Assign(value);
			}
		}
		
		[Association(Name="Customer_ServiceOrder", Storage="_ServiceOrders", ThisKey="CustomerId", OtherKey="CustomerId")]
		[DataMember(Order=32, EmitDefaultValue=false)]
		public EntitySet<ServiceOrder> ServiceOrders
		{
			get
			{
				if ((this.serializing 
							&& (this._ServiceOrders.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ServiceOrders;
			}
			set
			{
				this._ServiceOrders.Assign(value);
			}
		}
		
		[Association(Name="Bank_Customer", Storage="_Bank", ThisKey="BankId", OtherKey="BankId", IsForeignKey=true)]
		public Bank Bank
		{
			get
			{
				return this._Bank.Entity;
			}
			set
			{
				Bank previousValue = this._Bank.Entity;
				if (((previousValue != value) 
							|| (this._Bank.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bank.Entity = null;
						previousValue.Customers.Remove(this);
					}
					this._Bank.Entity = value;
					if ((value != null))
					{
						value.Customers.Add(this);
						this._BankId = value.BankId;
					}
					else
					{
						this._BankId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Bank");
				}
			}
		}
		
		[Association(Name="Company_Customer", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Customers.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Customers.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[Association(Name="CustomerType_Customer", Storage="_CustomerType", ThisKey="CustomerTypeId,CompanyId", OtherKey="CustomerTypeId,CompanyId", IsForeignKey=true)]
		public CustomerType CustomerType
		{
			get
			{
				return this._CustomerType.Entity;
			}
			set
			{
				CustomerType previousValue = this._CustomerType.Entity;
				if (((previousValue != value) 
							|| (this._CustomerType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CustomerType.Entity = null;
						previousValue.Customers.Remove(this);
					}
					this._CustomerType.Entity = value;
					if ((value != null))
					{
						value.Customers.Add(this);
						this._CustomerTypeId = value.CustomerTypeId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CustomerTypeId = default(Nullable<int>);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("CustomerType");
				}
			}
		}
		
		[Association(Name="Employee_Customer", Storage="_Employee", ThisKey="SalesPersonId,CompanyId", OtherKey="EmployeeId,CompanyId", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Customers.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Customers.Add(this);
						this._SalesPersonId = value.EmployeeId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._SalesPersonId = default(Nullable<int>);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[Association(Name="Employee_Customer1", Storage="_Employee1", ThisKey="SupplementalSalesPersonId,CompanyId", OtherKey="EmployeeId,CompanyId", IsForeignKey=true)]
		public Employee Employee1
		{
			get
			{
				return this._Employee1.Entity;
			}
			set
			{
				Employee previousValue = this._Employee1.Entity;
				if (((previousValue != value) 
							|| (this._Employee1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee1.Entity = null;
						previousValue.Customers1.Remove(this);
					}
					this._Employee1.Entity = value;
					if ((value != null))
					{
						value.Customers1.Add(this);
						this._SupplementalSalesPersonId = value.EmployeeId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._SupplementalSalesPersonId = default(Nullable<int>);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Employee1");
				}
			}
		}
		
		[Association(Name="LegalEntityProfile_Customer", Storage="_LegalEntityProfile", ThisKey="LegalEntityProfileId", OtherKey="LegalEntityProfileId", IsForeignKey=true)]
		public LegalEntityProfile LegalEntityProfile
		{
			get
			{
				return this._LegalEntityProfile.Entity;
			}
			set
			{
				LegalEntityProfile previousValue = this._LegalEntityProfile.Entity;
				if (((previousValue != value) 
							|| (this._LegalEntityProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LegalEntityProfile.Entity = null;
						previousValue.Customers.Remove(this);
					}
					this._LegalEntityProfile.Entity = value;
					if ((value != null))
					{
						value.Customers.Add(this);
						this._LegalEntityProfileId = value.LegalEntityProfileId;
					}
					else
					{
						this._LegalEntityProfileId = default(Nullable<int>);
					}
					this.SendPropertyChanged("LegalEntityProfile");
				}
			}
		}
		
		[Association(Name="Profile_Customer", Storage="_Profile", ThisKey="ProfileId", OtherKey="ProfileId", IsForeignKey=true)]
		public Profile Profile
		{
			get
			{
				return this._Profile.Entity;
			}
			set
			{
				Profile previousValue = this._Profile.Entity;
				if (((previousValue != value) 
							|| (this._Profile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Profile.Entity = null;
						previousValue.Customers.Remove(this);
					}
					this._Profile.Entity = value;
					if ((value != null))
					{
						value.Customers.Add(this);
						this._ProfileId = value.ProfileId;
					}
					else
					{
						this._ProfileId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Profile");
				}
			}
		}
		
		[Association(Name="Representant_Customer", Storage="_Representant", ThisKey="RepresentantId,CompanyId", OtherKey="RepresentantId,CompanyId", IsForeignKey=true)]
		public Representant Representant
		{
			get
			{
				return this._Representant.Entity;
			}
			set
			{
				Representant previousValue = this._Representant.Entity;
				if (((previousValue != value) 
							|| (this._Representant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Representant.Entity = null;
						previousValue.Customers.Remove(this);
					}
					this._Representant.Entity = value;
					if ((value != null))
					{
						value.Customers.Add(this);
						this._RepresentantId = value.RepresentantId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._RepresentantId = default(Nullable<int>);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Representant");
				}
			}
		}
		
		[Association(Name="User_Customer", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Customers.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Customers.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Budgets(Budget entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Budgets(Budget entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_Contracts(Contract entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Contracts(Contract entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_CustomerCalls(CustomerCall entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_CustomerCalls(CustomerCall entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_CustomerContacts(CustomerContact entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_CustomerContacts(CustomerContact entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_CustomerEquipments(CustomerEquipment entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_CustomerEquipments(CustomerEquipment entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_Receipts(Receipt entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Receipts(Receipt entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_Sales(Sale entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Sales(Sale entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_ServiceOrders(ServiceOrder entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_ServiceOrders(ServiceOrder entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void Initialize()
		{
			this._Budgets = new EntitySet<Budget>(new Action<Budget>(this.attach_Budgets), new Action<Budget>(this.detach_Budgets));
			this._Contracts = new EntitySet<Contract>(new Action<Contract>(this.attach_Contracts), new Action<Contract>(this.detach_Contracts));
			this._CustomerCalls = new EntitySet<CustomerCall>(new Action<CustomerCall>(this.attach_CustomerCalls), new Action<CustomerCall>(this.detach_CustomerCalls));
			this._CustomerContacts = new EntitySet<CustomerContact>(new Action<CustomerContact>(this.attach_CustomerContacts), new Action<CustomerContact>(this.detach_CustomerContacts));
			this._CustomerEquipments = new EntitySet<CustomerEquipment>(new Action<CustomerEquipment>(this.attach_CustomerEquipments), new Action<CustomerEquipment>(this.detach_CustomerEquipments));
			this._Invoices = new EntitySet<Invoice>(new Action<Invoice>(this.attach_Invoices), new Action<Invoice>(this.detach_Invoices));
			this._Receipts = new EntitySet<Receipt>(new Action<Receipt>(this.attach_Receipts), new Action<Receipt>(this.detach_Receipts));
			this._Sales = new EntitySet<Sale>(new Action<Sale>(this.attach_Sales), new Action<Sale>(this.detach_Sales));
			this._ServiceOrders = new EntitySet<ServiceOrder>(new Action<ServiceOrder>(this.attach_ServiceOrders), new Action<ServiceOrder>(this.detach_ServiceOrders));
			this._Bank = default(EntityRef<Bank>);
			this._Company = default(EntityRef<Company>);
			this._CustomerType = default(EntityRef<CustomerType>);
			this._Employee = default(EntityRef<Employee>);
			this._Employee1 = default(EntityRef<Employee>);
			this._LegalEntityProfile = default(EntityRef<LegalEntityProfile>);
			this._Profile = default(EntityRef<Profile>);
			this._Representant = default(EntityRef<Representant>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.CustomerCall")]
	[DataContract()]
	public partial class CustomerCall : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CompanyId;
		
		private int _CustomerCallId;
		
		private System.DateTime _ModifiedDate;
		
		private int _CustomerId;
		
		private string _CallNumber;
		
		private string _CallNumberAssociated;
		
		private string _Sector;
		
		private System.DateTime _OpenedDate;
		
		private System.Nullable<System.DateTime> _ClosedDate;
		
		private System.Nullable<int> _CustomerEquipmentId;
		
		private string _Description;
		
		private int _CustomerCallTypeId;
		
		private string _Subject;
		
		private System.Nullable<int> _CustomerCallStatusId;
		
		private System.Nullable<int> _UserId;
		
		private System.Nullable<int> _TechnicalEmployeeId;
		
		private string _Source;
		
		private System.Nullable<int> _Rating;
		
		private System.Nullable<int> _EventId;
		
		private System.Nullable<int> _RepresentantId;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private string _CreatedByUser;
		
		private string _ModifiedByUser;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<ExpenditureAuthorization> _ExpenditureAuthorizations;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<ServiceOrder> _ServiceOrders;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Customer> _Customer;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Company> _Company;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<CustomerCallStatus> _CustomerCallStatus;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<CustomerCallType> _CustomerCallType;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<CustomerEquipment> _CustomerEquipment;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Employee> _Employee;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Event> _Event;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Representant> _Representant;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<User> _User;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnCustomerCallIdChanging(int value);
    partial void OnCustomerCallIdChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnCustomerIdChanging(int value);
    partial void OnCustomerIdChanged();
    partial void OnCallNumberChanging(string value);
    partial void OnCallNumberChanged();
    partial void OnCallNumberAssociatedChanging(string value);
    partial void OnCallNumberAssociatedChanged();
    partial void OnSectorChanging(string value);
    partial void OnSectorChanged();
    partial void OnOpenedDateChanging(System.DateTime value);
    partial void OnOpenedDateChanged();
    partial void OnClosedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnClosedDateChanged();
    partial void OnCustomerEquipmentIdChanging(System.Nullable<int> value);
    partial void OnCustomerEquipmentIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCustomerCallTypeIdChanging(int value);
    partial void OnCustomerCallTypeIdChanged();
    partial void OnSubjectChanging(string value);
    partial void OnSubjectChanged();
    partial void OnCustomerCallStatusIdChanging(System.Nullable<int> value);
    partial void OnCustomerCallStatusIdChanged();
    partial void OnUserIdChanging(System.Nullable<int> value);
    partial void OnUserIdChanged();
    partial void OnTechnicalEmployeeIdChanging(System.Nullable<int> value);
    partial void OnTechnicalEmployeeIdChanged();
    partial void OnSourceChanging(string value);
    partial void OnSourceChanged();
    partial void OnRatingChanging(System.Nullable<int> value);
    partial void OnRatingChanged();
    partial void OnEventIdChanging(System.Nullable<int> value);
    partial void OnEventIdChanged();
    partial void OnRepresentantIdChanging(System.Nullable<int> value);
    partial void OnRepresentantIdChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnCreatedByUserChanging(string value);
    partial void OnCreatedByUserChanged();
    partial void OnModifiedByUserChanging(string value);
    partial void OnModifiedByUserChanged();
    #endregion
		
		public CustomerCall()
		{
			this.Initialize();
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=1)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Column(Storage="_CustomerCallId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=2)]
		public int CustomerCallId
		{
			get
			{
				return this._CustomerCallId;
			}
			set
			{
				if ((this._CustomerCallId != value))
				{
					this.OnCustomerCallIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerCallId = value;
					this.SendPropertyChanged("CustomerCallId");
					this.OnCustomerCallIdChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		[DataMember(Order=3)]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_CustomerId", DbType="Int NOT NULL")]
		[DataMember(Order=4)]
		public int CustomerId
		{
			get
			{
				return this._CustomerId;
			}
			set
			{
				if ((this._CustomerId != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerId = value;
					this.SendPropertyChanged("CustomerId");
					this.OnCustomerIdChanged();
				}
			}
		}
		
		[Column(Storage="_CallNumber", DbType="VarChar(1024) NOT NULL", CanBeNull=false)]
		[DataMember(Order=5)]
		public string CallNumber
		{
			get
			{
				return this._CallNumber;
			}
			set
			{
				if ((this._CallNumber != value))
				{
					this.OnCallNumberChanging(value);
					this.SendPropertyChanging();
					this._CallNumber = value;
					this.SendPropertyChanged("CallNumber");
					this.OnCallNumberChanged();
				}
			}
		}
		
		[Column(Storage="_CallNumberAssociated", DbType="VarChar(1024)")]
		[DataMember(Order=6)]
		public string CallNumberAssociated
		{
			get
			{
				return this._CallNumberAssociated;
			}
			set
			{
				if ((this._CallNumberAssociated != value))
				{
					this.OnCallNumberAssociatedChanging(value);
					this.SendPropertyChanging();
					this._CallNumberAssociated = value;
					this.SendPropertyChanged("CallNumberAssociated");
					this.OnCallNumberAssociatedChanged();
				}
			}
		}
		
		[Column(Storage="_Sector", DbType="VarChar(1024)")]
		[DataMember(Order=7)]
		public string Sector
		{
			get
			{
				return this._Sector;
			}
			set
			{
				if ((this._Sector != value))
				{
					this.OnSectorChanging(value);
					this.SendPropertyChanging();
					this._Sector = value;
					this.SendPropertyChanged("Sector");
					this.OnSectorChanged();
				}
			}
		}
		
		[Column(Storage="_OpenedDate", DbType="DateTime NOT NULL")]
		[DataMember(Order=8)]
		public System.DateTime OpenedDate
		{
			get
			{
				return this._OpenedDate;
			}
			set
			{
				if ((this._OpenedDate != value))
				{
					this.OnOpenedDateChanging(value);
					this.SendPropertyChanging();
					this._OpenedDate = value;
					this.SendPropertyChanged("OpenedDate");
					this.OnOpenedDateChanged();
				}
			}
		}
		
		[Column(Storage="_ClosedDate", DbType="DateTime")]
		[DataMember(Order=9)]
		public System.Nullable<System.DateTime> ClosedDate
		{
			get
			{
				return this._ClosedDate;
			}
			set
			{
				if ((this._ClosedDate != value))
				{
					this.OnClosedDateChanging(value);
					this.SendPropertyChanging();
					this._ClosedDate = value;
					this.SendPropertyChanged("ClosedDate");
					this.OnClosedDateChanged();
				}
			}
		}
		
		[Column(Storage="_CustomerEquipmentId", DbType="Int")]
		[DataMember(Order=10)]
		public System.Nullable<int> CustomerEquipmentId
		{
			get
			{
				return this._CustomerEquipmentId;
			}
			set
			{
				if ((this._CustomerEquipmentId != value))
				{
					if (this._CustomerEquipment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerEquipmentIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerEquipmentId = value;
					this.SendPropertyChanged("CustomerEquipmentId");
					this.OnCustomerEquipmentIdChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=11)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_CustomerCallTypeId", DbType="Int NOT NULL")]
		[DataMember(Order=12)]
		public int CustomerCallTypeId
		{
			get
			{
				return this._CustomerCallTypeId;
			}
			set
			{
				if ((this._CustomerCallTypeId != value))
				{
					if (this._CustomerCallType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerCallTypeIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerCallTypeId = value;
					this.SendPropertyChanged("CustomerCallTypeId");
					this.OnCustomerCallTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_Subject", DbType="VarChar(1024)")]
		[DataMember(Order=13)]
		public string Subject
		{
			get
			{
				return this._Subject;
			}
			set
			{
				if ((this._Subject != value))
				{
					this.OnSubjectChanging(value);
					this.SendPropertyChanging();
					this._Subject = value;
					this.SendPropertyChanged("Subject");
					this.OnSubjectChanged();
				}
			}
		}
		
		[Column(Storage="_CustomerCallStatusId", DbType="Int")]
		[DataMember(Order=14)]
		public System.Nullable<int> CustomerCallStatusId
		{
			get
			{
				return this._CustomerCallStatusId;
			}
			set
			{
				if ((this._CustomerCallStatusId != value))
				{
					if (this._CustomerCallStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerCallStatusIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerCallStatusId = value;
					this.SendPropertyChanged("CustomerCallStatusId");
					this.OnCustomerCallStatusIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="Int")]
		[DataMember(Order=15)]
		public System.Nullable<int> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_TechnicalEmployeeId", DbType="Int")]
		[DataMember(Order=16)]
		public System.Nullable<int> TechnicalEmployeeId
		{
			get
			{
				return this._TechnicalEmployeeId;
			}
			set
			{
				if ((this._TechnicalEmployeeId != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTechnicalEmployeeIdChanging(value);
					this.SendPropertyChanging();
					this._TechnicalEmployeeId = value;
					this.SendPropertyChanged("TechnicalEmployeeId");
					this.OnTechnicalEmployeeIdChanged();
				}
			}
		}
		
		[Column(Storage="_Source", DbType="VarChar(1024)")]
		[DataMember(Order=17)]
		public string Source
		{
			get
			{
				return this._Source;
			}
			set
			{
				if ((this._Source != value))
				{
					this.OnSourceChanging(value);
					this.SendPropertyChanging();
					this._Source = value;
					this.SendPropertyChanged("Source");
					this.OnSourceChanged();
				}
			}
		}
		
		[Column(Storage="_Rating", DbType="Int")]
		[DataMember(Order=18)]
		public System.Nullable<int> Rating
		{
			get
			{
				return this._Rating;
			}
			set
			{
				if ((this._Rating != value))
				{
					this.OnRatingChanging(value);
					this.SendPropertyChanging();
					this._Rating = value;
					this.SendPropertyChanged("Rating");
					this.OnRatingChanged();
				}
			}
		}
		
		[Column(Storage="_EventId", DbType="Int")]
		[DataMember(Order=19)]
		public System.Nullable<int> EventId
		{
			get
			{
				return this._EventId;
			}
			set
			{
				if ((this._EventId != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventIdChanging(value);
					this.SendPropertyChanging();
					this._EventId = value;
					this.SendPropertyChanged("EventId");
					this.OnEventIdChanged();
				}
			}
		}
		
		[Column(Storage="_RepresentantId", DbType="Int")]
		[DataMember(Order=20)]
		public System.Nullable<int> RepresentantId
		{
			get
			{
				return this._RepresentantId;
			}
			set
			{
				if ((this._RepresentantId != value))
				{
					if (this._Representant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRepresentantIdChanging(value);
					this.SendPropertyChanging();
					this._RepresentantId = value;
					this.SendPropertyChanged("RepresentantId");
					this.OnRepresentantIdChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime")]
		[DataMember(Order=21)]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedByUser", DbType="VarChar(50)")]
		[DataMember(Order=22)]
		public string CreatedByUser
		{
			get
			{
				return this._CreatedByUser;
			}
			set
			{
				if ((this._CreatedByUser != value))
				{
					this.OnCreatedByUserChanging(value);
					this.SendPropertyChanging();
					this._CreatedByUser = value;
					this.SendPropertyChanged("CreatedByUser");
					this.OnCreatedByUserChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedByUser", DbType="VarChar(50)")]
		[DataMember(Order=23)]
		public string ModifiedByUser
		{
			get
			{
				return this._ModifiedByUser;
			}
			set
			{
				if ((this._ModifiedByUser != value))
				{
					this.OnModifiedByUserChanging(value);
					this.SendPropertyChanging();
					this._ModifiedByUser = value;
					this.SendPropertyChanged("ModifiedByUser");
					this.OnModifiedByUserChanged();
				}
			}
		}
		
		[Association(Name="CustomerCall_ExpenditureAuthorization", Storage="_ExpenditureAuthorizations", ThisKey="CustomerCallId,CompanyId", OtherKey="CustomerCallId,CompanyId")]
		[DataMember(Order=24, EmitDefaultValue=false)]
		public EntitySet<ExpenditureAuthorization> ExpenditureAuthorizations
		{
			get
			{
				if ((this.serializing 
							&& (this._ExpenditureAuthorizations.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ExpenditureAuthorizations;
			}
			set
			{
				this._ExpenditureAuthorizations.Assign(value);
			}
		}
		
		[Association(Name="CustomerCall_ServiceOrder", Storage="_ServiceOrders", ThisKey="CustomerCallId,CompanyId", OtherKey="CustomerCallId,CompanyId")]
		[DataMember(Order=25, EmitDefaultValue=false)]
		public EntitySet<ServiceOrder> ServiceOrders
		{
			get
			{
				if ((this.serializing 
							&& (this._ServiceOrders.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ServiceOrders;
			}
			set
			{
				this._ServiceOrders.Assign(value);
			}
		}
		
		[Association(Name="Customer_CustomerCall", Storage="_Customer", ThisKey="CustomerId", OtherKey="CustomerId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.CustomerCalls.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.CustomerCalls.Add(this);
						this._CustomerId = value.CustomerId;
					}
					else
					{
						this._CustomerId = default(int);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[Association(Name="Company_CustomerCall", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.CustomerCalls.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.CustomerCalls.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[Association(Name="CustomerCallStatus_CustomerCall", Storage="_CustomerCallStatus", ThisKey="CustomerCallStatusId", OtherKey="CustomerCallStatusId", IsForeignKey=true)]
		public CustomerCallStatus CustomerCallStatus
		{
			get
			{
				return this._CustomerCallStatus.Entity;
			}
			set
			{
				CustomerCallStatus previousValue = this._CustomerCallStatus.Entity;
				if (((previousValue != value) 
							|| (this._CustomerCallStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CustomerCallStatus.Entity = null;
						previousValue.CustomerCalls.Remove(this);
					}
					this._CustomerCallStatus.Entity = value;
					if ((value != null))
					{
						value.CustomerCalls.Add(this);
						this._CustomerCallStatusId = value.CustomerCallStatusId;
					}
					else
					{
						this._CustomerCallStatusId = default(Nullable<int>);
					}
					this.SendPropertyChanged("CustomerCallStatus");
				}
			}
		}
		
		[Association(Name="CustomerCallType_CustomerCall", Storage="_CustomerCallType", ThisKey="CustomerCallTypeId", OtherKey="CustomerCallTypeId", IsForeignKey=true)]
		public CustomerCallType CustomerCallType
		{
			get
			{
				return this._CustomerCallType.Entity;
			}
			set
			{
				CustomerCallType previousValue = this._CustomerCallType.Entity;
				if (((previousValue != value) 
							|| (this._CustomerCallType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CustomerCallType.Entity = null;
						previousValue.CustomerCalls.Remove(this);
					}
					this._CustomerCallType.Entity = value;
					if ((value != null))
					{
						value.CustomerCalls.Add(this);
						this._CustomerCallTypeId = value.CustomerCallTypeId;
					}
					else
					{
						this._CustomerCallTypeId = default(int);
					}
					this.SendPropertyChanged("CustomerCallType");
				}
			}
		}
		
		[Association(Name="CustomerEquipment_CustomerCall", Storage="_CustomerEquipment", ThisKey="CustomerId,CustomerEquipmentId", OtherKey="CustomerId,CustomerEquipmentId", IsForeignKey=true)]
		public CustomerEquipment CustomerEquipment
		{
			get
			{
				return this._CustomerEquipment.Entity;
			}
			set
			{
				CustomerEquipment previousValue = this._CustomerEquipment.Entity;
				if (((previousValue != value) 
							|| (this._CustomerEquipment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CustomerEquipment.Entity = null;
						previousValue.CustomerCalls.Remove(this);
					}
					this._CustomerEquipment.Entity = value;
					if ((value != null))
					{
						value.CustomerCalls.Add(this);
						this._CustomerId = value.CustomerId;
						this._CustomerEquipmentId = value.CustomerEquipmentId;
					}
					else
					{
						this._CustomerId = default(int);
						this._CustomerEquipmentId = default(Nullable<int>);
					}
					this.SendPropertyChanged("CustomerEquipment");
				}
			}
		}
		
		[Association(Name="Employee_CustomerCall", Storage="_Employee", ThisKey="TechnicalEmployeeId,CompanyId", OtherKey="EmployeeId,CompanyId", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.CustomerCalls.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.CustomerCalls.Add(this);
						this._TechnicalEmployeeId = value.EmployeeId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._TechnicalEmployeeId = default(Nullable<int>);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[Association(Name="Event_CustomerCall", Storage="_Event", ThisKey="EventId", OtherKey="EventId", IsForeignKey=true)]
		public Event Event
		{
			get
			{
				return this._Event.Entity;
			}
			set
			{
				Event previousValue = this._Event.Entity;
				if (((previousValue != value) 
							|| (this._Event.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Event.Entity = null;
						previousValue.CustomerCalls.Remove(this);
					}
					this._Event.Entity = value;
					if ((value != null))
					{
						value.CustomerCalls.Add(this);
						this._EventId = value.EventId;
					}
					else
					{
						this._EventId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Event");
				}
			}
		}
		
		[Association(Name="Representant_CustomerCall", Storage="_Representant", ThisKey="CompanyId,RepresentantId", OtherKey="CompanyId,RepresentantId", IsForeignKey=true)]
		public Representant Representant
		{
			get
			{
				return this._Representant.Entity;
			}
			set
			{
				Representant previousValue = this._Representant.Entity;
				if (((previousValue != value) 
							|| (this._Representant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Representant.Entity = null;
						previousValue.CustomerCalls.Remove(this);
					}
					this._Representant.Entity = value;
					if ((value != null))
					{
						value.CustomerCalls.Add(this);
						this._CompanyId = value.CompanyId;
						this._RepresentantId = value.RepresentantId;
					}
					else
					{
						this._CompanyId = default(int);
						this._RepresentantId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Representant");
				}
			}
		}
		
		[Association(Name="User_CustomerCall", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.CustomerCalls.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.CustomerCalls.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ExpenditureAuthorizations(ExpenditureAuthorization entity)
		{
			this.SendPropertyChanging();
			entity.CustomerCall = this;
		}
		
		private void detach_ExpenditureAuthorizations(ExpenditureAuthorization entity)
		{
			this.SendPropertyChanging();
			entity.CustomerCall = null;
		}
		
		private void attach_ServiceOrders(ServiceOrder entity)
		{
			this.SendPropertyChanging();
			entity.CustomerCall = this;
		}
		
		private void detach_ServiceOrders(ServiceOrder entity)
		{
			this.SendPropertyChanging();
			entity.CustomerCall = null;
		}
		
		private void Initialize()
		{
			this._ExpenditureAuthorizations = new EntitySet<ExpenditureAuthorization>(new Action<ExpenditureAuthorization>(this.attach_ExpenditureAuthorizations), new Action<ExpenditureAuthorization>(this.detach_ExpenditureAuthorizations));
			this._ServiceOrders = new EntitySet<ServiceOrder>(new Action<ServiceOrder>(this.attach_ServiceOrders), new Action<ServiceOrder>(this.detach_ServiceOrders));
			this._Customer = default(EntityRef<Customer>);
			this._Company = default(EntityRef<Company>);
			this._CustomerCallStatus = default(EntityRef<CustomerCallStatus>);
			this._CustomerCallType = default(EntityRef<CustomerCallType>);
			this._CustomerEquipment = default(EntityRef<CustomerEquipment>);
			this._Employee = default(EntityRef<Employee>);
			this._Event = default(EntityRef<Event>);
			this._Representant = default(EntityRef<Representant>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.CustomerCallStatus")]
	[DataContract()]
	public partial class CustomerCallStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CustomerCallStatusId;
		
		private string _Name;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<CustomerCall> _CustomerCalls;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomerCallStatusIdChanging(int value);
    partial void OnCustomerCallStatusIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public CustomerCallStatus()
		{
			this.Initialize();
		}
		
		[Column(Storage="_CustomerCallStatusId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int CustomerCallStatusId
		{
			get
			{
				return this._CustomerCallStatusId;
			}
			set
			{
				if ((this._CustomerCallStatusId != value))
				{
					this.OnCustomerCallStatusIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerCallStatusId = value;
					this.SendPropertyChanged("CustomerCallStatusId");
					this.OnCustomerCallStatusIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(128) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="CustomerCallStatus_CustomerCall", Storage="_CustomerCalls", ThisKey="CustomerCallStatusId", OtherKey="CustomerCallStatusId")]
		[DataMember(Order=3, EmitDefaultValue=false)]
		public EntitySet<CustomerCall> CustomerCalls
		{
			get
			{
				if ((this.serializing 
							&& (this._CustomerCalls.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._CustomerCalls;
			}
			set
			{
				this._CustomerCalls.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CustomerCalls(CustomerCall entity)
		{
			this.SendPropertyChanging();
			entity.CustomerCallStatus = this;
		}
		
		private void detach_CustomerCalls(CustomerCall entity)
		{
			this.SendPropertyChanging();
			entity.CustomerCallStatus = null;
		}
		
		private void Initialize()
		{
			this._CustomerCalls = new EntitySet<CustomerCall>(new Action<CustomerCall>(this.attach_CustomerCalls), new Action<CustomerCall>(this.detach_CustomerCalls));
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.CustomerCallType")]
	[DataContract()]
	public partial class CustomerCallType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CustomerCallTypeId;
		
		private string _Name;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<CustomerCall> _CustomerCalls;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomerCallTypeIdChanging(int value);
    partial void OnCustomerCallTypeIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public CustomerCallType()
		{
			this.Initialize();
		}
		
		[Column(Storage="_CustomerCallTypeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int CustomerCallTypeId
		{
			get
			{
				return this._CustomerCallTypeId;
			}
			set
			{
				if ((this._CustomerCallTypeId != value))
				{
					this.OnCustomerCallTypeIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerCallTypeId = value;
					this.SendPropertyChanged("CustomerCallTypeId");
					this.OnCustomerCallTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(128) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="CustomerCallType_CustomerCall", Storage="_CustomerCalls", ThisKey="CustomerCallTypeId", OtherKey="CustomerCallTypeId")]
		[DataMember(Order=3, EmitDefaultValue=false)]
		public EntitySet<CustomerCall> CustomerCalls
		{
			get
			{
				if ((this.serializing 
							&& (this._CustomerCalls.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._CustomerCalls;
			}
			set
			{
				this._CustomerCalls.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CustomerCalls(CustomerCall entity)
		{
			this.SendPropertyChanging();
			entity.CustomerCallType = this;
		}
		
		private void detach_CustomerCalls(CustomerCall entity)
		{
			this.SendPropertyChanging();
			entity.CustomerCallType = null;
		}
		
		private void Initialize()
		{
			this._CustomerCalls = new EntitySet<CustomerCall>(new Action<CustomerCall>(this.attach_CustomerCalls), new Action<CustomerCall>(this.detach_CustomerCalls));
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.CustomerContact")]
	[DataContract()]
	public partial class CustomerContact : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CustomerId;
		
		private int _ContactId;
		
		private int _CompanyId;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<CustomerFollowup> _CustomerFollowups;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Company> _Company;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Customer> _Customer;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Contact> _Contact;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomerIdChanging(int value);
    partial void OnCustomerIdChanged();
    partial void OnContactIdChanging(int value);
    partial void OnContactIdChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    #endregion
		
		public CustomerContact()
		{
			this.Initialize();
		}
		
		[Column(Storage="_CustomerId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=1)]
		public int CustomerId
		{
			get
			{
				return this._CustomerId;
			}
			set
			{
				if ((this._CustomerId != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerId = value;
					this.SendPropertyChanged("CustomerId");
					this.OnCustomerIdChanged();
				}
			}
		}
		
		[Column(Storage="_ContactId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=2)]
		public int ContactId
		{
			get
			{
				return this._ContactId;
			}
			set
			{
				if ((this._ContactId != value))
				{
					if (this._Contact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactIdChanging(value);
					this.SendPropertyChanging();
					this._ContactId = value;
					this.SendPropertyChanged("ContactId");
					this.OnContactIdChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=3)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Association(Name="CustomerContact_CustomerFollowup", Storage="_CustomerFollowups", ThisKey="CustomerId,ContactId,CompanyId", OtherKey="CustomerId,ContactId,CompanyId")]
		[DataMember(Order=4, EmitDefaultValue=false)]
		public EntitySet<CustomerFollowup> CustomerFollowups
		{
			get
			{
				if ((this.serializing 
							&& (this._CustomerFollowups.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._CustomerFollowups;
			}
			set
			{
				this._CustomerFollowups.Assign(value);
			}
		}
		
		[Association(Name="Company_CustomerContact", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.CustomerContacts.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.CustomerContacts.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[Association(Name="Customer_CustomerContact", Storage="_Customer", ThisKey="CustomerId", OtherKey="CustomerId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.CustomerContacts.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.CustomerContacts.Add(this);
						this._CustomerId = value.CustomerId;
					}
					else
					{
						this._CustomerId = default(int);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[Association(Name="Contact_CustomerContact", Storage="_Contact", ThisKey="ContactId", OtherKey="ContactId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value) 
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.CustomerContacts.Remove(this);
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.CustomerContacts.Add(this);
						this._ContactId = value.ContactId;
					}
					else
					{
						this._ContactId = default(int);
					}
					this.SendPropertyChanged("Contact");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CustomerFollowups(CustomerFollowup entity)
		{
			this.SendPropertyChanging();
			entity.CustomerContact = this;
		}
		
		private void detach_CustomerFollowups(CustomerFollowup entity)
		{
			this.SendPropertyChanging();
			entity.CustomerContact = null;
		}
		
		private void Initialize()
		{
			this._CustomerFollowups = new EntitySet<CustomerFollowup>(new Action<CustomerFollowup>(this.attach_CustomerFollowups), new Action<CustomerFollowup>(this.detach_CustomerFollowups));
			this._Company = default(EntityRef<Company>);
			this._Customer = default(EntityRef<Customer>);
			this._Contact = default(EntityRef<Contact>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.CustomerEquipment")]
	[DataContract()]
	public partial class CustomerEquipment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CustomerEquipmentId;
		
		private string _Name;
		
		private int _CustomerId;
		
		private string _Model;
		
		private string _Manufacturer;
		
		private string _SerialNumber;
		
		private string _Description;
		
		private string _Comments;
		
		private string _Color;
		
		private string _Patrimonio;
		
		private System.Nullable<int> _FactoringYear;
		
		private System.Nullable<int> _ContractId;
		
		private System.Nullable<System.DateTime> _WarrantyBeginDate;
		
		private System.Nullable<System.DateTime> _WarrantyEndDate;
		
		private string _IdentificationOrPlaca;
		
		private System.Nullable<int> _ModelYear;
		
		private int _CompanyId;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<CustomerCall> _CustomerCalls;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<ServiceOrder> _ServiceOrders;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Customer> _Customer;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Contract> _Contract;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomerEquipmentIdChanging(int value);
    partial void OnCustomerEquipmentIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCustomerIdChanging(int value);
    partial void OnCustomerIdChanged();
    partial void OnModelChanging(string value);
    partial void OnModelChanged();
    partial void OnManufacturerChanging(string value);
    partial void OnManufacturerChanged();
    partial void OnSerialNumberChanging(string value);
    partial void OnSerialNumberChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    partial void OnColorChanging(string value);
    partial void OnColorChanged();
    partial void OnPatrimonioChanging(string value);
    partial void OnPatrimonioChanged();
    partial void OnFactoringYearChanging(System.Nullable<int> value);
    partial void OnFactoringYearChanged();
    partial void OnContractIdChanging(System.Nullable<int> value);
    partial void OnContractIdChanged();
    partial void OnWarrantyBeginDateChanging(System.Nullable<System.DateTime> value);
    partial void OnWarrantyBeginDateChanged();
    partial void OnWarrantyEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnWarrantyEndDateChanged();
    partial void OnIdentificationOrPlacaChanging(string value);
    partial void OnIdentificationOrPlacaChanged();
    partial void OnModelYearChanging(System.Nullable<int> value);
    partial void OnModelYearChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    #endregion
		
		public CustomerEquipment()
		{
			this.Initialize();
		}
		
		[Column(Storage="_CustomerEquipmentId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int CustomerEquipmentId
		{
			get
			{
				return this._CustomerEquipmentId;
			}
			set
			{
				if ((this._CustomerEquipmentId != value))
				{
					this.OnCustomerEquipmentIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerEquipmentId = value;
					this.SendPropertyChanged("CustomerEquipmentId");
					this.OnCustomerEquipmentIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_CustomerId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=3)]
		public int CustomerId
		{
			get
			{
				return this._CustomerId;
			}
			set
			{
				if ((this._CustomerId != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerId = value;
					this.SendPropertyChanged("CustomerId");
					this.OnCustomerIdChanged();
				}
			}
		}
		
		[Column(Storage="_Model", DbType="VarChar(50)")]
		[DataMember(Order=4)]
		public string Model
		{
			get
			{
				return this._Model;
			}
			set
			{
				if ((this._Model != value))
				{
					this.OnModelChanging(value);
					this.SendPropertyChanging();
					this._Model = value;
					this.SendPropertyChanged("Model");
					this.OnModelChanged();
				}
			}
		}
		
		[Column(Storage="_Manufacturer", DbType="VarChar(50)")]
		[DataMember(Order=5)]
		public string Manufacturer
		{
			get
			{
				return this._Manufacturer;
			}
			set
			{
				if ((this._Manufacturer != value))
				{
					this.OnManufacturerChanging(value);
					this.SendPropertyChanging();
					this._Manufacturer = value;
					this.SendPropertyChanged("Manufacturer");
					this.OnManufacturerChanged();
				}
			}
		}
		
		[Column(Storage="_SerialNumber", DbType="VarChar(50)")]
		[DataMember(Order=6)]
		public string SerialNumber
		{
			get
			{
				return this._SerialNumber;
			}
			set
			{
				if ((this._SerialNumber != value))
				{
					this.OnSerialNumberChanging(value);
					this.SendPropertyChanging();
					this._SerialNumber = value;
					this.SendPropertyChanged("SerialNumber");
					this.OnSerialNumberChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(50)")]
		[DataMember(Order=7)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_Comments", DbType="VarChar(200)")]
		[DataMember(Order=8)]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[Column(Storage="_Color", DbType="VarChar(50)")]
		[DataMember(Order=9)]
		public string Color
		{
			get
			{
				return this._Color;
			}
			set
			{
				if ((this._Color != value))
				{
					this.OnColorChanging(value);
					this.SendPropertyChanging();
					this._Color = value;
					this.SendPropertyChanged("Color");
					this.OnColorChanged();
				}
			}
		}
		
		[Column(Storage="_Patrimonio", DbType="VarChar(50)")]
		[DataMember(Order=10)]
		public string Patrimonio
		{
			get
			{
				return this._Patrimonio;
			}
			set
			{
				if ((this._Patrimonio != value))
				{
					this.OnPatrimonioChanging(value);
					this.SendPropertyChanging();
					this._Patrimonio = value;
					this.SendPropertyChanged("Patrimonio");
					this.OnPatrimonioChanged();
				}
			}
		}
		
		[Column(Storage="_FactoringYear", DbType="Int")]
		[DataMember(Order=11)]
		public System.Nullable<int> FactoringYear
		{
			get
			{
				return this._FactoringYear;
			}
			set
			{
				if ((this._FactoringYear != value))
				{
					this.OnFactoringYearChanging(value);
					this.SendPropertyChanging();
					this._FactoringYear = value;
					this.SendPropertyChanged("FactoringYear");
					this.OnFactoringYearChanged();
				}
			}
		}
		
		[Column(Storage="_ContractId", DbType="Int")]
		[DataMember(Order=12)]
		public System.Nullable<int> ContractId
		{
			get
			{
				return this._ContractId;
			}
			set
			{
				if ((this._ContractId != value))
				{
					if (this._Contract.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContractIdChanging(value);
					this.SendPropertyChanging();
					this._ContractId = value;
					this.SendPropertyChanged("ContractId");
					this.OnContractIdChanged();
				}
			}
		}
		
		[Column(Storage="_WarrantyBeginDate", DbType="DateTime")]
		[DataMember(Order=13)]
		public System.Nullable<System.DateTime> WarrantyBeginDate
		{
			get
			{
				return this._WarrantyBeginDate;
			}
			set
			{
				if ((this._WarrantyBeginDate != value))
				{
					this.OnWarrantyBeginDateChanging(value);
					this.SendPropertyChanging();
					this._WarrantyBeginDate = value;
					this.SendPropertyChanged("WarrantyBeginDate");
					this.OnWarrantyBeginDateChanged();
				}
			}
		}
		
		[Column(Storage="_WarrantyEndDate", DbType="DateTime")]
		[DataMember(Order=14)]
		public System.Nullable<System.DateTime> WarrantyEndDate
		{
			get
			{
				return this._WarrantyEndDate;
			}
			set
			{
				if ((this._WarrantyEndDate != value))
				{
					this.OnWarrantyEndDateChanging(value);
					this.SendPropertyChanging();
					this._WarrantyEndDate = value;
					this.SendPropertyChanged("WarrantyEndDate");
					this.OnWarrantyEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_IdentificationOrPlaca", DbType="Char(18)")]
		[DataMember(Order=15)]
		public string IdentificationOrPlaca
		{
			get
			{
				return this._IdentificationOrPlaca;
			}
			set
			{
				if ((this._IdentificationOrPlaca != value))
				{
					this.OnIdentificationOrPlacaChanging(value);
					this.SendPropertyChanging();
					this._IdentificationOrPlaca = value;
					this.SendPropertyChanged("IdentificationOrPlaca");
					this.OnIdentificationOrPlacaChanged();
				}
			}
		}
		
		[Column(Storage="_ModelYear", DbType="Int")]
		[DataMember(Order=16)]
		public System.Nullable<int> ModelYear
		{
			get
			{
				return this._ModelYear;
			}
			set
			{
				if ((this._ModelYear != value))
				{
					this.OnModelYearChanging(value);
					this.SendPropertyChanging();
					this._ModelYear = value;
					this.SendPropertyChanged("ModelYear");
					this.OnModelYearChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL")]
		[DataMember(Order=17)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Contract.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Association(Name="CustomerEquipment_CustomerCall", Storage="_CustomerCalls", ThisKey="CustomerId,CustomerEquipmentId", OtherKey="CustomerId,CustomerEquipmentId")]
		[DataMember(Order=18, EmitDefaultValue=false)]
		public EntitySet<CustomerCall> CustomerCalls
		{
			get
			{
				if ((this.serializing 
							&& (this._CustomerCalls.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._CustomerCalls;
			}
			set
			{
				this._CustomerCalls.Assign(value);
			}
		}
		
		[Association(Name="CustomerEquipment_ServiceOrder", Storage="_ServiceOrders", ThisKey="CustomerId,CustomerEquipmentId", OtherKey="CustomerId,CustomerEquipmentId")]
		[DataMember(Order=19, EmitDefaultValue=false)]
		public EntitySet<ServiceOrder> ServiceOrders
		{
			get
			{
				if ((this.serializing 
							&& (this._ServiceOrders.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ServiceOrders;
			}
			set
			{
				this._ServiceOrders.Assign(value);
			}
		}
		
		[Association(Name="Customer_CustomerEquipment", Storage="_Customer", ThisKey="CustomerId", OtherKey="CustomerId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.CustomerEquipments.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.CustomerEquipments.Add(this);
						this._CustomerId = value.CustomerId;
					}
					else
					{
						this._CustomerId = default(int);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[Association(Name="Contract_CustomerEquipment", Storage="_Contract", ThisKey="ContractId,CompanyId", OtherKey="ContractId,CompanyId", IsForeignKey=true)]
		public Contract Contract
		{
			get
			{
				return this._Contract.Entity;
			}
			set
			{
				Contract previousValue = this._Contract.Entity;
				if (((previousValue != value) 
							|| (this._Contract.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contract.Entity = null;
						previousValue.CustomerEquipments.Remove(this);
					}
					this._Contract.Entity = value;
					if ((value != null))
					{
						value.CustomerEquipments.Add(this);
						this._ContractId = value.ContractId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._ContractId = default(Nullable<int>);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Contract");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CustomerCalls(CustomerCall entity)
		{
			this.SendPropertyChanging();
			entity.CustomerEquipment = this;
		}
		
		private void detach_CustomerCalls(CustomerCall entity)
		{
			this.SendPropertyChanging();
			entity.CustomerEquipment = null;
		}
		
		private void attach_ServiceOrders(ServiceOrder entity)
		{
			this.SendPropertyChanging();
			entity.CustomerEquipment = this;
		}
		
		private void detach_ServiceOrders(ServiceOrder entity)
		{
			this.SendPropertyChanging();
			entity.CustomerEquipment = null;
		}
		
		private void Initialize()
		{
			this._CustomerCalls = new EntitySet<CustomerCall>(new Action<CustomerCall>(this.attach_CustomerCalls), new Action<CustomerCall>(this.detach_CustomerCalls));
			this._ServiceOrders = new EntitySet<ServiceOrder>(new Action<ServiceOrder>(this.attach_ServiceOrders), new Action<ServiceOrder>(this.detach_ServiceOrders));
			this._Customer = default(EntityRef<Customer>);
			this._Contract = default(EntityRef<Contract>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.CustomerFollowup")]
	[DataContract()]
	public partial class CustomerFollowup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CustomerFollowupId;
		
		private System.Nullable<int> _CustomerId;
		
		private System.Nullable<int> _ContactId;
		
		private System.DateTime _EntryDate;
		
		private string _Description;
		
		private int _UserId;
		
		private System.Nullable<int> _CustomerFollowupActionId;
		
		private int _CompanyId;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<CustomerContact> _CustomerContact;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Contact> _Contact;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<CustomerFollowupAction> _CustomerFollowupAction;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomerFollowupIdChanging(int value);
    partial void OnCustomerFollowupIdChanged();
    partial void OnCustomerIdChanging(System.Nullable<int> value);
    partial void OnCustomerIdChanged();
    partial void OnContactIdChanging(System.Nullable<int> value);
    partial void OnContactIdChanged();
    partial void OnEntryDateChanging(System.DateTime value);
    partial void OnEntryDateChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnCustomerFollowupActionIdChanging(System.Nullable<int> value);
    partial void OnCustomerFollowupActionIdChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    #endregion
		
		public CustomerFollowup()
		{
			this.Initialize();
		}
		
		[Column(Storage="_CustomerFollowupId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int CustomerFollowupId
		{
			get
			{
				return this._CustomerFollowupId;
			}
			set
			{
				if ((this._CustomerFollowupId != value))
				{
					this.OnCustomerFollowupIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerFollowupId = value;
					this.SendPropertyChanged("CustomerFollowupId");
					this.OnCustomerFollowupIdChanged();
				}
			}
		}
		
		[Column(Storage="_CustomerId", DbType="Int")]
		[DataMember(Order=2)]
		public System.Nullable<int> CustomerId
		{
			get
			{
				return this._CustomerId;
			}
			set
			{
				if ((this._CustomerId != value))
				{
					if (this._CustomerContact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerId = value;
					this.SendPropertyChanged("CustomerId");
					this.OnCustomerIdChanged();
				}
			}
		}
		
		[Column(Storage="_ContactId", DbType="Int")]
		[DataMember(Order=3)]
		public System.Nullable<int> ContactId
		{
			get
			{
				return this._ContactId;
			}
			set
			{
				if ((this._ContactId != value))
				{
					if (this._CustomerContact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactIdChanging(value);
					this.SendPropertyChanging();
					this._ContactId = value;
					this.SendPropertyChanged("ContactId");
					this.OnContactIdChanged();
				}
			}
		}
		
		[Column(Storage="_EntryDate", DbType="DateTime NOT NULL")]
		[DataMember(Order=4)]
		public System.DateTime EntryDate
		{
			get
			{
				return this._EntryDate;
			}
			set
			{
				if ((this._EntryDate != value))
				{
					this.OnEntryDateChanging(value);
					this.SendPropertyChanging();
					this._EntryDate = value;
					this.SendPropertyChanged("EntryDate");
					this.OnEntryDateChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=5)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="Int NOT NULL")]
		[DataMember(Order=6)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_CustomerFollowupActionId", DbType="Int")]
		[DataMember(Order=7)]
		public System.Nullable<int> CustomerFollowupActionId
		{
			get
			{
				return this._CustomerFollowupActionId;
			}
			set
			{
				if ((this._CustomerFollowupActionId != value))
				{
					if (this._CustomerFollowupAction.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerFollowupActionIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerFollowupActionId = value;
					this.SendPropertyChanged("CustomerFollowupActionId");
					this.OnCustomerFollowupActionIdChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=8)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._CustomerContact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Association(Name="CustomerContact_CustomerFollowup", Storage="_CustomerContact", ThisKey="CustomerId,ContactId,CompanyId", OtherKey="CustomerId,ContactId,CompanyId", IsForeignKey=true, DeleteRule="CASCADE")]
		public CustomerContact CustomerContact
		{
			get
			{
				return this._CustomerContact.Entity;
			}
			set
			{
				CustomerContact previousValue = this._CustomerContact.Entity;
				if (((previousValue != value) 
							|| (this._CustomerContact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CustomerContact.Entity = null;
						previousValue.CustomerFollowups.Remove(this);
					}
					this._CustomerContact.Entity = value;
					if ((value != null))
					{
						value.CustomerFollowups.Add(this);
						this._CustomerId = value.CustomerId;
						this._ContactId = value.ContactId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CustomerId = default(Nullable<int>);
						this._ContactId = default(Nullable<int>);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("CustomerContact");
				}
			}
		}
		
		[Association(Name="Contact_CustomerFollowup", Storage="_Contact", ThisKey="ContactId", OtherKey="ContactId", IsForeignKey=true)]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value) 
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.CustomerFollowups.Remove(this);
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.CustomerFollowups.Add(this);
						this._ContactId = value.ContactId;
					}
					else
					{
						this._ContactId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Contact");
				}
			}
		}
		
		[Association(Name="CustomerFollowupAction_CustomerFollowup", Storage="_CustomerFollowupAction", ThisKey="CustomerFollowupActionId,CompanyId", OtherKey="CustomerFollowupActionId,CompanyId", IsForeignKey=true)]
		public CustomerFollowupAction CustomerFollowupAction
		{
			get
			{
				return this._CustomerFollowupAction.Entity;
			}
			set
			{
				CustomerFollowupAction previousValue = this._CustomerFollowupAction.Entity;
				if (((previousValue != value) 
							|| (this._CustomerFollowupAction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CustomerFollowupAction.Entity = null;
						previousValue.CustomerFollowups.Remove(this);
					}
					this._CustomerFollowupAction.Entity = value;
					if ((value != null))
					{
						value.CustomerFollowups.Add(this);
						this._CustomerFollowupActionId = value.CustomerFollowupActionId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CustomerFollowupActionId = default(Nullable<int>);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("CustomerFollowupAction");
				}
			}
		}
		
		[Association(Name="Employee_CustomerFollowup", Storage="_Employee", ThisKey="UserId,CompanyId", OtherKey="EmployeeId,CompanyId", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.CustomerFollowups.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.CustomerFollowups.Add(this);
						this._UserId = value.EmployeeId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._UserId = default(int);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._CustomerContact = default(EntityRef<CustomerContact>);
			this._Contact = default(EntityRef<Contact>);
			this._CustomerFollowupAction = default(EntityRef<CustomerFollowupAction>);
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.CustomerFollowupAction")]
	[DataContract()]
	public partial class CustomerFollowupAction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CustomerFollowupActionId;
		
		private string _Name;
		
		private System.Nullable<decimal> _Probability;
		
		private int _CompanyId;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<CustomerFollowup> _CustomerFollowups;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Company> _Company;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomerFollowupActionIdChanging(int value);
    partial void OnCustomerFollowupActionIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnProbabilityChanging(System.Nullable<decimal> value);
    partial void OnProbabilityChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    #endregion
		
		public CustomerFollowupAction()
		{
			this.Initialize();
		}
		
		[Column(Storage="_CustomerFollowupActionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int CustomerFollowupActionId
		{
			get
			{
				return this._CustomerFollowupActionId;
			}
			set
			{
				if ((this._CustomerFollowupActionId != value))
				{
					this.OnCustomerFollowupActionIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerFollowupActionId = value;
					this.SendPropertyChanged("CustomerFollowupActionId");
					this.OnCustomerFollowupActionIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(120) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Probability", DbType="Decimal(18,2)")]
		[DataMember(Order=3)]
		public System.Nullable<decimal> Probability
		{
			get
			{
				return this._Probability;
			}
			set
			{
				if ((this._Probability != value))
				{
					this.OnProbabilityChanging(value);
					this.SendPropertyChanging();
					this._Probability = value;
					this.SendPropertyChanged("Probability");
					this.OnProbabilityChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=4)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Association(Name="CustomerFollowupAction_CustomerFollowup", Storage="_CustomerFollowups", ThisKey="CustomerFollowupActionId,CompanyId", OtherKey="CustomerFollowupActionId,CompanyId")]
		[DataMember(Order=5, EmitDefaultValue=false)]
		public EntitySet<CustomerFollowup> CustomerFollowups
		{
			get
			{
				if ((this.serializing 
							&& (this._CustomerFollowups.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._CustomerFollowups;
			}
			set
			{
				this._CustomerFollowups.Assign(value);
			}
		}
		
		[Association(Name="Company_CustomerFollowupAction", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.CustomerFollowupActions.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.CustomerFollowupActions.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CustomerFollowups(CustomerFollowup entity)
		{
			this.SendPropertyChanging();
			entity.CustomerFollowupAction = this;
		}
		
		private void detach_CustomerFollowups(CustomerFollowup entity)
		{
			this.SendPropertyChanging();
			entity.CustomerFollowupAction = null;
		}
		
		private void Initialize()
		{
			this._CustomerFollowups = new EntitySet<CustomerFollowup>(new Action<CustomerFollowup>(this.attach_CustomerFollowups), new Action<CustomerFollowup>(this.detach_CustomerFollowups));
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.CustomerType")]
	[DataContract()]
	public partial class CustomerType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CustomerTypeId;
		
		private string _Name;
		
		private System.DateTime _ModifiedDate;
		
		private int _CompanyId;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Customer> _Customers;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Company> _Company;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomerTypeIdChanging(int value);
    partial void OnCustomerTypeIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    #endregion
		
		public CustomerType()
		{
			this.Initialize();
		}
		
		[Column(Storage="_CustomerTypeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int CustomerTypeId
		{
			get
			{
				return this._CustomerTypeId;
			}
			set
			{
				if ((this._CustomerTypeId != value))
				{
					this.OnCustomerTypeIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerTypeId = value;
					this.SendPropertyChanged("CustomerTypeId");
					this.OnCustomerTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		[DataMember(Order=3)]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=4)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Association(Name="CustomerType_Customer", Storage="_Customers", ThisKey="CustomerTypeId,CompanyId", OtherKey="CustomerTypeId,CompanyId")]
		[DataMember(Order=5, EmitDefaultValue=false)]
		public EntitySet<Customer> Customers
		{
			get
			{
				if ((this.serializing 
							&& (this._Customers.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Customers;
			}
			set
			{
				this._Customers.Assign(value);
			}
		}
		
		[Association(Name="Company_CustomerType", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.CustomerTypes.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.CustomerTypes.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.CustomerType = this;
		}
		
		private void detach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.CustomerType = null;
		}
		
		private void Initialize()
		{
			this._Customers = new EntitySet<Customer>(new Action<Customer>(this.attach_Customers), new Action<Customer>(this.detach_Customers));
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.CustomFunction")]
	[DataContract()]
	public partial class CustomFunction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FunctionId;
		
		private int _CompanyId;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Company> _Company;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Function> _Function;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFunctionIdChanging(int value);
    partial void OnFunctionIdChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    #endregion
		
		public CustomFunction()
		{
			this.Initialize();
		}
		
		[Column(Storage="_FunctionId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=1)]
		public int FunctionId
		{
			get
			{
				return this._FunctionId;
			}
			set
			{
				if ((this._FunctionId != value))
				{
					if (this._Function.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFunctionIdChanging(value);
					this.SendPropertyChanging();
					this._FunctionId = value;
					this.SendPropertyChanged("FunctionId");
					this.OnFunctionIdChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=2)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Association(Name="Company_CustomFunction", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.CustomFunctions.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.CustomFunctions.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[Association(Name="Function_CustomFunction", Storage="_Function", ThisKey="FunctionId", OtherKey="FunctionId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Function Function
		{
			get
			{
				return this._Function.Entity;
			}
			set
			{
				Function previousValue = this._Function.Entity;
				if (((previousValue != value) 
							|| (this._Function.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Function.Entity = null;
						previousValue.CustomFunctions.Remove(this);
					}
					this._Function.Entity = value;
					if ((value != null))
					{
						value.CustomFunctions.Add(this);
						this._FunctionId = value.FunctionId;
					}
					else
					{
						this._FunctionId = default(int);
					}
					this.SendPropertyChanged("Function");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Company = default(EntityRef<Company>);
			this._Function = default(EntityRef<Function>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.Deposit")]
	[DataContract()]
	public partial class Deposit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DepositId;
		
		private string _Name;
		
		private System.Nullable<decimal> _MonthlyGoal;
		
		private System.Nullable<decimal> _FirstWeekGoal;
		
		private System.Nullable<decimal> _SecondWeekGoal;
		
		private System.Nullable<decimal> _ThirdWeekGoal;
		
		private System.Nullable<decimal> _ForthWeekGoal;
		
		private System.Nullable<decimal> _FifthWeekGoal;
		
		private int _CompanyId;
		
		private string _PostalCode;
		
		private string _AddressComp;
		
		private string _AddressNumber;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<CompanyUser> _CompanyUsers;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<DropPayout> _DropPayouts;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Inventory> _Inventories;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<InventoryHistory> _InventoryHistories;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<InventoryMoviment> _InventoryMoviments;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<PurchaseRequest> _PurchaseRequests;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Sale> _Sales;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Company> _Company;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Address> _Address;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDepositIdChanging(int value);
    partial void OnDepositIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnMonthlyGoalChanging(System.Nullable<decimal> value);
    partial void OnMonthlyGoalChanged();
    partial void OnFirstWeekGoalChanging(System.Nullable<decimal> value);
    partial void OnFirstWeekGoalChanged();
    partial void OnSecondWeekGoalChanging(System.Nullable<decimal> value);
    partial void OnSecondWeekGoalChanged();
    partial void OnThirdWeekGoalChanging(System.Nullable<decimal> value);
    partial void OnThirdWeekGoalChanged();
    partial void OnForthWeekGoalChanging(System.Nullable<decimal> value);
    partial void OnForthWeekGoalChanged();
    partial void OnFifthWeekGoalChanging(System.Nullable<decimal> value);
    partial void OnFifthWeekGoalChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnPostalCodeChanging(string value);
    partial void OnPostalCodeChanged();
    partial void OnAddressCompChanging(string value);
    partial void OnAddressCompChanged();
    partial void OnAddressNumberChanging(string value);
    partial void OnAddressNumberChanged();
    #endregion
		
		public Deposit()
		{
			this.Initialize();
		}
		
		[Column(Storage="_DepositId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int DepositId
		{
			get
			{
				return this._DepositId;
			}
			set
			{
				if ((this._DepositId != value))
				{
					this.OnDepositIdChanging(value);
					this.SendPropertyChanging();
					this._DepositId = value;
					this.SendPropertyChanged("DepositId");
					this.OnDepositIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_MonthlyGoal", DbType="Decimal(18,2)")]
		[DataMember(Order=3)]
		public System.Nullable<decimal> MonthlyGoal
		{
			get
			{
				return this._MonthlyGoal;
			}
			set
			{
				if ((this._MonthlyGoal != value))
				{
					this.OnMonthlyGoalChanging(value);
					this.SendPropertyChanging();
					this._MonthlyGoal = value;
					this.SendPropertyChanged("MonthlyGoal");
					this.OnMonthlyGoalChanged();
				}
			}
		}
		
		[Column(Storage="_FirstWeekGoal", DbType="Decimal(18,2)")]
		[DataMember(Order=4)]
		public System.Nullable<decimal> FirstWeekGoal
		{
			get
			{
				return this._FirstWeekGoal;
			}
			set
			{
				if ((this._FirstWeekGoal != value))
				{
					this.OnFirstWeekGoalChanging(value);
					this.SendPropertyChanging();
					this._FirstWeekGoal = value;
					this.SendPropertyChanged("FirstWeekGoal");
					this.OnFirstWeekGoalChanged();
				}
			}
		}
		
		[Column(Storage="_SecondWeekGoal", DbType="Decimal(18,2)")]
		[DataMember(Order=5)]
		public System.Nullable<decimal> SecondWeekGoal
		{
			get
			{
				return this._SecondWeekGoal;
			}
			set
			{
				if ((this._SecondWeekGoal != value))
				{
					this.OnSecondWeekGoalChanging(value);
					this.SendPropertyChanging();
					this._SecondWeekGoal = value;
					this.SendPropertyChanged("SecondWeekGoal");
					this.OnSecondWeekGoalChanged();
				}
			}
		}
		
		[Column(Storage="_ThirdWeekGoal", DbType="Decimal(18,2)")]
		[DataMember(Order=6)]
		public System.Nullable<decimal> ThirdWeekGoal
		{
			get
			{
				return this._ThirdWeekGoal;
			}
			set
			{
				if ((this._ThirdWeekGoal != value))
				{
					this.OnThirdWeekGoalChanging(value);
					this.SendPropertyChanging();
					this._ThirdWeekGoal = value;
					this.SendPropertyChanged("ThirdWeekGoal");
					this.OnThirdWeekGoalChanged();
				}
			}
		}
		
		[Column(Storage="_ForthWeekGoal", DbType="Decimal(18,2)")]
		[DataMember(Order=7)]
		public System.Nullable<decimal> ForthWeekGoal
		{
			get
			{
				return this._ForthWeekGoal;
			}
			set
			{
				if ((this._ForthWeekGoal != value))
				{
					this.OnForthWeekGoalChanging(value);
					this.SendPropertyChanging();
					this._ForthWeekGoal = value;
					this.SendPropertyChanged("ForthWeekGoal");
					this.OnForthWeekGoalChanged();
				}
			}
		}
		
		[Column(Storage="_FifthWeekGoal", DbType="Decimal(18,2)")]
		[DataMember(Order=8)]
		public System.Nullable<decimal> FifthWeekGoal
		{
			get
			{
				return this._FifthWeekGoal;
			}
			set
			{
				if ((this._FifthWeekGoal != value))
				{
					this.OnFifthWeekGoalChanging(value);
					this.SendPropertyChanging();
					this._FifthWeekGoal = value;
					this.SendPropertyChanged("FifthWeekGoal");
					this.OnFifthWeekGoalChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=9)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Column(Storage="_PostalCode", DbType="Char(8)")]
		[DataMember(Order=10)]
		public string PostalCode
		{
			get
			{
				return this._PostalCode;
			}
			set
			{
				if ((this._PostalCode != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPostalCodeChanging(value);
					this.SendPropertyChanging();
					this._PostalCode = value;
					this.SendPropertyChanged("PostalCode");
					this.OnPostalCodeChanged();
				}
			}
		}
		
		[Column(Storage="_AddressComp", DbType="VarChar(1024)")]
		[DataMember(Order=11)]
		public string AddressComp
		{
			get
			{
				return this._AddressComp;
			}
			set
			{
				if ((this._AddressComp != value))
				{
					this.OnAddressCompChanging(value);
					this.SendPropertyChanging();
					this._AddressComp = value;
					this.SendPropertyChanged("AddressComp");
					this.OnAddressCompChanged();
				}
			}
		}
		
		[Column(Storage="_AddressNumber", DbType="VarChar(50)")]
		[DataMember(Order=12)]
		public string AddressNumber
		{
			get
			{
				return this._AddressNumber;
			}
			set
			{
				if ((this._AddressNumber != value))
				{
					this.OnAddressNumberChanging(value);
					this.SendPropertyChanging();
					this._AddressNumber = value;
					this.SendPropertyChanged("AddressNumber");
					this.OnAddressNumberChanged();
				}
			}
		}
		
		[Association(Name="Deposit_CompanyUser", Storage="_CompanyUsers", ThisKey="DepositId,CompanyId", OtherKey="DepositId,CompanyId")]
		[DataMember(Order=13, EmitDefaultValue=false)]
		public EntitySet<CompanyUser> CompanyUsers
		{
			get
			{
				if ((this.serializing 
							&& (this._CompanyUsers.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._CompanyUsers;
			}
			set
			{
				this._CompanyUsers.Assign(value);
			}
		}
		
		[Association(Name="Deposit_DropPayout", Storage="_DropPayouts", ThisKey="DepositId,CompanyId", OtherKey="DepositId,CompanyId")]
		[DataMember(Order=14, EmitDefaultValue=false)]
		public EntitySet<DropPayout> DropPayouts
		{
			get
			{
				if ((this.serializing 
							&& (this._DropPayouts.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._DropPayouts;
			}
			set
			{
				this._DropPayouts.Assign(value);
			}
		}
		
		[Association(Name="Deposit_Inventory", Storage="_Inventories", ThisKey="DepositId,CompanyId", OtherKey="DepositId,CompanyId")]
		[DataMember(Order=15, EmitDefaultValue=false)]
		public EntitySet<Inventory> Inventories
		{
			get
			{
				if ((this.serializing 
							&& (this._Inventories.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Inventories;
			}
			set
			{
				this._Inventories.Assign(value);
			}
		}
		
		[Association(Name="Deposit_InventoryHistory", Storage="_InventoryHistories", ThisKey="DepositId,CompanyId", OtherKey="DepositId,CompanyId")]
		[DataMember(Order=16, EmitDefaultValue=false)]
		public EntitySet<InventoryHistory> InventoryHistories
		{
			get
			{
				if ((this.serializing 
							&& (this._InventoryHistories.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._InventoryHistories;
			}
			set
			{
				this._InventoryHistories.Assign(value);
			}
		}
		
		[Association(Name="Deposit_InventoryMoviment", Storage="_InventoryMoviments", ThisKey="DepositId,CompanyId", OtherKey="DepositDestinationId,CompanyDestinationId")]
		[DataMember(Order=17, EmitDefaultValue=false)]
		public EntitySet<InventoryMoviment> InventoryMoviments
		{
			get
			{
				if ((this.serializing 
							&& (this._InventoryMoviments.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._InventoryMoviments;
			}
			set
			{
				this._InventoryMoviments.Assign(value);
			}
		}
		
		[Association(Name="Deposit_PurchaseRequest", Storage="_PurchaseRequests", ThisKey="DepositId,CompanyId", OtherKey="DepositId,CompanyId")]
		[DataMember(Order=18, EmitDefaultValue=false)]
		public EntitySet<PurchaseRequest> PurchaseRequests
		{
			get
			{
				if ((this.serializing 
							&& (this._PurchaseRequests.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._PurchaseRequests;
			}
			set
			{
				this._PurchaseRequests.Assign(value);
			}
		}
		
		[Association(Name="Deposit_Sale", Storage="_Sales", ThisKey="DepositId,CompanyId", OtherKey="DepositId,CompanyId")]
		[DataMember(Order=19, EmitDefaultValue=false)]
		public EntitySet<Sale> Sales
		{
			get
			{
				if ((this.serializing 
							&& (this._Sales.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Sales;
			}
			set
			{
				this._Sales.Assign(value);
			}
		}
		
		[Association(Name="Company_Deposit", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Deposits.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Deposits.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[Association(Name="Address_Deposit", Storage="_Address", ThisKey="PostalCode", OtherKey="PostalCode", IsForeignKey=true)]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.Deposits.Remove(this);
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.Deposits.Add(this);
						this._PostalCode = value.PostalCode;
					}
					else
					{
						this._PostalCode = default(string);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CompanyUsers(CompanyUser entity)
		{
			this.SendPropertyChanging();
			entity.Deposit = this;
		}
		
		private void detach_CompanyUsers(CompanyUser entity)
		{
			this.SendPropertyChanging();
			entity.Deposit = null;
		}
		
		private void attach_DropPayouts(DropPayout entity)
		{
			this.SendPropertyChanging();
			entity.Deposit = this;
		}
		
		private void detach_DropPayouts(DropPayout entity)
		{
			this.SendPropertyChanging();
			entity.Deposit = null;
		}
		
		private void attach_Inventories(Inventory entity)
		{
			this.SendPropertyChanging();
			entity.Deposit = this;
		}
		
		private void detach_Inventories(Inventory entity)
		{
			this.SendPropertyChanging();
			entity.Deposit = null;
		}
		
		private void attach_InventoryHistories(InventoryHistory entity)
		{
			this.SendPropertyChanging();
			entity.Deposit = this;
		}
		
		private void detach_InventoryHistories(InventoryHistory entity)
		{
			this.SendPropertyChanging();
			entity.Deposit = null;
		}
		
		private void attach_InventoryMoviments(InventoryMoviment entity)
		{
			this.SendPropertyChanging();
			entity.Deposit = this;
		}
		
		private void detach_InventoryMoviments(InventoryMoviment entity)
		{
			this.SendPropertyChanging();
			entity.Deposit = null;
		}
		
		private void attach_PurchaseRequests(PurchaseRequest entity)
		{
			this.SendPropertyChanging();
			entity.Deposit = this;
		}
		
		private void detach_PurchaseRequests(PurchaseRequest entity)
		{
			this.SendPropertyChanging();
			entity.Deposit = null;
		}
		
		private void attach_Sales(Sale entity)
		{
			this.SendPropertyChanging();
			entity.Deposit = this;
		}
		
		private void detach_Sales(Sale entity)
		{
			this.SendPropertyChanging();
			entity.Deposit = null;
		}
		
		private void Initialize()
		{
			this._CompanyUsers = new EntitySet<CompanyUser>(new Action<CompanyUser>(this.attach_CompanyUsers), new Action<CompanyUser>(this.detach_CompanyUsers));
			this._DropPayouts = new EntitySet<DropPayout>(new Action<DropPayout>(this.attach_DropPayouts), new Action<DropPayout>(this.detach_DropPayouts));
			this._Inventories = new EntitySet<Inventory>(new Action<Inventory>(this.attach_Inventories), new Action<Inventory>(this.detach_Inventories));
			this._InventoryHistories = new EntitySet<InventoryHistory>(new Action<InventoryHistory>(this.attach_InventoryHistories), new Action<InventoryHistory>(this.detach_InventoryHistories));
			this._InventoryMoviments = new EntitySet<InventoryMoviment>(new Action<InventoryMoviment>(this.attach_InventoryMoviments), new Action<InventoryMoviment>(this.detach_InventoryMoviments));
			this._PurchaseRequests = new EntitySet<PurchaseRequest>(new Action<PurchaseRequest>(this.attach_PurchaseRequests), new Action<PurchaseRequest>(this.detach_PurchaseRequests));
			this._Sales = new EntitySet<Sale>(new Action<Sale>(this.attach_Sales), new Action<Sale>(this.detach_Sales));
			this._Company = default(EntityRef<Company>);
			this._Address = default(EntityRef<Address>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.DocumentTemplate")]
	[DataContract()]
	public partial class DocumentTemplate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DocumentTemplateId;
		
		private string _FileName;
		
		private string _FileUrl;
		
		private int _CompanyId;
		
		private int _DocumentTemplateTypeId;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Company> _Company;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<DocumentTemplateType> _DocumentTemplateType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDocumentTemplateIdChanging(int value);
    partial void OnDocumentTemplateIdChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnFileUrlChanging(string value);
    partial void OnFileUrlChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnDocumentTemplateTypeIdChanging(int value);
    partial void OnDocumentTemplateTypeIdChanged();
    #endregion
		
		public DocumentTemplate()
		{
			this.Initialize();
		}
		
		[Column(Storage="_DocumentTemplateId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int DocumentTemplateId
		{
			get
			{
				return this._DocumentTemplateId;
			}
			set
			{
				if ((this._DocumentTemplateId != value))
				{
					this.OnDocumentTemplateIdChanging(value);
					this.SendPropertyChanging();
					this._DocumentTemplateId = value;
					this.SendPropertyChanged("DocumentTemplateId");
					this.OnDocumentTemplateIdChanged();
				}
			}
		}
		
		[Column(Storage="_FileName", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[Column(Storage="_FileUrl", DbType="VarChar(1024) NOT NULL", CanBeNull=false)]
		[DataMember(Order=3)]
		public string FileUrl
		{
			get
			{
				return this._FileUrl;
			}
			set
			{
				if ((this._FileUrl != value))
				{
					this.OnFileUrlChanging(value);
					this.SendPropertyChanging();
					this._FileUrl = value;
					this.SendPropertyChanged("FileUrl");
					this.OnFileUrlChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=4)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Column(Storage="_DocumentTemplateTypeId", DbType="Int NOT NULL")]
		[DataMember(Order=5)]
		public int DocumentTemplateTypeId
		{
			get
			{
				return this._DocumentTemplateTypeId;
			}
			set
			{
				if ((this._DocumentTemplateTypeId != value))
				{
					if (this._DocumentTemplateType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDocumentTemplateTypeIdChanging(value);
					this.SendPropertyChanging();
					this._DocumentTemplateTypeId = value;
					this.SendPropertyChanged("DocumentTemplateTypeId");
					this.OnDocumentTemplateTypeIdChanged();
				}
			}
		}
		
		[Association(Name="Company_DocumentTemplate", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.DocumentTemplates.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.DocumentTemplates.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[Association(Name="DocumentTemplateType_DocumentTemplate", Storage="_DocumentTemplateType", ThisKey="DocumentTemplateTypeId", OtherKey="DocumentTemplateTypeId", IsForeignKey=true)]
		public DocumentTemplateType DocumentTemplateType
		{
			get
			{
				return this._DocumentTemplateType.Entity;
			}
			set
			{
				DocumentTemplateType previousValue = this._DocumentTemplateType.Entity;
				if (((previousValue != value) 
							|| (this._DocumentTemplateType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DocumentTemplateType.Entity = null;
						previousValue.DocumentTemplates.Remove(this);
					}
					this._DocumentTemplateType.Entity = value;
					if ((value != null))
					{
						value.DocumentTemplates.Add(this);
						this._DocumentTemplateTypeId = value.DocumentTemplateTypeId;
					}
					else
					{
						this._DocumentTemplateTypeId = default(int);
					}
					this.SendPropertyChanged("DocumentTemplateType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Company = default(EntityRef<Company>);
			this._DocumentTemplateType = default(EntityRef<DocumentTemplateType>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.DocumentTemplateType")]
	[DataContract()]
	public partial class DocumentTemplateType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DocumentTemplateTypeId;
		
		private string _Name;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<DocumentTemplate> _DocumentTemplates;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDocumentTemplateTypeIdChanging(int value);
    partial void OnDocumentTemplateTypeIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public DocumentTemplateType()
		{
			this.Initialize();
		}
		
		[Column(Storage="_DocumentTemplateTypeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int DocumentTemplateTypeId
		{
			get
			{
				return this._DocumentTemplateTypeId;
			}
			set
			{
				if ((this._DocumentTemplateTypeId != value))
				{
					this.OnDocumentTemplateTypeIdChanging(value);
					this.SendPropertyChanging();
					this._DocumentTemplateTypeId = value;
					this.SendPropertyChanged("DocumentTemplateTypeId");
					this.OnDocumentTemplateTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="DocumentTemplateType_DocumentTemplate", Storage="_DocumentTemplates", ThisKey="DocumentTemplateTypeId", OtherKey="DocumentTemplateTypeId")]
		[DataMember(Order=3, EmitDefaultValue=false)]
		public EntitySet<DocumentTemplate> DocumentTemplates
		{
			get
			{
				if ((this.serializing 
							&& (this._DocumentTemplates.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._DocumentTemplates;
			}
			set
			{
				this._DocumentTemplates.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DocumentTemplates(DocumentTemplate entity)
		{
			this.SendPropertyChanging();
			entity.DocumentTemplateType = this;
		}
		
		private void detach_DocumentTemplates(DocumentTemplate entity)
		{
			this.SendPropertyChanging();
			entity.DocumentTemplateType = null;
		}
		
		private void Initialize()
		{
			this._DocumentTemplates = new EntitySet<DocumentTemplate>(new Action<DocumentTemplate>(this.attach_DocumentTemplates), new Action<DocumentTemplate>(this.detach_DocumentTemplates));
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.DropPayout")]
	[DataContract()]
	public partial class DropPayout : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DropPayoutId;
		
		private int _DepositId;
		
		private int _CompanyId;
		
		private decimal _Amount;
		
		private string _Comment;
		
		private string _Recipient;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private int _UserId;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Deposit> _Deposit;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Company> _Company;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDropPayoutIdChanging(int value);
    partial void OnDropPayoutIdChanged();
    partial void OnDepositIdChanging(int value);
    partial void OnDepositIdChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnRecipientChanging(string value);
    partial void OnRecipientChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    #endregion
		
		public DropPayout()
		{
			this.Initialize();
		}
		
		[Column(Storage="_DropPayoutId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int DropPayoutId
		{
			get
			{
				return this._DropPayoutId;
			}
			set
			{
				if ((this._DropPayoutId != value))
				{
					this.OnDropPayoutIdChanging(value);
					this.SendPropertyChanging();
					this._DropPayoutId = value;
					this.SendPropertyChanged("DropPayoutId");
					this.OnDropPayoutIdChanged();
				}
			}
		}
		
		[Column(Storage="_DepositId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=2)]
		public int DepositId
		{
			get
			{
				return this._DepositId;
			}
			set
			{
				if ((this._DepositId != value))
				{
					if (this._Deposit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepositIdChanging(value);
					this.SendPropertyChanging();
					this._DepositId = value;
					this.SendPropertyChanged("DepositId");
					this.OnDepositIdChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=3)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Deposit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Column(Storage="_Amount", DbType="Decimal(18,2) NOT NULL")]
		[DataMember(Order=4)]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[Column(Storage="_Comment", DbType="VarChar(50)")]
		[DataMember(Order=5)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[Column(Storage="_Recipient", DbType="VarChar(50)")]
		[DataMember(Order=6)]
		public string Recipient
		{
			get
			{
				return this._Recipient;
			}
			set
			{
				if ((this._Recipient != value))
				{
					this.OnRecipientChanging(value);
					this.SendPropertyChanging();
					this._Recipient = value;
					this.SendPropertyChanged("Recipient");
					this.OnRecipientChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime")]
		[DataMember(Order=7)]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="Int NOT NULL")]
		[DataMember(Order=8)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Association(Name="Deposit_DropPayout", Storage="_Deposit", ThisKey="DepositId,CompanyId", OtherKey="DepositId,CompanyId", IsForeignKey=true)]
		public Deposit Deposit
		{
			get
			{
				return this._Deposit.Entity;
			}
			set
			{
				Deposit previousValue = this._Deposit.Entity;
				if (((previousValue != value) 
							|| (this._Deposit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Deposit.Entity = null;
						previousValue.DropPayouts.Remove(this);
					}
					this._Deposit.Entity = value;
					if ((value != null))
					{
						value.DropPayouts.Add(this);
						this._DepositId = value.DepositId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._DepositId = default(int);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Deposit");
				}
			}
		}
		
		[Association(Name="Company_DropPayout", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.DropPayouts.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.DropPayouts.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[Association(Name="User_DropPayout", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.DropPayouts.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.DropPayouts.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Deposit = default(EntityRef<Deposit>);
			this._Company = default(EntityRef<Company>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.EducationLevel")]
	[DataContract()]
	public partial class EducationLevel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EducationLevelId;
		
		private string _Name;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Profile> _Profiles;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEducationLevelIdChanging(int value);
    partial void OnEducationLevelIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public EducationLevel()
		{
			this.Initialize();
		}
		
		[Column(Storage="_EducationLevelId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int EducationLevelId
		{
			get
			{
				return this._EducationLevelId;
			}
			set
			{
				if ((this._EducationLevelId != value))
				{
					this.OnEducationLevelIdChanging(value);
					this.SendPropertyChanging();
					this._EducationLevelId = value;
					this.SendPropertyChanged("EducationLevelId");
					this.OnEducationLevelIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="EducationLevel_Profile", Storage="_Profiles", ThisKey="EducationLevelId", OtherKey="EducationLevelId")]
		[DataMember(Order=3, EmitDefaultValue=false)]
		public EntitySet<Profile> Profiles
		{
			get
			{
				if ((this.serializing 
							&& (this._Profiles.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Profiles;
			}
			set
			{
				this._Profiles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Profiles(Profile entity)
		{
			this.SendPropertyChanging();
			entity.EducationLevel = this;
		}
		
		private void detach_Profiles(Profile entity)
		{
			this.SendPropertyChanging();
			entity.EducationLevel = null;
		}
		
		private void Initialize()
		{
			this._Profiles = new EntitySet<Profile>(new Action<Profile>(this.attach_Profiles), new Action<Profile>(this.detach_Profiles));
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.Employee")]
	[DataContract()]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmployeeId;
		
		private string _AddressComp;
		
		private System.Nullable<int> _AlienationId;
		
		private string _BirthCity;
		
		private System.Nullable<int> _BondId;
		
		private System.Nullable<int> _BranchId;
		
		private System.Nullable<int> _EmployeeFunctionId;
		
		private string _Enrollment;
		
		private System.Nullable<int> _FormationId;
		
		private System.Nullable<System.DateTime> _FormationDate;
		
		private System.Nullable<int> _GratifiedFunctionId;
		
		private bool _IsSalesperson;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private System.Nullable<bool> _IsTechnical;
		
		private System.Nullable<decimal> _Salary;
		
		private string _Position;
		
		private System.Nullable<decimal> _HH;
		
		private System.Nullable<int> _ShiftId;
		
		private System.Nullable<int> _WorkJourneyId;
		
		private System.Nullable<bool> _IsActive;
		
		private int _ProfileId;
		
		private string _Pis;
		
		private System.Nullable<decimal> _Comission;
		
		private string _DigitalIdentification;
		
		private System.Nullable<int> _PostId;
		
		private string _AccountNumber;
		
		private System.Nullable<int> _BankId;
		
		private string _Agency;
		
		private System.Nullable<int> _OrganizationlevelId;
		
		private System.Nullable<System.DateTime> _AdmissionDate;
		
		private int _CompanyId;
		
		private System.Nullable<System.DateTime> _AlienationDate;
		
		private string _Ctps;
		
		private string _CtpsSerial;
		
		private System.Nullable<decimal> _TransportPerDay;
		
		private System.Nullable<System.DateTime> _JourneyBegin;
		
		private System.Nullable<System.DateTime> _JourneyEnd;
		
		private System.Nullable<System.DateTime> _IntervalBegin;
		
		private System.Nullable<System.DateTime> _IntervalEnd;
		
		private System.Nullable<decimal> _PurchaseCeilingValue;
		
		private System.Nullable<decimal> _Healthfulless;
		
		private System.Nullable<decimal> _HazardPay;
		
		private System.Nullable<decimal> _Anuency;
		
		private System.Nullable<decimal> _OtherIncomes;
		
		private System.Nullable<decimal> _Fgts;
		
		private System.Nullable<int> _ConfederacyContributionId;
		
		private System.Nullable<int> _SupportContributionId;
		
		private System.Nullable<int> _SindicalContributionId;
		
		private System.Nullable<int> _AssociatedContribution1Id;
		
		private System.Nullable<int> _AssociatedContribution2Id;
		
		private System.Nullable<decimal> _SalaryAntecipation;
		
		private System.Nullable<int> _WorkingHours;
		
		private System.Nullable<bool> _CentralBuyer;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private string _CreatedByUser;
		
		private string _ModifiedByUser;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Budget> _Budgets;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Contract> _Contracts;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Customer> _Customers;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Customer> _Customers1;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<CustomerCall> _CustomerCalls;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<CustomerFollowup> _CustomerFollowups;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<EmployeeAdditionalInformation> _EmployeeAdditionalInformations;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<EmployeeCompetency> _EmployeeCompetencies;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<EmployeeDependent> _EmployeeDependents;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<EmployeeFunctionHistory> _EmployeeFunctionHistories;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<EmployeeOtherSchool> _EmployeeOtherSchools;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<PurchaseOrder> _PurchaseOrders;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<PurchaseRequest> _PurchaseRequests;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Sale> _Sales;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<ServiceOrderBook> _ServiceOrderBooks;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<ServiceOrderItem> _ServiceOrderItems;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<StatusHistory> _StatusHistories;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Alienation> _Alienation;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Bond> _Bond;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<WorkJourney> _WorkJourney;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Company> _Company;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Bank> _Bank;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<OrganizationLevel> _OrganizationLevel;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Post> _Post;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Profile> _Profile;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Shift> _Shift;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Supplier> _Supplier;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Supplier> _Supplier1;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Supplier> _Supplier2;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Supplier> _Supplier3;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Supplier> _Supplier4;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeIdChanging(int value);
    partial void OnEmployeeIdChanged();
    partial void OnAddressCompChanging(string value);
    partial void OnAddressCompChanged();
    partial void OnAlienationIdChanging(System.Nullable<int> value);
    partial void OnAlienationIdChanged();
    partial void OnBirthCityChanging(string value);
    partial void OnBirthCityChanged();
    partial void OnBondIdChanging(System.Nullable<int> value);
    partial void OnBondIdChanged();
    partial void OnBranchIdChanging(System.Nullable<int> value);
    partial void OnBranchIdChanged();
    partial void OnEmployeeFunctionIdChanging(System.Nullable<int> value);
    partial void OnEmployeeFunctionIdChanged();
    partial void OnEnrollmentChanging(string value);
    partial void OnEnrollmentChanged();
    partial void OnFormationIdChanging(System.Nullable<int> value);
    partial void OnFormationIdChanged();
    partial void OnFormationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnFormationDateChanged();
    partial void OnGratifiedFunctionIdChanging(System.Nullable<int> value);
    partial void OnGratifiedFunctionIdChanged();
    partial void OnIsSalespersonChanging(bool value);
    partial void OnIsSalespersonChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    partial void OnIsTechnicalChanging(System.Nullable<bool> value);
    partial void OnIsTechnicalChanged();
    partial void OnSalaryChanging(System.Nullable<decimal> value);
    partial void OnSalaryChanged();
    partial void OnPositionChanging(string value);
    partial void OnPositionChanged();
    partial void OnHHChanging(System.Nullable<decimal> value);
    partial void OnHHChanged();
    partial void OnShiftIdChanging(System.Nullable<int> value);
    partial void OnShiftIdChanged();
    partial void OnWorkJourneyIdChanging(System.Nullable<int> value);
    partial void OnWorkJourneyIdChanged();
    partial void OnIsActiveChanging(System.Nullable<bool> value);
    partial void OnIsActiveChanged();
    partial void OnProfileIdChanging(int value);
    partial void OnProfileIdChanged();
    partial void OnPisChanging(string value);
    partial void OnPisChanged();
    partial void OnComissionChanging(System.Nullable<decimal> value);
    partial void OnComissionChanged();
    partial void OnDigitalIdentificationChanging(string value);
    partial void OnDigitalIdentificationChanged();
    partial void OnPostIdChanging(System.Nullable<int> value);
    partial void OnPostIdChanged();
    partial void OnAccountNumberChanging(string value);
    partial void OnAccountNumberChanged();
    partial void OnBankIdChanging(System.Nullable<int> value);
    partial void OnBankIdChanged();
    partial void OnAgencyChanging(string value);
    partial void OnAgencyChanged();
    partial void OnOrganizationlevelIdChanging(System.Nullable<int> value);
    partial void OnOrganizationlevelIdChanged();
    partial void OnAdmissionDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAdmissionDateChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnAlienationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAlienationDateChanged();
    partial void OnCtpsChanging(string value);
    partial void OnCtpsChanged();
    partial void OnCtpsSerialChanging(string value);
    partial void OnCtpsSerialChanged();
    partial void OnTransportPerDayChanging(System.Nullable<decimal> value);
    partial void OnTransportPerDayChanged();
    partial void OnJourneyBeginChanging(System.Nullable<System.DateTime> value);
    partial void OnJourneyBeginChanged();
    partial void OnJourneyEndChanging(System.Nullable<System.DateTime> value);
    partial void OnJourneyEndChanged();
    partial void OnIntervalBeginChanging(System.Nullable<System.DateTime> value);
    partial void OnIntervalBeginChanged();
    partial void OnIntervalEndChanging(System.Nullable<System.DateTime> value);
    partial void OnIntervalEndChanged();
    partial void OnPurchaseCeilingValueChanging(System.Nullable<decimal> value);
    partial void OnPurchaseCeilingValueChanged();
    partial void OnHealthfullessChanging(System.Nullable<decimal> value);
    partial void OnHealthfullessChanged();
    partial void OnHazardPayChanging(System.Nullable<decimal> value);
    partial void OnHazardPayChanged();
    partial void OnAnuencyChanging(System.Nullable<decimal> value);
    partial void OnAnuencyChanged();
    partial void OnOtherIncomesChanging(System.Nullable<decimal> value);
    partial void OnOtherIncomesChanged();
    partial void OnFgtsChanging(System.Nullable<decimal> value);
    partial void OnFgtsChanged();
    partial void OnConfederacyContributionIdChanging(System.Nullable<int> value);
    partial void OnConfederacyContributionIdChanged();
    partial void OnSupportContributionIdChanging(System.Nullable<int> value);
    partial void OnSupportContributionIdChanged();
    partial void OnSindicalContributionIdChanging(System.Nullable<int> value);
    partial void OnSindicalContributionIdChanged();
    partial void OnAssociatedContribution1IdChanging(System.Nullable<int> value);
    partial void OnAssociatedContribution1IdChanged();
    partial void OnAssociatedContribution2IdChanging(System.Nullable<int> value);
    partial void OnAssociatedContribution2IdChanged();
    partial void OnSalaryAntecipationChanging(System.Nullable<decimal> value);
    partial void OnSalaryAntecipationChanged();
    partial void OnWorkingHoursChanging(System.Nullable<int> value);
    partial void OnWorkingHoursChanged();
    partial void OnCentralBuyerChanging(System.Nullable<bool> value);
    partial void OnCentralBuyerChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnCreatedByUserChanging(string value);
    partial void OnCreatedByUserChanged();
    partial void OnModifiedByUserChanging(string value);
    partial void OnModifiedByUserChanged();
    #endregion
		
		public Employee()
		{
			this.Initialize();
		}
		
		[Column(Storage="_EmployeeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int EmployeeId
		{
			get
			{
				return this._EmployeeId;
			}
			set
			{
				if ((this._EmployeeId != value))
				{
					this.OnEmployeeIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeId = value;
					this.SendPropertyChanged("EmployeeId");
					this.OnEmployeeIdChanged();
				}
			}
		}
		
		[Column(Storage="_AddressComp", DbType="VarChar(50)")]
		[DataMember(Order=2)]
		public string AddressComp
		{
			get
			{
				return this._AddressComp;
			}
			set
			{
				if ((this._AddressComp != value))
				{
					this.OnAddressCompChanging(value);
					this.SendPropertyChanging();
					this._AddressComp = value;
					this.SendPropertyChanged("AddressComp");
					this.OnAddressCompChanged();
				}
			}
		}
		
		[Column(Storage="_AlienationId", DbType="Int")]
		[DataMember(Order=3)]
		public System.Nullable<int> AlienationId
		{
			get
			{
				return this._AlienationId;
			}
			set
			{
				if ((this._AlienationId != value))
				{
					if (this._Alienation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAlienationIdChanging(value);
					this.SendPropertyChanging();
					this._AlienationId = value;
					this.SendPropertyChanged("AlienationId");
					this.OnAlienationIdChanged();
				}
			}
		}
		
		[Column(Storage="_BirthCity", DbType="VarChar(50)")]
		[DataMember(Order=4)]
		public string BirthCity
		{
			get
			{
				return this._BirthCity;
			}
			set
			{
				if ((this._BirthCity != value))
				{
					this.OnBirthCityChanging(value);
					this.SendPropertyChanging();
					this._BirthCity = value;
					this.SendPropertyChanged("BirthCity");
					this.OnBirthCityChanged();
				}
			}
		}
		
		[Column(Storage="_BondId", DbType="Int")]
		[DataMember(Order=5)]
		public System.Nullable<int> BondId
		{
			get
			{
				return this._BondId;
			}
			set
			{
				if ((this._BondId != value))
				{
					if (this._Bond.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBondIdChanging(value);
					this.SendPropertyChanging();
					this._BondId = value;
					this.SendPropertyChanged("BondId");
					this.OnBondIdChanged();
				}
			}
		}
		
		[Column(Storage="_BranchId", DbType="Int")]
		[DataMember(Order=6)]
		public System.Nullable<int> BranchId
		{
			get
			{
				return this._BranchId;
			}
			set
			{
				if ((this._BranchId != value))
				{
					this.OnBranchIdChanging(value);
					this.SendPropertyChanging();
					this._BranchId = value;
					this.SendPropertyChanged("BranchId");
					this.OnBranchIdChanged();
				}
			}
		}
		
		[Column(Storage="_EmployeeFunctionId", DbType="Int")]
		[DataMember(Order=7)]
		public System.Nullable<int> EmployeeFunctionId
		{
			get
			{
				return this._EmployeeFunctionId;
			}
			set
			{
				if ((this._EmployeeFunctionId != value))
				{
					this.OnEmployeeFunctionIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeFunctionId = value;
					this.SendPropertyChanged("EmployeeFunctionId");
					this.OnEmployeeFunctionIdChanged();
				}
			}
		}
		
		[Column(Storage="_Enrollment", DbType="VarChar(20)")]
		[DataMember(Order=8)]
		public string Enrollment
		{
			get
			{
				return this._Enrollment;
			}
			set
			{
				if ((this._Enrollment != value))
				{
					this.OnEnrollmentChanging(value);
					this.SendPropertyChanging();
					this._Enrollment = value;
					this.SendPropertyChanged("Enrollment");
					this.OnEnrollmentChanged();
				}
			}
		}
		
		[Column(Storage="_FormationId", DbType="Int")]
		[DataMember(Order=9)]
		public System.Nullable<int> FormationId
		{
			get
			{
				return this._FormationId;
			}
			set
			{
				if ((this._FormationId != value))
				{
					this.OnFormationIdChanging(value);
					this.SendPropertyChanging();
					this._FormationId = value;
					this.SendPropertyChanged("FormationId");
					this.OnFormationIdChanged();
				}
			}
		}
		
		[Column(Storage="_FormationDate", DbType="DateTime")]
		[DataMember(Order=10)]
		public System.Nullable<System.DateTime> FormationDate
		{
			get
			{
				return this._FormationDate;
			}
			set
			{
				if ((this._FormationDate != value))
				{
					this.OnFormationDateChanging(value);
					this.SendPropertyChanging();
					this._FormationDate = value;
					this.SendPropertyChanged("FormationDate");
					this.OnFormationDateChanged();
				}
			}
		}
		
		[Column(Storage="_GratifiedFunctionId", DbType="Int")]
		[DataMember(Order=11)]
		public System.Nullable<int> GratifiedFunctionId
		{
			get
			{
				return this._GratifiedFunctionId;
			}
			set
			{
				if ((this._GratifiedFunctionId != value))
				{
					this.OnGratifiedFunctionIdChanging(value);
					this.SendPropertyChanging();
					this._GratifiedFunctionId = value;
					this.SendPropertyChanged("GratifiedFunctionId");
					this.OnGratifiedFunctionIdChanged();
				}
			}
		}
		
		[Column(Storage="_IsSalesperson", DbType="Bit NOT NULL")]
		[DataMember(Order=12)]
		public bool IsSalesperson
		{
			get
			{
				return this._IsSalesperson;
			}
			set
			{
				if ((this._IsSalesperson != value))
				{
					this.OnIsSalespersonChanging(value);
					this.SendPropertyChanging();
					this._IsSalesperson = value;
					this.SendPropertyChanged("IsSalesperson");
					this.OnIsSalespersonChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime")]
		[DataMember(Order=13)]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_IsTechnical", DbType="Bit")]
		[DataMember(Order=14)]
		public System.Nullable<bool> IsTechnical
		{
			get
			{
				return this._IsTechnical;
			}
			set
			{
				if ((this._IsTechnical != value))
				{
					this.OnIsTechnicalChanging(value);
					this.SendPropertyChanging();
					this._IsTechnical = value;
					this.SendPropertyChanged("IsTechnical");
					this.OnIsTechnicalChanged();
				}
			}
		}
		
		[Column(Storage="_Salary", DbType="Decimal(18,2)")]
		[DataMember(Order=15)]
		public System.Nullable<decimal> Salary
		{
			get
			{
				return this._Salary;
			}
			set
			{
				if ((this._Salary != value))
				{
					this.OnSalaryChanging(value);
					this.SendPropertyChanging();
					this._Salary = value;
					this.SendPropertyChanged("Salary");
					this.OnSalaryChanged();
				}
			}
		}
		
		[Column(Storage="_Position", DbType="VarChar(30)")]
		[DataMember(Order=16)]
		public string Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[Column(Storage="_HH", DbType="Decimal(18,2)")]
		[DataMember(Order=17)]
		public System.Nullable<decimal> HH
		{
			get
			{
				return this._HH;
			}
			set
			{
				if ((this._HH != value))
				{
					this.OnHHChanging(value);
					this.SendPropertyChanging();
					this._HH = value;
					this.SendPropertyChanged("HH");
					this.OnHHChanged();
				}
			}
		}
		
		[Column(Storage="_ShiftId", DbType="Int")]
		[DataMember(Order=18)]
		public System.Nullable<int> ShiftId
		{
			get
			{
				return this._ShiftId;
			}
			set
			{
				if ((this._ShiftId != value))
				{
					if (this._Shift.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShiftIdChanging(value);
					this.SendPropertyChanging();
					this._ShiftId = value;
					this.SendPropertyChanged("ShiftId");
					this.OnShiftIdChanged();
				}
			}
		}
		
		[Column(Storage="_WorkJourneyId", DbType="Int")]
		[DataMember(Order=19)]
		public System.Nullable<int> WorkJourneyId
		{
			get
			{
				return this._WorkJourneyId;
			}
			set
			{
				if ((this._WorkJourneyId != value))
				{
					if (this._WorkJourney.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWorkJourneyIdChanging(value);
					this.SendPropertyChanging();
					this._WorkJourneyId = value;
					this.SendPropertyChanged("WorkJourneyId");
					this.OnWorkJourneyIdChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit")]
		[DataMember(Order=20)]
		public System.Nullable<bool> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[Column(Storage="_ProfileId", DbType="Int NOT NULL")]
		[DataMember(Order=21)]
		public int ProfileId
		{
			get
			{
				return this._ProfileId;
			}
			set
			{
				if ((this._ProfileId != value))
				{
					if (this._Profile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProfileIdChanging(value);
					this.SendPropertyChanging();
					this._ProfileId = value;
					this.SendPropertyChanged("ProfileId");
					this.OnProfileIdChanged();
				}
			}
		}
		
		[Column(Storage="_Pis", DbType="VarChar(18)")]
		[DataMember(Order=22)]
		public string Pis
		{
			get
			{
				return this._Pis;
			}
			set
			{
				if ((this._Pis != value))
				{
					this.OnPisChanging(value);
					this.SendPropertyChanging();
					this._Pis = value;
					this.SendPropertyChanged("Pis");
					this.OnPisChanged();
				}
			}
		}
		
		[Column(Storage="_Comission", DbType="Decimal(18,2)")]
		[DataMember(Order=23)]
		public System.Nullable<decimal> Comission
		{
			get
			{
				return this._Comission;
			}
			set
			{
				if ((this._Comission != value))
				{
					this.OnComissionChanging(value);
					this.SendPropertyChanging();
					this._Comission = value;
					this.SendPropertyChanged("Comission");
					this.OnComissionChanged();
				}
			}
		}
		
		[Column(Storage="_DigitalIdentification", DbType="VarChar(50)")]
		[DataMember(Order=24)]
		public string DigitalIdentification
		{
			get
			{
				return this._DigitalIdentification;
			}
			set
			{
				if ((this._DigitalIdentification != value))
				{
					this.OnDigitalIdentificationChanging(value);
					this.SendPropertyChanging();
					this._DigitalIdentification = value;
					this.SendPropertyChanged("DigitalIdentification");
					this.OnDigitalIdentificationChanged();
				}
			}
		}
		
		[Column(Storage="_PostId", DbType="Int")]
		[DataMember(Order=25)]
		public System.Nullable<int> PostId
		{
			get
			{
				return this._PostId;
			}
			set
			{
				if ((this._PostId != value))
				{
					if (this._Post.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPostIdChanging(value);
					this.SendPropertyChanging();
					this._PostId = value;
					this.SendPropertyChanged("PostId");
					this.OnPostIdChanged();
				}
			}
		}
		
		[Column(Storage="_AccountNumber", DbType="VarChar(10)")]
		[DataMember(Order=26)]
		public string AccountNumber
		{
			get
			{
				return this._AccountNumber;
			}
			set
			{
				if ((this._AccountNumber != value))
				{
					this.OnAccountNumberChanging(value);
					this.SendPropertyChanging();
					this._AccountNumber = value;
					this.SendPropertyChanged("AccountNumber");
					this.OnAccountNumberChanged();
				}
			}
		}
		
		[Column(Storage="_BankId", DbType="Int")]
		[DataMember(Order=27)]
		public System.Nullable<int> BankId
		{
			get
			{
				return this._BankId;
			}
			set
			{
				if ((this._BankId != value))
				{
					if (this._Bank.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBankIdChanging(value);
					this.SendPropertyChanging();
					this._BankId = value;
					this.SendPropertyChanged("BankId");
					this.OnBankIdChanged();
				}
			}
		}
		
		[Column(Storage="_Agency", DbType="VarChar(10)")]
		[DataMember(Order=28)]
		public string Agency
		{
			get
			{
				return this._Agency;
			}
			set
			{
				if ((this._Agency != value))
				{
					this.OnAgencyChanging(value);
					this.SendPropertyChanging();
					this._Agency = value;
					this.SendPropertyChanged("Agency");
					this.OnAgencyChanged();
				}
			}
		}
		
		[Column(Storage="_OrganizationlevelId", DbType="Int")]
		[DataMember(Order=29)]
		public System.Nullable<int> OrganizationlevelId
		{
			get
			{
				return this._OrganizationlevelId;
			}
			set
			{
				if ((this._OrganizationlevelId != value))
				{
					if (this._OrganizationLevel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrganizationlevelIdChanging(value);
					this.SendPropertyChanging();
					this._OrganizationlevelId = value;
					this.SendPropertyChanged("OrganizationlevelId");
					this.OnOrganizationlevelIdChanged();
				}
			}
		}
		
		[Column(Storage="_AdmissionDate", DbType="DateTime")]
		[DataMember(Order=30)]
		public System.Nullable<System.DateTime> AdmissionDate
		{
			get
			{
				return this._AdmissionDate;
			}
			set
			{
				if ((this._AdmissionDate != value))
				{
					this.OnAdmissionDateChanging(value);
					this.SendPropertyChanging();
					this._AdmissionDate = value;
					this.SendPropertyChanged("AdmissionDate");
					this.OnAdmissionDateChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=31)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Column(Storage="_AlienationDate", DbType="DateTime")]
		[DataMember(Order=32)]
		public System.Nullable<System.DateTime> AlienationDate
		{
			get
			{
				return this._AlienationDate;
			}
			set
			{
				if ((this._AlienationDate != value))
				{
					this.OnAlienationDateChanging(value);
					this.SendPropertyChanging();
					this._AlienationDate = value;
					this.SendPropertyChanged("AlienationDate");
					this.OnAlienationDateChanged();
				}
			}
		}
		
		[Column(Storage="_Ctps", DbType="VarChar(20)")]
		[DataMember(Order=33)]
		public string Ctps
		{
			get
			{
				return this._Ctps;
			}
			set
			{
				if ((this._Ctps != value))
				{
					this.OnCtpsChanging(value);
					this.SendPropertyChanging();
					this._Ctps = value;
					this.SendPropertyChanged("Ctps");
					this.OnCtpsChanged();
				}
			}
		}
		
		[Column(Storage="_CtpsSerial", DbType="VarChar(20)")]
		[DataMember(Order=34)]
		public string CtpsSerial
		{
			get
			{
				return this._CtpsSerial;
			}
			set
			{
				if ((this._CtpsSerial != value))
				{
					this.OnCtpsSerialChanging(value);
					this.SendPropertyChanging();
					this._CtpsSerial = value;
					this.SendPropertyChanged("CtpsSerial");
					this.OnCtpsSerialChanged();
				}
			}
		}
		
		[Column(Storage="_TransportPerDay", DbType="Decimal(18,2)")]
		[DataMember(Order=35)]
		public System.Nullable<decimal> TransportPerDay
		{
			get
			{
				return this._TransportPerDay;
			}
			set
			{
				if ((this._TransportPerDay != value))
				{
					this.OnTransportPerDayChanging(value);
					this.SendPropertyChanging();
					this._TransportPerDay = value;
					this.SendPropertyChanged("TransportPerDay");
					this.OnTransportPerDayChanged();
				}
			}
		}
		
		[Column(Storage="_JourneyBegin", DbType="DateTime")]
		[DataMember(Order=36)]
		public System.Nullable<System.DateTime> JourneyBegin
		{
			get
			{
				return this._JourneyBegin;
			}
			set
			{
				if ((this._JourneyBegin != value))
				{
					this.OnJourneyBeginChanging(value);
					this.SendPropertyChanging();
					this._JourneyBegin = value;
					this.SendPropertyChanged("JourneyBegin");
					this.OnJourneyBeginChanged();
				}
			}
		}
		
		[Column(Storage="_JourneyEnd", DbType="DateTime")]
		[DataMember(Order=37)]
		public System.Nullable<System.DateTime> JourneyEnd
		{
			get
			{
				return this._JourneyEnd;
			}
			set
			{
				if ((this._JourneyEnd != value))
				{
					this.OnJourneyEndChanging(value);
					this.SendPropertyChanging();
					this._JourneyEnd = value;
					this.SendPropertyChanged("JourneyEnd");
					this.OnJourneyEndChanged();
				}
			}
		}
		
		[Column(Storage="_IntervalBegin", DbType="DateTime")]
		[DataMember(Order=38)]
		public System.Nullable<System.DateTime> IntervalBegin
		{
			get
			{
				return this._IntervalBegin;
			}
			set
			{
				if ((this._IntervalBegin != value))
				{
					this.OnIntervalBeginChanging(value);
					this.SendPropertyChanging();
					this._IntervalBegin = value;
					this.SendPropertyChanged("IntervalBegin");
					this.OnIntervalBeginChanged();
				}
			}
		}
		
		[Column(Storage="_IntervalEnd", DbType="DateTime")]
		[DataMember(Order=39)]
		public System.Nullable<System.DateTime> IntervalEnd
		{
			get
			{
				return this._IntervalEnd;
			}
			set
			{
				if ((this._IntervalEnd != value))
				{
					this.OnIntervalEndChanging(value);
					this.SendPropertyChanging();
					this._IntervalEnd = value;
					this.SendPropertyChanged("IntervalEnd");
					this.OnIntervalEndChanged();
				}
			}
		}
		
		[Column(Storage="_PurchaseCeilingValue", DbType="Decimal(18,2)")]
		[DataMember(Order=40)]
		public System.Nullable<decimal> PurchaseCeilingValue
		{
			get
			{
				return this._PurchaseCeilingValue;
			}
			set
			{
				if ((this._PurchaseCeilingValue != value))
				{
					this.OnPurchaseCeilingValueChanging(value);
					this.SendPropertyChanging();
					this._PurchaseCeilingValue = value;
					this.SendPropertyChanged("PurchaseCeilingValue");
					this.OnPurchaseCeilingValueChanged();
				}
			}
		}
		
		[Column(Storage="_Healthfulless", DbType="Decimal(18,2)")]
		[DataMember(Order=41)]
		public System.Nullable<decimal> Healthfulless
		{
			get
			{
				return this._Healthfulless;
			}
			set
			{
				if ((this._Healthfulless != value))
				{
					this.OnHealthfullessChanging(value);
					this.SendPropertyChanging();
					this._Healthfulless = value;
					this.SendPropertyChanged("Healthfulless");
					this.OnHealthfullessChanged();
				}
			}
		}
		
		[Column(Storage="_HazardPay", DbType="Decimal(18,2)")]
		[DataMember(Order=42)]
		public System.Nullable<decimal> HazardPay
		{
			get
			{
				return this._HazardPay;
			}
			set
			{
				if ((this._HazardPay != value))
				{
					this.OnHazardPayChanging(value);
					this.SendPropertyChanging();
					this._HazardPay = value;
					this.SendPropertyChanged("HazardPay");
					this.OnHazardPayChanged();
				}
			}
		}
		
		[Column(Storage="_Anuency", DbType="Decimal(18,2)")]
		[DataMember(Order=43)]
		public System.Nullable<decimal> Anuency
		{
			get
			{
				return this._Anuency;
			}
			set
			{
				if ((this._Anuency != value))
				{
					this.OnAnuencyChanging(value);
					this.SendPropertyChanging();
					this._Anuency = value;
					this.SendPropertyChanged("Anuency");
					this.OnAnuencyChanged();
				}
			}
		}
		
		[Column(Storage="_OtherIncomes", DbType="Decimal(18,2)")]
		[DataMember(Order=44)]
		public System.Nullable<decimal> OtherIncomes
		{
			get
			{
				return this._OtherIncomes;
			}
			set
			{
				if ((this._OtherIncomes != value))
				{
					this.OnOtherIncomesChanging(value);
					this.SendPropertyChanging();
					this._OtherIncomes = value;
					this.SendPropertyChanged("OtherIncomes");
					this.OnOtherIncomesChanged();
				}
			}
		}
		
		[Column(Storage="_Fgts", DbType="Decimal(18,2)")]
		[DataMember(Order=45)]
		public System.Nullable<decimal> Fgts
		{
			get
			{
				return this._Fgts;
			}
			set
			{
				if ((this._Fgts != value))
				{
					this.OnFgtsChanging(value);
					this.SendPropertyChanging();
					this._Fgts = value;
					this.SendPropertyChanged("Fgts");
					this.OnFgtsChanged();
				}
			}
		}
		
		[Column(Storage="_ConfederacyContributionId", DbType="Int")]
		[DataMember(Order=46)]
		public System.Nullable<int> ConfederacyContributionId
		{
			get
			{
				return this._ConfederacyContributionId;
			}
			set
			{
				if ((this._ConfederacyContributionId != value))
				{
					if (this._Supplier1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnConfederacyContributionIdChanging(value);
					this.SendPropertyChanging();
					this._ConfederacyContributionId = value;
					this.SendPropertyChanged("ConfederacyContributionId");
					this.OnConfederacyContributionIdChanged();
				}
			}
		}
		
		[Column(Storage="_SupportContributionId", DbType="Int")]
		[DataMember(Order=47)]
		public System.Nullable<int> SupportContributionId
		{
			get
			{
				return this._SupportContributionId;
			}
			set
			{
				if ((this._SupportContributionId != value))
				{
					if (this._Supplier2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSupportContributionIdChanging(value);
					this.SendPropertyChanging();
					this._SupportContributionId = value;
					this.SendPropertyChanged("SupportContributionId");
					this.OnSupportContributionIdChanged();
				}
			}
		}
		
		[Column(Storage="_SindicalContributionId", DbType="Int")]
		[DataMember(Order=48)]
		public System.Nullable<int> SindicalContributionId
		{
			get
			{
				return this._SindicalContributionId;
			}
			set
			{
				if ((this._SindicalContributionId != value))
				{
					if (this._Supplier.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSindicalContributionIdChanging(value);
					this.SendPropertyChanging();
					this._SindicalContributionId = value;
					this.SendPropertyChanged("SindicalContributionId");
					this.OnSindicalContributionIdChanged();
				}
			}
		}
		
		[Column(Storage="_AssociatedContribution1Id", DbType="Int")]
		[DataMember(Order=49)]
		public System.Nullable<int> AssociatedContribution1Id
		{
			get
			{
				return this._AssociatedContribution1Id;
			}
			set
			{
				if ((this._AssociatedContribution1Id != value))
				{
					if (this._Supplier3.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssociatedContribution1IdChanging(value);
					this.SendPropertyChanging();
					this._AssociatedContribution1Id = value;
					this.SendPropertyChanged("AssociatedContribution1Id");
					this.OnAssociatedContribution1IdChanged();
				}
			}
		}
		
		[Column(Storage="_AssociatedContribution2Id", DbType="Int")]
		[DataMember(Order=50)]
		public System.Nullable<int> AssociatedContribution2Id
		{
			get
			{
				return this._AssociatedContribution2Id;
			}
			set
			{
				if ((this._AssociatedContribution2Id != value))
				{
					if (this._Supplier4.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssociatedContribution2IdChanging(value);
					this.SendPropertyChanging();
					this._AssociatedContribution2Id = value;
					this.SendPropertyChanged("AssociatedContribution2Id");
					this.OnAssociatedContribution2IdChanged();
				}
			}
		}
		
		[Column(Storage="_SalaryAntecipation", DbType="Decimal(18,2)")]
		[DataMember(Order=51)]
		public System.Nullable<decimal> SalaryAntecipation
		{
			get
			{
				return this._SalaryAntecipation;
			}
			set
			{
				if ((this._SalaryAntecipation != value))
				{
					this.OnSalaryAntecipationChanging(value);
					this.SendPropertyChanging();
					this._SalaryAntecipation = value;
					this.SendPropertyChanged("SalaryAntecipation");
					this.OnSalaryAntecipationChanged();
				}
			}
		}
		
		[Column(Storage="_WorkingHours", DbType="Int")]
		[DataMember(Order=52)]
		public System.Nullable<int> WorkingHours
		{
			get
			{
				return this._WorkingHours;
			}
			set
			{
				if ((this._WorkingHours != value))
				{
					this.OnWorkingHoursChanging(value);
					this.SendPropertyChanging();
					this._WorkingHours = value;
					this.SendPropertyChanged("WorkingHours");
					this.OnWorkingHoursChanged();
				}
			}
		}
		
		[Column(Storage="_CentralBuyer", DbType="Bit")]
		[DataMember(Order=53)]
		public System.Nullable<bool> CentralBuyer
		{
			get
			{
				return this._CentralBuyer;
			}
			set
			{
				if ((this._CentralBuyer != value))
				{
					this.OnCentralBuyerChanging(value);
					this.SendPropertyChanging();
					this._CentralBuyer = value;
					this.SendPropertyChanged("CentralBuyer");
					this.OnCentralBuyerChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime")]
		[DataMember(Order=54)]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedByUser", DbType="VarChar(50)")]
		[DataMember(Order=55)]
		public string CreatedByUser
		{
			get
			{
				return this._CreatedByUser;
			}
			set
			{
				if ((this._CreatedByUser != value))
				{
					this.OnCreatedByUserChanging(value);
					this.SendPropertyChanging();
					this._CreatedByUser = value;
					this.SendPropertyChanged("CreatedByUser");
					this.OnCreatedByUserChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedByUser", DbType="VarChar(50)")]
		[DataMember(Order=56)]
		public string ModifiedByUser
		{
			get
			{
				return this._ModifiedByUser;
			}
			set
			{
				if ((this._ModifiedByUser != value))
				{
					this.OnModifiedByUserChanging(value);
					this.SendPropertyChanging();
					this._ModifiedByUser = value;
					this.SendPropertyChanged("ModifiedByUser");
					this.OnModifiedByUserChanged();
				}
			}
		}
		
		[Association(Name="Employee_Budget", Storage="_Budgets", ThisKey="EmployeeId,CompanyId", OtherKey="VendorId,CompanyId")]
		[DataMember(Order=57, EmitDefaultValue=false)]
		public EntitySet<Budget> Budgets
		{
			get
			{
				if ((this.serializing 
							&& (this._Budgets.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Budgets;
			}
			set
			{
				this._Budgets.Assign(value);
			}
		}
		
		[Association(Name="Employee_Contract", Storage="_Contracts", ThisKey="EmployeeId,CompanyId", OtherKey="EmployeeId,CompanyId")]
		[DataMember(Order=58, EmitDefaultValue=false)]
		public EntitySet<Contract> Contracts
		{
			get
			{
				if ((this.serializing 
							&& (this._Contracts.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Contracts;
			}
			set
			{
				this._Contracts.Assign(value);
			}
		}
		
		[Association(Name="Employee_Customer", Storage="_Customers", ThisKey="EmployeeId,CompanyId", OtherKey="SalesPersonId,CompanyId")]
		[DataMember(Order=59, EmitDefaultValue=false)]
		public EntitySet<Customer> Customers
		{
			get
			{
				if ((this.serializing 
							&& (this._Customers.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Customers;
			}
			set
			{
				this._Customers.Assign(value);
			}
		}
		
		[Association(Name="Employee_Customer1", Storage="_Customers1", ThisKey="EmployeeId,CompanyId", OtherKey="SupplementalSalesPersonId,CompanyId")]
		[DataMember(Order=60, EmitDefaultValue=false)]
		public EntitySet<Customer> Customers1
		{
			get
			{
				if ((this.serializing 
							&& (this._Customers1.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Customers1;
			}
			set
			{
				this._Customers1.Assign(value);
			}
		}
		
		[Association(Name="Employee_CustomerCall", Storage="_CustomerCalls", ThisKey="EmployeeId,CompanyId", OtherKey="TechnicalEmployeeId,CompanyId")]
		[DataMember(Order=61, EmitDefaultValue=false)]
		public EntitySet<CustomerCall> CustomerCalls
		{
			get
			{
				if ((this.serializing 
							&& (this._CustomerCalls.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._CustomerCalls;
			}
			set
			{
				this._CustomerCalls.Assign(value);
			}
		}
		
		[Association(Name="Employee_CustomerFollowup", Storage="_CustomerFollowups", ThisKey="EmployeeId,CompanyId", OtherKey="UserId,CompanyId")]
		[DataMember(Order=62, EmitDefaultValue=false)]
		public EntitySet<CustomerFollowup> CustomerFollowups
		{
			get
			{
				if ((this.serializing 
							&& (this._CustomerFollowups.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._CustomerFollowups;
			}
			set
			{
				this._CustomerFollowups.Assign(value);
			}
		}
		
		[Association(Name="Employee_EmployeeAdditionalInformation", Storage="_EmployeeAdditionalInformations", ThisKey="EmployeeId,CompanyId", OtherKey="EmployeeId,CompanyId")]
		[DataMember(Order=63, EmitDefaultValue=false)]
		public EntitySet<EmployeeAdditionalInformation> EmployeeAdditionalInformations
		{
			get
			{
				if ((this.serializing 
							&& (this._EmployeeAdditionalInformations.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._EmployeeAdditionalInformations;
			}
			set
			{
				this._EmployeeAdditionalInformations.Assign(value);
			}
		}
		
		[Association(Name="Employee_EmployeeCompetency", Storage="_EmployeeCompetencies", ThisKey="EmployeeId,CompanyId", OtherKey="EmployeeId,CompanyId")]
		[DataMember(Order=64, EmitDefaultValue=false)]
		public EntitySet<EmployeeCompetency> EmployeeCompetencies
		{
			get
			{
				if ((this.serializing 
							&& (this._EmployeeCompetencies.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._EmployeeCompetencies;
			}
			set
			{
				this._EmployeeCompetencies.Assign(value);
			}
		}
		
		[Association(Name="Employee_EmployeeDependent", Storage="_EmployeeDependents", ThisKey="EmployeeId,CompanyId", OtherKey="EmployeeId,CompanyId")]
		[DataMember(Order=65, EmitDefaultValue=false)]
		public EntitySet<EmployeeDependent> EmployeeDependents
		{
			get
			{
				if ((this.serializing 
							&& (this._EmployeeDependents.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._EmployeeDependents;
			}
			set
			{
				this._EmployeeDependents.Assign(value);
			}
		}
		
		[Association(Name="Employee_EmployeeFunctionHistory", Storage="_EmployeeFunctionHistories", ThisKey="EmployeeId,CompanyId", OtherKey="EmployeeId,CompanyId")]
		[DataMember(Order=66, EmitDefaultValue=false)]
		public EntitySet<EmployeeFunctionHistory> EmployeeFunctionHistories
		{
			get
			{
				if ((this.serializing 
							&& (this._EmployeeFunctionHistories.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._EmployeeFunctionHistories;
			}
			set
			{
				this._EmployeeFunctionHistories.Assign(value);
			}
		}
		
		[Association(Name="Employee_EmployeeOtherSchool", Storage="_EmployeeOtherSchools", ThisKey="EmployeeId,CompanyId", OtherKey="EmployeeId,CompanyId")]
		[DataMember(Order=67, EmitDefaultValue=false)]
		public EntitySet<EmployeeOtherSchool> EmployeeOtherSchools
		{
			get
			{
				if ((this.serializing 
							&& (this._EmployeeOtherSchools.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._EmployeeOtherSchools;
			}
			set
			{
				this._EmployeeOtherSchools.Assign(value);
			}
		}
		
		[Association(Name="Employee_PurchaseOrder", Storage="_PurchaseOrders", ThisKey="EmployeeId,CompanyId", OtherKey="EmployeeId,CompanyId")]
		[DataMember(Order=68, EmitDefaultValue=false)]
		public EntitySet<PurchaseOrder> PurchaseOrders
		{
			get
			{
				if ((this.serializing 
							&& (this._PurchaseOrders.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._PurchaseOrders;
			}
			set
			{
				this._PurchaseOrders.Assign(value);
			}
		}
		
		[Association(Name="Employee_PurchaseRequest", Storage="_PurchaseRequests", ThisKey="EmployeeId,CompanyId", OtherKey="EmployeeId,CompanyId")]
		[DataMember(Order=69, EmitDefaultValue=false)]
		public EntitySet<PurchaseRequest> PurchaseRequests
		{
			get
			{
				if ((this.serializing 
							&& (this._PurchaseRequests.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._PurchaseRequests;
			}
			set
			{
				this._PurchaseRequests.Assign(value);
			}
		}
		
		[Association(Name="Employee_Sale", Storage="_Sales", ThisKey="EmployeeId,CompanyId", OtherKey="VendorId,CompanyId")]
		[DataMember(Order=70, EmitDefaultValue=false)]
		public EntitySet<Sale> Sales
		{
			get
			{
				if ((this.serializing 
							&& (this._Sales.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Sales;
			}
			set
			{
				this._Sales.Assign(value);
			}
		}
		
		[Association(Name="Employee_ServiceOrderBook", Storage="_ServiceOrderBooks", ThisKey="EmployeeId,CompanyId", OtherKey="EmployeeId,CompanyId")]
		[DataMember(Order=71, EmitDefaultValue=false)]
		public EntitySet<ServiceOrderBook> ServiceOrderBooks
		{
			get
			{
				if ((this.serializing 
							&& (this._ServiceOrderBooks.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ServiceOrderBooks;
			}
			set
			{
				this._ServiceOrderBooks.Assign(value);
			}
		}
		
		[Association(Name="Employee_ServiceOrderItem", Storage="_ServiceOrderItems", ThisKey="EmployeeId,CompanyId", OtherKey="EmployeeId,CompanyId")]
		[DataMember(Order=72, EmitDefaultValue=false)]
		public EntitySet<ServiceOrderItem> ServiceOrderItems
		{
			get
			{
				if ((this.serializing 
							&& (this._ServiceOrderItems.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ServiceOrderItems;
			}
			set
			{
				this._ServiceOrderItems.Assign(value);
			}
		}
		
		[Association(Name="Employee_StatusHistory", Storage="_StatusHistories", ThisKey="EmployeeId,CompanyId", OtherKey="EmployeeId,CompanyId")]
		[DataMember(Order=73, EmitDefaultValue=false)]
		public EntitySet<StatusHistory> StatusHistories
		{
			get
			{
				if ((this.serializing 
							&& (this._StatusHistories.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._StatusHistories;
			}
			set
			{
				this._StatusHistories.Assign(value);
			}
		}
		
		[Association(Name="Alienation_Employee", Storage="_Alienation", ThisKey="AlienationId", OtherKey="AlienationId", IsForeignKey=true)]
		public Alienation Alienation
		{
			get
			{
				return this._Alienation.Entity;
			}
			set
			{
				Alienation previousValue = this._Alienation.Entity;
				if (((previousValue != value) 
							|| (this._Alienation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Alienation.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._Alienation.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._AlienationId = value.AlienationId;
					}
					else
					{
						this._AlienationId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Alienation");
				}
			}
		}
		
		[Association(Name="Bond_Employee", Storage="_Bond", ThisKey="BondId", OtherKey="BondId", IsForeignKey=true)]
		public Bond Bond
		{
			get
			{
				return this._Bond.Entity;
			}
			set
			{
				Bond previousValue = this._Bond.Entity;
				if (((previousValue != value) 
							|| (this._Bond.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bond.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._Bond.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._BondId = value.BondId;
					}
					else
					{
						this._BondId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Bond");
				}
			}
		}
		
		[Association(Name="WorkJourney_Employee", Storage="_WorkJourney", ThisKey="WorkJourneyId", OtherKey="WorkJourneyId", IsForeignKey=true)]
		public WorkJourney WorkJourney
		{
			get
			{
				return this._WorkJourney.Entity;
			}
			set
			{
				WorkJourney previousValue = this._WorkJourney.Entity;
				if (((previousValue != value) 
							|| (this._WorkJourney.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WorkJourney.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._WorkJourney.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._WorkJourneyId = value.WorkJourneyId;
					}
					else
					{
						this._WorkJourneyId = default(Nullable<int>);
					}
					this.SendPropertyChanged("WorkJourney");
				}
			}
		}
		
		[Association(Name="Company_Employee", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[Association(Name="Bank_Employee", Storage="_Bank", ThisKey="BankId", OtherKey="BankId", IsForeignKey=true, DeleteRule="SET NULL")]
		public Bank Bank
		{
			get
			{
				return this._Bank.Entity;
			}
			set
			{
				Bank previousValue = this._Bank.Entity;
				if (((previousValue != value) 
							|| (this._Bank.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bank.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._Bank.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._BankId = value.BankId;
					}
					else
					{
						this._BankId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Bank");
				}
			}
		}
		
		[Association(Name="OrganizationLevel_Employee", Storage="_OrganizationLevel", ThisKey="OrganizationlevelId", OtherKey="OrganizationlevelId", IsForeignKey=true)]
		public OrganizationLevel OrganizationLevel
		{
			get
			{
				return this._OrganizationLevel.Entity;
			}
			set
			{
				OrganizationLevel previousValue = this._OrganizationLevel.Entity;
				if (((previousValue != value) 
							|| (this._OrganizationLevel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrganizationLevel.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._OrganizationLevel.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._OrganizationlevelId = value.OrganizationlevelId;
					}
					else
					{
						this._OrganizationlevelId = default(Nullable<int>);
					}
					this.SendPropertyChanged("OrganizationLevel");
				}
			}
		}
		
		[Association(Name="Post_Employee", Storage="_Post", ThisKey="PostId", OtherKey="PostId", IsForeignKey=true)]
		public Post Post
		{
			get
			{
				return this._Post.Entity;
			}
			set
			{
				Post previousValue = this._Post.Entity;
				if (((previousValue != value) 
							|| (this._Post.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Post.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._Post.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._PostId = value.PostId;
					}
					else
					{
						this._PostId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Post");
				}
			}
		}
		
		[Association(Name="Profile_Employee", Storage="_Profile", ThisKey="ProfileId", OtherKey="ProfileId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Profile Profile
		{
			get
			{
				return this._Profile.Entity;
			}
			set
			{
				Profile previousValue = this._Profile.Entity;
				if (((previousValue != value) 
							|| (this._Profile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Profile.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._Profile.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._ProfileId = value.ProfileId;
					}
					else
					{
						this._ProfileId = default(int);
					}
					this.SendPropertyChanged("Profile");
				}
			}
		}
		
		[Association(Name="Shift_Employee", Storage="_Shift", ThisKey="ShiftId", OtherKey="ShiftId", IsForeignKey=true)]
		public Shift Shift
		{
			get
			{
				return this._Shift.Entity;
			}
			set
			{
				Shift previousValue = this._Shift.Entity;
				if (((previousValue != value) 
							|| (this._Shift.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Shift.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._Shift.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._ShiftId = value.ShiftId;
					}
					else
					{
						this._ShiftId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Shift");
				}
			}
		}
		
		[Association(Name="Supplier_Employee", Storage="_Supplier", ThisKey="SindicalContributionId", OtherKey="SupplierId", IsForeignKey=true)]
		public Supplier Supplier
		{
			get
			{
				return this._Supplier.Entity;
			}
			set
			{
				Supplier previousValue = this._Supplier.Entity;
				if (((previousValue != value) 
							|| (this._Supplier.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Supplier.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._Supplier.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._SindicalContributionId = value.SupplierId;
					}
					else
					{
						this._SindicalContributionId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Supplier");
				}
			}
		}
		
		[Association(Name="Supplier_Employee1", Storage="_Supplier1", ThisKey="ConfederacyContributionId", OtherKey="SupplierId", IsForeignKey=true)]
		public Supplier Supplier1
		{
			get
			{
				return this._Supplier1.Entity;
			}
			set
			{
				Supplier previousValue = this._Supplier1.Entity;
				if (((previousValue != value) 
							|| (this._Supplier1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Supplier1.Entity = null;
						previousValue.Employees1.Remove(this);
					}
					this._Supplier1.Entity = value;
					if ((value != null))
					{
						value.Employees1.Add(this);
						this._ConfederacyContributionId = value.SupplierId;
					}
					else
					{
						this._ConfederacyContributionId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Supplier1");
				}
			}
		}
		
		[Association(Name="Supplier_Employee2", Storage="_Supplier2", ThisKey="SupportContributionId", OtherKey="SupplierId", IsForeignKey=true)]
		public Supplier Supplier2
		{
			get
			{
				return this._Supplier2.Entity;
			}
			set
			{
				Supplier previousValue = this._Supplier2.Entity;
				if (((previousValue != value) 
							|| (this._Supplier2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Supplier2.Entity = null;
						previousValue.Employees2.Remove(this);
					}
					this._Supplier2.Entity = value;
					if ((value != null))
					{
						value.Employees2.Add(this);
						this._SupportContributionId = value.SupplierId;
					}
					else
					{
						this._SupportContributionId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Supplier2");
				}
			}
		}
		
		[Association(Name="Supplier_Employee3", Storage="_Supplier3", ThisKey="AssociatedContribution1Id", OtherKey="SupplierId", IsForeignKey=true)]
		public Supplier Supplier3
		{
			get
			{
				return this._Supplier3.Entity;
			}
			set
			{
				Supplier previousValue = this._Supplier3.Entity;
				if (((previousValue != value) 
							|| (this._Supplier3.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Supplier3.Entity = null;
						previousValue.Employees3.Remove(this);
					}
					this._Supplier3.Entity = value;
					if ((value != null))
					{
						value.Employees3.Add(this);
						this._AssociatedContribution1Id = value.SupplierId;
					}
					else
					{
						this._AssociatedContribution1Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Supplier3");
				}
			}
		}
		
		[Association(Name="Supplier_Employee4", Storage="_Supplier4", ThisKey="AssociatedContribution2Id", OtherKey="SupplierId", IsForeignKey=true)]
		public Supplier Supplier4
		{
			get
			{
				return this._Supplier4.Entity;
			}
			set
			{
				Supplier previousValue = this._Supplier4.Entity;
				if (((previousValue != value) 
							|| (this._Supplier4.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Supplier4.Entity = null;
						previousValue.Employees4.Remove(this);
					}
					this._Supplier4.Entity = value;
					if ((value != null))
					{
						value.Employees4.Add(this);
						this._AssociatedContribution2Id = value.SupplierId;
					}
					else
					{
						this._AssociatedContribution2Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Supplier4");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Budgets(Budget entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Budgets(Budget entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_Contracts(Contract entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Contracts(Contract entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_Customers1(Customer entity)
		{
			this.SendPropertyChanging();
			entity.Employee1 = this;
		}
		
		private void detach_Customers1(Customer entity)
		{
			this.SendPropertyChanging();
			entity.Employee1 = null;
		}
		
		private void attach_CustomerCalls(CustomerCall entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_CustomerCalls(CustomerCall entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_CustomerFollowups(CustomerFollowup entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_CustomerFollowups(CustomerFollowup entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_EmployeeAdditionalInformations(EmployeeAdditionalInformation entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_EmployeeAdditionalInformations(EmployeeAdditionalInformation entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_EmployeeCompetencies(EmployeeCompetency entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_EmployeeCompetencies(EmployeeCompetency entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_EmployeeDependents(EmployeeDependent entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_EmployeeDependents(EmployeeDependent entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_EmployeeFunctionHistories(EmployeeFunctionHistory entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_EmployeeFunctionHistories(EmployeeFunctionHistory entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_EmployeeOtherSchools(EmployeeOtherSchool entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_EmployeeOtherSchools(EmployeeOtherSchool entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_PurchaseOrders(PurchaseOrder entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_PurchaseOrders(PurchaseOrder entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_PurchaseRequests(PurchaseRequest entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_PurchaseRequests(PurchaseRequest entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_Sales(Sale entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Sales(Sale entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_ServiceOrderBooks(ServiceOrderBook entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_ServiceOrderBooks(ServiceOrderBook entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_ServiceOrderItems(ServiceOrderItem entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_ServiceOrderItems(ServiceOrderItem entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_StatusHistories(StatusHistory entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_StatusHistories(StatusHistory entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void Initialize()
		{
			this._Budgets = new EntitySet<Budget>(new Action<Budget>(this.attach_Budgets), new Action<Budget>(this.detach_Budgets));
			this._Contracts = new EntitySet<Contract>(new Action<Contract>(this.attach_Contracts), new Action<Contract>(this.detach_Contracts));
			this._Customers = new EntitySet<Customer>(new Action<Customer>(this.attach_Customers), new Action<Customer>(this.detach_Customers));
			this._Customers1 = new EntitySet<Customer>(new Action<Customer>(this.attach_Customers1), new Action<Customer>(this.detach_Customers1));
			this._CustomerCalls = new EntitySet<CustomerCall>(new Action<CustomerCall>(this.attach_CustomerCalls), new Action<CustomerCall>(this.detach_CustomerCalls));
			this._CustomerFollowups = new EntitySet<CustomerFollowup>(new Action<CustomerFollowup>(this.attach_CustomerFollowups), new Action<CustomerFollowup>(this.detach_CustomerFollowups));
			this._EmployeeAdditionalInformations = new EntitySet<EmployeeAdditionalInformation>(new Action<EmployeeAdditionalInformation>(this.attach_EmployeeAdditionalInformations), new Action<EmployeeAdditionalInformation>(this.detach_EmployeeAdditionalInformations));
			this._EmployeeCompetencies = new EntitySet<EmployeeCompetency>(new Action<EmployeeCompetency>(this.attach_EmployeeCompetencies), new Action<EmployeeCompetency>(this.detach_EmployeeCompetencies));
			this._EmployeeDependents = new EntitySet<EmployeeDependent>(new Action<EmployeeDependent>(this.attach_EmployeeDependents), new Action<EmployeeDependent>(this.detach_EmployeeDependents));
			this._EmployeeFunctionHistories = new EntitySet<EmployeeFunctionHistory>(new Action<EmployeeFunctionHistory>(this.attach_EmployeeFunctionHistories), new Action<EmployeeFunctionHistory>(this.detach_EmployeeFunctionHistories));
			this._EmployeeOtherSchools = new EntitySet<EmployeeOtherSchool>(new Action<EmployeeOtherSchool>(this.attach_EmployeeOtherSchools), new Action<EmployeeOtherSchool>(this.detach_EmployeeOtherSchools));
			this._PurchaseOrders = new EntitySet<PurchaseOrder>(new Action<PurchaseOrder>(this.attach_PurchaseOrders), new Action<PurchaseOrder>(this.detach_PurchaseOrders));
			this._PurchaseRequests = new EntitySet<PurchaseRequest>(new Action<PurchaseRequest>(this.attach_PurchaseRequests), new Action<PurchaseRequest>(this.detach_PurchaseRequests));
			this._Sales = new EntitySet<Sale>(new Action<Sale>(this.attach_Sales), new Action<Sale>(this.detach_Sales));
			this._ServiceOrderBooks = new EntitySet<ServiceOrderBook>(new Action<ServiceOrderBook>(this.attach_ServiceOrderBooks), new Action<ServiceOrderBook>(this.detach_ServiceOrderBooks));
			this._ServiceOrderItems = new EntitySet<ServiceOrderItem>(new Action<ServiceOrderItem>(this.attach_ServiceOrderItems), new Action<ServiceOrderItem>(this.detach_ServiceOrderItems));
			this._StatusHistories = new EntitySet<StatusHistory>(new Action<StatusHistory>(this.attach_StatusHistories), new Action<StatusHistory>(this.detach_StatusHistories));
			this._Alienation = default(EntityRef<Alienation>);
			this._Bond = default(EntityRef<Bond>);
			this._WorkJourney = default(EntityRef<WorkJourney>);
			this._Company = default(EntityRef<Company>);
			this._Bank = default(EntityRef<Bank>);
			this._OrganizationLevel = default(EntityRef<OrganizationLevel>);
			this._Post = default(EntityRef<Post>);
			this._Profile = default(EntityRef<Profile>);
			this._Shift = default(EntityRef<Shift>);
			this._Supplier = default(EntityRef<Supplier>);
			this._Supplier1 = default(EntityRef<Supplier>);
			this._Supplier2 = default(EntityRef<Supplier>);
			this._Supplier3 = default(EntityRef<Supplier>);
			this._Supplier4 = default(EntityRef<Supplier>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.EmployeeAdditionalInformation")]
	[DataContract()]
	public partial class EmployeeAdditionalInformation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmployeeId;
		
		private int _AddonInfoDataId;
		
		private int _AddonInfoId;
		
		private int _CompanyId;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<AdditionalInformation> _AdditionalInformation;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Company> _Company;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Employee> _Employee;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<AdditionalInformationData> _AdditionalInformationData;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeIdChanging(int value);
    partial void OnEmployeeIdChanged();
    partial void OnAddonInfoDataIdChanging(int value);
    partial void OnAddonInfoDataIdChanged();
    partial void OnAddonInfoIdChanging(int value);
    partial void OnAddonInfoIdChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    #endregion
		
		public EmployeeAdditionalInformation()
		{
			this.Initialize();
		}
		
		[Column(Storage="_EmployeeId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=1)]
		public int EmployeeId
		{
			get
			{
				return this._EmployeeId;
			}
			set
			{
				if ((this._EmployeeId != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeId = value;
					this.SendPropertyChanged("EmployeeId");
					this.OnEmployeeIdChanged();
				}
			}
		}
		
		[Column(Storage="_AddonInfoDataId", DbType="Int NOT NULL")]
		[DataMember(Order=2)]
		public int AddonInfoDataId
		{
			get
			{
				return this._AddonInfoDataId;
			}
			set
			{
				if ((this._AddonInfoDataId != value))
				{
					if (this._AdditionalInformationData.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddonInfoDataIdChanging(value);
					this.SendPropertyChanging();
					this._AddonInfoDataId = value;
					this.SendPropertyChanged("AddonInfoDataId");
					this.OnAddonInfoDataIdChanged();
				}
			}
		}
		
		[Column(Storage="_AddonInfoId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=3)]
		public int AddonInfoId
		{
			get
			{
				return this._AddonInfoId;
			}
			set
			{
				if ((this._AddonInfoId != value))
				{
					if (this._AdditionalInformation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddonInfoIdChanging(value);
					this.SendPropertyChanging();
					this._AddonInfoId = value;
					this.SendPropertyChanged("AddonInfoId");
					this.OnAddonInfoIdChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=4)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Association(Name="AdditionalInformation_EmployeeAdditionalInformation", Storage="_AdditionalInformation", ThisKey="AddonInfoId", OtherKey="AddonInfoId", IsForeignKey=true)]
		public AdditionalInformation AdditionalInformation
		{
			get
			{
				return this._AdditionalInformation.Entity;
			}
			set
			{
				AdditionalInformation previousValue = this._AdditionalInformation.Entity;
				if (((previousValue != value) 
							|| (this._AdditionalInformation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AdditionalInformation.Entity = null;
						previousValue.EmployeeAdditionalInformations.Remove(this);
					}
					this._AdditionalInformation.Entity = value;
					if ((value != null))
					{
						value.EmployeeAdditionalInformations.Add(this);
						this._AddonInfoId = value.AddonInfoId;
					}
					else
					{
						this._AddonInfoId = default(int);
					}
					this.SendPropertyChanged("AdditionalInformation");
				}
			}
		}
		
		[Association(Name="Company_EmployeeAdditionalInformation", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.EmployeeAdditionalInformations.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.EmployeeAdditionalInformations.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[Association(Name="Employee_EmployeeAdditionalInformation", Storage="_Employee", ThisKey="EmployeeId,CompanyId", OtherKey="EmployeeId,CompanyId", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.EmployeeAdditionalInformations.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.EmployeeAdditionalInformations.Add(this);
						this._EmployeeId = value.EmployeeId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._EmployeeId = default(int);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[Association(Name="AdditionalInformationData_EmployeeAdditionalInformation", Storage="_AdditionalInformationData", ThisKey="AddonInfoDataId,AddonInfoId", OtherKey="AddonInfoDataId,AddonInfoId", IsForeignKey=true)]
		public AdditionalInformationData AdditionalInformationData
		{
			get
			{
				return this._AdditionalInformationData.Entity;
			}
			set
			{
				AdditionalInformationData previousValue = this._AdditionalInformationData.Entity;
				if (((previousValue != value) 
							|| (this._AdditionalInformationData.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AdditionalInformationData.Entity = null;
						previousValue.EmployeeAdditionalInformations.Remove(this);
					}
					this._AdditionalInformationData.Entity = value;
					if ((value != null))
					{
						value.EmployeeAdditionalInformations.Add(this);
						this._AddonInfoDataId = value.AddonInfoDataId;
						this._AddonInfoId = value.AddonInfoId;
					}
					else
					{
						this._AddonInfoDataId = default(int);
						this._AddonInfoId = default(int);
					}
					this.SendPropertyChanged("AdditionalInformationData");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._AdditionalInformation = default(EntityRef<AdditionalInformation>);
			this._Company = default(EntityRef<Company>);
			this._Employee = default(EntityRef<Employee>);
			this._AdditionalInformationData = default(EntityRef<AdditionalInformationData>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.EmployeeCompetency")]
	[DataContract()]
	public partial class EmployeeCompetency : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmployeeCompetencyId;
		
		private string _Name;
		
		private int _EmployeeId;
		
		private int _CompanyId;
		
		private int _Rating;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeCompetencyIdChanging(int value);
    partial void OnEmployeeCompetencyIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnEmployeeIdChanging(int value);
    partial void OnEmployeeIdChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnRatingChanging(int value);
    partial void OnRatingChanged();
    #endregion
		
		public EmployeeCompetency()
		{
			this.Initialize();
		}
		
		[Column(Storage="_EmployeeCompetencyId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int EmployeeCompetencyId
		{
			get
			{
				return this._EmployeeCompetencyId;
			}
			set
			{
				if ((this._EmployeeCompetencyId != value))
				{
					this.OnEmployeeCompetencyIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeCompetencyId = value;
					this.SendPropertyChanged("EmployeeCompetencyId");
					this.OnEmployeeCompetencyIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_EmployeeId", DbType="Int NOT NULL")]
		[DataMember(Order=3)]
		public int EmployeeId
		{
			get
			{
				return this._EmployeeId;
			}
			set
			{
				if ((this._EmployeeId != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeId = value;
					this.SendPropertyChanged("EmployeeId");
					this.OnEmployeeIdChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL")]
		[DataMember(Order=4)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Column(Storage="_Rating", DbType="Int NOT NULL")]
		[DataMember(Order=5)]
		public int Rating
		{
			get
			{
				return this._Rating;
			}
			set
			{
				if ((this._Rating != value))
				{
					this.OnRatingChanging(value);
					this.SendPropertyChanging();
					this._Rating = value;
					this.SendPropertyChanged("Rating");
					this.OnRatingChanged();
				}
			}
		}
		
		[Association(Name="Employee_EmployeeCompetency", Storage="_Employee", ThisKey="EmployeeId,CompanyId", OtherKey="EmployeeId,CompanyId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.EmployeeCompetencies.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.EmployeeCompetencies.Add(this);
						this._EmployeeId = value.EmployeeId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._EmployeeId = default(int);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.EmployeeDependent")]
	[DataContract()]
	public partial class EmployeeDependent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmployeeDependentId;
		
		private string _Name;
		
		private System.DateTime _BirthDate;
		
		private string _FamilyTree;
		
		private int _EmployeeId;
		
		private int _CompanyId;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeDependentIdChanging(int value);
    partial void OnEmployeeDependentIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnBirthDateChanging(System.DateTime value);
    partial void OnBirthDateChanged();
    partial void OnFamilyTreeChanging(string value);
    partial void OnFamilyTreeChanged();
    partial void OnEmployeeIdChanging(int value);
    partial void OnEmployeeIdChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    #endregion
		
		public EmployeeDependent()
		{
			this.Initialize();
		}
		
		[Column(Storage="_EmployeeDependentId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int EmployeeDependentId
		{
			get
			{
				return this._EmployeeDependentId;
			}
			set
			{
				if ((this._EmployeeDependentId != value))
				{
					this.OnEmployeeDependentIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeDependentId = value;
					this.SendPropertyChanged("EmployeeDependentId");
					this.OnEmployeeDependentIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(128) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_BirthDate", DbType="DateTime NOT NULL")]
		[DataMember(Order=3)]
		public System.DateTime BirthDate
		{
			get
			{
				return this._BirthDate;
			}
			set
			{
				if ((this._BirthDate != value))
				{
					this.OnBirthDateChanging(value);
					this.SendPropertyChanging();
					this._BirthDate = value;
					this.SendPropertyChanged("BirthDate");
					this.OnBirthDateChanged();
				}
			}
		}
		
		[Column(Storage="_FamilyTree", DbType="VarChar(128) NOT NULL", CanBeNull=false)]
		[DataMember(Order=4)]
		public string FamilyTree
		{
			get
			{
				return this._FamilyTree;
			}
			set
			{
				if ((this._FamilyTree != value))
				{
					this.OnFamilyTreeChanging(value);
					this.SendPropertyChanging();
					this._FamilyTree = value;
					this.SendPropertyChanged("FamilyTree");
					this.OnFamilyTreeChanged();
				}
			}
		}
		
		[Column(Storage="_EmployeeId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=5)]
		public int EmployeeId
		{
			get
			{
				return this._EmployeeId;
			}
			set
			{
				if ((this._EmployeeId != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeId = value;
					this.SendPropertyChanged("EmployeeId");
					this.OnEmployeeIdChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=6)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Association(Name="Employee_EmployeeDependent", Storage="_Employee", ThisKey="EmployeeId,CompanyId", OtherKey="EmployeeId,CompanyId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.EmployeeDependents.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.EmployeeDependents.Add(this);
						this._EmployeeId = value.EmployeeId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._EmployeeId = default(int);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.EmployeeFunction")]
	[DataContract()]
	public partial class EmployeeFunction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmployeeFunctionId;
		
		private string _Name;
		
		private int _CompanyId;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<EmployeeFunctionHistory> _EmployeeFunctionHistories;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Company> _Company;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeFunctionIdChanging(int value);
    partial void OnEmployeeFunctionIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    #endregion
		
		public EmployeeFunction()
		{
			this.Initialize();
		}
		
		[Column(Storage="_EmployeeFunctionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int EmployeeFunctionId
		{
			get
			{
				return this._EmployeeFunctionId;
			}
			set
			{
				if ((this._EmployeeFunctionId != value))
				{
					this.OnEmployeeFunctionIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeFunctionId = value;
					this.SendPropertyChanged("EmployeeFunctionId");
					this.OnEmployeeFunctionIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL")]
		[DataMember(Order=3)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Association(Name="EmployeeFunction_EmployeeFunctionHistory", Storage="_EmployeeFunctionHistories", ThisKey="EmployeeFunctionId", OtherKey="EmployeeFunctionId")]
		[DataMember(Order=4, EmitDefaultValue=false)]
		public EntitySet<EmployeeFunctionHistory> EmployeeFunctionHistories
		{
			get
			{
				if ((this.serializing 
							&& (this._EmployeeFunctionHistories.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._EmployeeFunctionHistories;
			}
			set
			{
				this._EmployeeFunctionHistories.Assign(value);
			}
		}
		
		[Association(Name="Company_EmployeeFunction", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.EmployeeFunctions.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.EmployeeFunctions.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EmployeeFunctionHistories(EmployeeFunctionHistory entity)
		{
			this.SendPropertyChanging();
			entity.EmployeeFunction = this;
		}
		
		private void detach_EmployeeFunctionHistories(EmployeeFunctionHistory entity)
		{
			this.SendPropertyChanging();
			entity.EmployeeFunction = null;
		}
		
		private void Initialize()
		{
			this._EmployeeFunctionHistories = new EntitySet<EmployeeFunctionHistory>(new Action<EmployeeFunctionHistory>(this.attach_EmployeeFunctionHistories), new Action<EmployeeFunctionHistory>(this.detach_EmployeeFunctionHistories));
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.EmployeeFunctionHistory")]
	[DataContract()]
	public partial class EmployeeFunctionHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmployeeFunctionHistoryId;
		
		private int _EmployeeId;
		
		private int _EmployeeFunctionId;
		
		private System.DateTime _ModifedDate;
		
		private int _CompanyId;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<EmployeeFunction> _EmployeeFunction;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Company> _Company;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeFunctionHistoryIdChanging(int value);
    partial void OnEmployeeFunctionHistoryIdChanged();
    partial void OnEmployeeIdChanging(int value);
    partial void OnEmployeeIdChanged();
    partial void OnEmployeeFunctionIdChanging(int value);
    partial void OnEmployeeFunctionIdChanged();
    partial void OnModifedDateChanging(System.DateTime value);
    partial void OnModifedDateChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    #endregion
		
		public EmployeeFunctionHistory()
		{
			this.Initialize();
		}
		
		[Column(Storage="_EmployeeFunctionHistoryId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int EmployeeFunctionHistoryId
		{
			get
			{
				return this._EmployeeFunctionHistoryId;
			}
			set
			{
				if ((this._EmployeeFunctionHistoryId != value))
				{
					this.OnEmployeeFunctionHistoryIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeFunctionHistoryId = value;
					this.SendPropertyChanged("EmployeeFunctionHistoryId");
					this.OnEmployeeFunctionHistoryIdChanged();
				}
			}
		}
		
		[Column(Storage="_EmployeeId", DbType="Int NOT NULL")]
		[DataMember(Order=2)]
		public int EmployeeId
		{
			get
			{
				return this._EmployeeId;
			}
			set
			{
				if ((this._EmployeeId != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeId = value;
					this.SendPropertyChanged("EmployeeId");
					this.OnEmployeeIdChanged();
				}
			}
		}
		
		[Column(Storage="_EmployeeFunctionId", DbType="Int NOT NULL")]
		[DataMember(Order=3)]
		public int EmployeeFunctionId
		{
			get
			{
				return this._EmployeeFunctionId;
			}
			set
			{
				if ((this._EmployeeFunctionId != value))
				{
					if (this._EmployeeFunction.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeFunctionIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeFunctionId = value;
					this.SendPropertyChanged("EmployeeFunctionId");
					this.OnEmployeeFunctionIdChanged();
				}
			}
		}
		
		[Column(Storage="_ModifedDate", DbType="DateTime NOT NULL")]
		[DataMember(Order=4)]
		public System.DateTime ModifedDate
		{
			get
			{
				return this._ModifedDate;
			}
			set
			{
				if ((this._ModifedDate != value))
				{
					this.OnModifedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifedDate = value;
					this.SendPropertyChanged("ModifedDate");
					this.OnModifedDateChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL")]
		[DataMember(Order=5)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Association(Name="EmployeeFunction_EmployeeFunctionHistory", Storage="_EmployeeFunction", ThisKey="EmployeeFunctionId", OtherKey="EmployeeFunctionId", IsForeignKey=true)]
		public EmployeeFunction EmployeeFunction
		{
			get
			{
				return this._EmployeeFunction.Entity;
			}
			set
			{
				EmployeeFunction previousValue = this._EmployeeFunction.Entity;
				if (((previousValue != value) 
							|| (this._EmployeeFunction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmployeeFunction.Entity = null;
						previousValue.EmployeeFunctionHistories.Remove(this);
					}
					this._EmployeeFunction.Entity = value;
					if ((value != null))
					{
						value.EmployeeFunctionHistories.Add(this);
						this._EmployeeFunctionId = value.EmployeeFunctionId;
					}
					else
					{
						this._EmployeeFunctionId = default(int);
					}
					this.SendPropertyChanged("EmployeeFunction");
				}
			}
		}
		
		[Association(Name="Company_EmployeeFunctionHistory", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.EmployeeFunctionHistories.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.EmployeeFunctionHistories.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[Association(Name="Employee_EmployeeFunctionHistory", Storage="_Employee", ThisKey="EmployeeId,CompanyId", OtherKey="EmployeeId,CompanyId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.EmployeeFunctionHistories.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.EmployeeFunctionHistories.Add(this);
						this._EmployeeId = value.EmployeeId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._EmployeeId = default(int);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._EmployeeFunction = default(EntityRef<EmployeeFunction>);
			this._Company = default(EntityRef<Company>);
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.EmployeeOtherSchool")]
	[DataContract()]
	public partial class EmployeeOtherSchool : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OtherSchoolId;
		
		private int _EmployeeId;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private int _CompanyId;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Employee> _Employee;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<OtherSchool> _OtherSchool;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOtherSchoolIdChanging(int value);
    partial void OnOtherSchoolIdChanged();
    partial void OnEmployeeIdChanging(int value);
    partial void OnEmployeeIdChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    #endregion
		
		public EmployeeOtherSchool()
		{
			this.Initialize();
		}
		
		[Column(Storage="_OtherSchoolId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=1)]
		public int OtherSchoolId
		{
			get
			{
				return this._OtherSchoolId;
			}
			set
			{
				if ((this._OtherSchoolId != value))
				{
					if (this._OtherSchool.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOtherSchoolIdChanging(value);
					this.SendPropertyChanging();
					this._OtherSchoolId = value;
					this.SendPropertyChanged("OtherSchoolId");
					this.OnOtherSchoolIdChanged();
				}
			}
		}
		
		[Column(Storage="_EmployeeId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=2)]
		public int EmployeeId
		{
			get
			{
				return this._EmployeeId;
			}
			set
			{
				if ((this._EmployeeId != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeId = value;
					this.SendPropertyChanged("EmployeeId");
					this.OnEmployeeIdChanged();
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime")]
		[DataMember(Order=3)]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime")]
		[DataMember(Order=4)]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=5)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Association(Name="Employee_EmployeeOtherSchool", Storage="_Employee", ThisKey="EmployeeId,CompanyId", OtherKey="EmployeeId,CompanyId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.EmployeeOtherSchools.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.EmployeeOtherSchools.Add(this);
						this._EmployeeId = value.EmployeeId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._EmployeeId = default(int);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[Association(Name="OtherSchool_EmployeeOtherSchool", Storage="_OtherSchool", ThisKey="OtherSchoolId,CompanyId", OtherKey="OtherSchoolId,CompanyId", IsForeignKey=true)]
		public OtherSchool OtherSchool
		{
			get
			{
				return this._OtherSchool.Entity;
			}
			set
			{
				OtherSchool previousValue = this._OtherSchool.Entity;
				if (((previousValue != value) 
							|| (this._OtherSchool.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OtherSchool.Entity = null;
						previousValue.EmployeeOtherSchools.Remove(this);
					}
					this._OtherSchool.Entity = value;
					if ((value != null))
					{
						value.EmployeeOtherSchools.Add(this);
						this._OtherSchoolId = value.OtherSchoolId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._OtherSchoolId = default(int);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("OtherSchool");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Employee = default(EntityRef<Employee>);
			this._OtherSchool = default(EntityRef<OtherSchool>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.Events")]
	[DataContract()]
	public partial class Event : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EventId;
		
		private System.Nullable<int> _EventType;
		
		private string _Name;
		
		private string _Message;
		
		private string _Source;
		
		private string _StackTrace;
		
		private string _Path;
		
		private string _RefererUrl;
		
		private string _HelpLink;
		
		private string _TargetSite;
		
		private System.Nullable<System.DateTime> _CurrentDate;
		
		private string _ExceptionCode;
		
		private int _ApplicationId;
		
		private System.Nullable<int> _UserId;
		
		private System.Nullable<int> _EventStatusId;
		
		private string _Version;
		
		private string _Module;
		
		private System.Nullable<int> _Rating;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<CustomerCall> _CustomerCalls;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Application> _Application;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<EventStatus> _EventStatus;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<User> _User;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventIdChanging(int value);
    partial void OnEventIdChanged();
    partial void OnEventTypeChanging(System.Nullable<int> value);
    partial void OnEventTypeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    partial void OnSourceChanging(string value);
    partial void OnSourceChanged();
    partial void OnStackTraceChanging(string value);
    partial void OnStackTraceChanged();
    partial void OnPathChanging(string value);
    partial void OnPathChanged();
    partial void OnRefererUrlChanging(string value);
    partial void OnRefererUrlChanged();
    partial void OnHelpLinkChanging(string value);
    partial void OnHelpLinkChanged();
    partial void OnTargetSiteChanging(string value);
    partial void OnTargetSiteChanged();
    partial void OnCurrentDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCurrentDateChanged();
    partial void OnExceptionCodeChanging(string value);
    partial void OnExceptionCodeChanged();
    partial void OnApplicationIdChanging(int value);
    partial void OnApplicationIdChanged();
    partial void OnUserIdChanging(System.Nullable<int> value);
    partial void OnUserIdChanged();
    partial void OnEventStatusIdChanging(System.Nullable<int> value);
    partial void OnEventStatusIdChanged();
    partial void OnVersionChanging(string value);
    partial void OnVersionChanged();
    partial void OnModuleChanging(string value);
    partial void OnModuleChanged();
    partial void OnRatingChanging(System.Nullable<int> value);
    partial void OnRatingChanged();
    #endregion
		
		public Event()
		{
			this.Initialize();
		}
		
		[Column(Storage="_EventId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int EventId
		{
			get
			{
				return this._EventId;
			}
			set
			{
				if ((this._EventId != value))
				{
					this.OnEventIdChanging(value);
					this.SendPropertyChanging();
					this._EventId = value;
					this.SendPropertyChanged("EventId");
					this.OnEventIdChanged();
				}
			}
		}
		
		[Column(Storage="_EventType", DbType="Int")]
		[DataMember(Order=2)]
		public System.Nullable<int> EventType
		{
			get
			{
				return this._EventType;
			}
			set
			{
				if ((this._EventType != value))
				{
					this.OnEventTypeChanging(value);
					this.SendPropertyChanging();
					this._EventType = value;
					this.SendPropertyChanged("EventType");
					this.OnEventTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(1024) NOT NULL", CanBeNull=false)]
		[DataMember(Order=3)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Message", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=4)]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[Column(Storage="_Source", DbType="VarChar(1024)")]
		[DataMember(Order=5)]
		public string Source
		{
			get
			{
				return this._Source;
			}
			set
			{
				if ((this._Source != value))
				{
					this.OnSourceChanging(value);
					this.SendPropertyChanging();
					this._Source = value;
					this.SendPropertyChanged("Source");
					this.OnSourceChanged();
				}
			}
		}
		
		[Column(Storage="_StackTrace", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=6)]
		public string StackTrace
		{
			get
			{
				return this._StackTrace;
			}
			set
			{
				if ((this._StackTrace != value))
				{
					this.OnStackTraceChanging(value);
					this.SendPropertyChanging();
					this._StackTrace = value;
					this.SendPropertyChanged("StackTrace");
					this.OnStackTraceChanged();
				}
			}
		}
		
		[Column(Storage="_Path", DbType="VarChar(1024)")]
		[DataMember(Order=7)]
		public string Path
		{
			get
			{
				return this._Path;
			}
			set
			{
				if ((this._Path != value))
				{
					this.OnPathChanging(value);
					this.SendPropertyChanging();
					this._Path = value;
					this.SendPropertyChanged("Path");
					this.OnPathChanged();
				}
			}
		}
		
		[Column(Storage="_RefererUrl", DbType="VarChar(1024)")]
		[DataMember(Order=8)]
		public string RefererUrl
		{
			get
			{
				return this._RefererUrl;
			}
			set
			{
				if ((this._RefererUrl != value))
				{
					this.OnRefererUrlChanging(value);
					this.SendPropertyChanging();
					this._RefererUrl = value;
					this.SendPropertyChanged("RefererUrl");
					this.OnRefererUrlChanged();
				}
			}
		}
		
		[Column(Storage="_HelpLink", DbType="VarChar(1024)")]
		[DataMember(Order=9)]
		public string HelpLink
		{
			get
			{
				return this._HelpLink;
			}
			set
			{
				if ((this._HelpLink != value))
				{
					this.OnHelpLinkChanging(value);
					this.SendPropertyChanging();
					this._HelpLink = value;
					this.SendPropertyChanged("HelpLink");
					this.OnHelpLinkChanged();
				}
			}
		}
		
		[Column(Storage="_TargetSite", DbType="VarChar(1024)")]
		[DataMember(Order=10)]
		public string TargetSite
		{
			get
			{
				return this._TargetSite;
			}
			set
			{
				if ((this._TargetSite != value))
				{
					this.OnTargetSiteChanging(value);
					this.SendPropertyChanging();
					this._TargetSite = value;
					this.SendPropertyChanged("TargetSite");
					this.OnTargetSiteChanged();
				}
			}
		}
		
		[Column(Storage="_CurrentDate", DbType="DateTime")]
		[DataMember(Order=11)]
		public System.Nullable<System.DateTime> CurrentDate
		{
			get
			{
				return this._CurrentDate;
			}
			set
			{
				if ((this._CurrentDate != value))
				{
					this.OnCurrentDateChanging(value);
					this.SendPropertyChanging();
					this._CurrentDate = value;
					this.SendPropertyChanged("CurrentDate");
					this.OnCurrentDateChanged();
				}
			}
		}
		
		[Column(Storage="_ExceptionCode", DbType="VarChar(50)")]
		[DataMember(Order=12)]
		public string ExceptionCode
		{
			get
			{
				return this._ExceptionCode;
			}
			set
			{
				if ((this._ExceptionCode != value))
				{
					this.OnExceptionCodeChanging(value);
					this.SendPropertyChanging();
					this._ExceptionCode = value;
					this.SendPropertyChanged("ExceptionCode");
					this.OnExceptionCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ApplicationId", DbType="Int NOT NULL")]
		[DataMember(Order=13)]
		public int ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					if (this._Application.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="Int")]
		[DataMember(Order=14)]
		public System.Nullable<int> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_EventStatusId", DbType="Int")]
		[DataMember(Order=15)]
		public System.Nullable<int> EventStatusId
		{
			get
			{
				return this._EventStatusId;
			}
			set
			{
				if ((this._EventStatusId != value))
				{
					if (this._EventStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventStatusIdChanging(value);
					this.SendPropertyChanging();
					this._EventStatusId = value;
					this.SendPropertyChanged("EventStatusId");
					this.OnEventStatusIdChanged();
				}
			}
		}
		
		[Column(Storage="_Version", DbType="VarChar(128)")]
		[DataMember(Order=16)]
		public string Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[Column(Storage="_Module", DbType="VarChar(128)")]
		[DataMember(Order=17)]
		public string Module
		{
			get
			{
				return this._Module;
			}
			set
			{
				if ((this._Module != value))
				{
					this.OnModuleChanging(value);
					this.SendPropertyChanging();
					this._Module = value;
					this.SendPropertyChanged("Module");
					this.OnModuleChanged();
				}
			}
		}
		
		[Column(Storage="_Rating", DbType="Int")]
		[DataMember(Order=18)]
		public System.Nullable<int> Rating
		{
			get
			{
				return this._Rating;
			}
			set
			{
				if ((this._Rating != value))
				{
					this.OnRatingChanging(value);
					this.SendPropertyChanging();
					this._Rating = value;
					this.SendPropertyChanged("Rating");
					this.OnRatingChanged();
				}
			}
		}
		
		[Association(Name="Event_CustomerCall", Storage="_CustomerCalls", ThisKey="EventId", OtherKey="EventId")]
		[DataMember(Order=19, EmitDefaultValue=false)]
		public EntitySet<CustomerCall> CustomerCalls
		{
			get
			{
				if ((this.serializing 
							&& (this._CustomerCalls.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._CustomerCalls;
			}
			set
			{
				this._CustomerCalls.Assign(value);
			}
		}
		
		[Association(Name="Application_Event", Storage="_Application", ThisKey="ApplicationId", OtherKey="ApplicationId", IsForeignKey=true)]
		public Application Application
		{
			get
			{
				return this._Application.Entity;
			}
			set
			{
				Application previousValue = this._Application.Entity;
				if (((previousValue != value) 
							|| (this._Application.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Application.Entity = null;
						previousValue.Events.Remove(this);
					}
					this._Application.Entity = value;
					if ((value != null))
					{
						value.Events.Add(this);
						this._ApplicationId = value.ApplicationId;
					}
					else
					{
						this._ApplicationId = default(int);
					}
					this.SendPropertyChanged("Application");
				}
			}
		}
		
		[Association(Name="EventStatus_Event", Storage="_EventStatus", ThisKey="EventStatusId", OtherKey="EventStatusId", IsForeignKey=true)]
		public EventStatus EventStatus
		{
			get
			{
				return this._EventStatus.Entity;
			}
			set
			{
				EventStatus previousValue = this._EventStatus.Entity;
				if (((previousValue != value) 
							|| (this._EventStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EventStatus.Entity = null;
						previousValue.Events.Remove(this);
					}
					this._EventStatus.Entity = value;
					if ((value != null))
					{
						value.Events.Add(this);
						this._EventStatusId = value.EventStatusId;
					}
					else
					{
						this._EventStatusId = default(Nullable<int>);
					}
					this.SendPropertyChanged("EventStatus");
				}
			}
		}
		
		[Association(Name="User_Event", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Events.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Events.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CustomerCalls(CustomerCall entity)
		{
			this.SendPropertyChanging();
			entity.Event = this;
		}
		
		private void detach_CustomerCalls(CustomerCall entity)
		{
			this.SendPropertyChanging();
			entity.Event = null;
		}
		
		private void Initialize()
		{
			this._CustomerCalls = new EntitySet<CustomerCall>(new Action<CustomerCall>(this.attach_CustomerCalls), new Action<CustomerCall>(this.detach_CustomerCalls));
			this._Application = default(EntityRef<Application>);
			this._EventStatus = default(EntityRef<EventStatus>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.EventStatus")]
	[DataContract()]
	public partial class EventStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EventStatusId;
		
		private string _Name;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Event> _Events;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventStatusIdChanging(int value);
    partial void OnEventStatusIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public EventStatus()
		{
			this.Initialize();
		}
		
		[Column(Storage="_EventStatusId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int EventStatusId
		{
			get
			{
				return this._EventStatusId;
			}
			set
			{
				if ((this._EventStatusId != value))
				{
					this.OnEventStatusIdChanging(value);
					this.SendPropertyChanging();
					this._EventStatusId = value;
					this.SendPropertyChanged("EventStatusId");
					this.OnEventStatusIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(128) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="EventStatus_Event", Storage="_Events", ThisKey="EventStatusId", OtherKey="EventStatusId")]
		[DataMember(Order=3, EmitDefaultValue=false)]
		public EntitySet<Event> Events
		{
			get
			{
				if ((this.serializing 
							&& (this._Events.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Events;
			}
			set
			{
				this._Events.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.EventStatus = this;
		}
		
		private void detach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.EventStatus = null;
		}
		
		private void Initialize()
		{
			this._Events = new EntitySet<Event>(new Action<Event>(this.attach_Events), new Action<Event>(this.detach_Events));
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.ExpenditureAuthorization")]
	[DataContract()]
	public partial class ExpenditureAuthorization : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CustomerCallId;
		
		private System.Nullable<int> _BillId;
		
		private decimal _Amount;
		
		private string _Description;
		
		private int _CompanyId;
		
		private System.Nullable<bool> _IsDenied;
		
		private int _ExpenditureAuthorizationId;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Bill> _Bill;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<CustomerCall> _CustomerCall;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Company> _Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomerCallIdChanging(int value);
    partial void OnCustomerCallIdChanged();
    partial void OnBillIdChanging(System.Nullable<int> value);
    partial void OnBillIdChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnIsDeniedChanging(System.Nullable<bool> value);
    partial void OnIsDeniedChanged();
    partial void OnExpenditureAuthorizationIdChanging(int value);
    partial void OnExpenditureAuthorizationIdChanged();
    #endregion
		
		public ExpenditureAuthorization()
		{
			this.Initialize();
		}
		
		[Column(Storage="_CustomerCallId", DbType="Int NOT NULL")]
		[DataMember(Order=1)]
		public int CustomerCallId
		{
			get
			{
				return this._CustomerCallId;
			}
			set
			{
				if ((this._CustomerCallId != value))
				{
					if (this._CustomerCall.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerCallIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerCallId = value;
					this.SendPropertyChanged("CustomerCallId");
					this.OnCustomerCallIdChanged();
				}
			}
		}
		
		[Column(Storage="_BillId", DbType="Int")]
		[DataMember(Order=2)]
		public System.Nullable<int> BillId
		{
			get
			{
				return this._BillId;
			}
			set
			{
				if ((this._BillId != value))
				{
					if (this._Bill.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBillIdChanging(value);
					this.SendPropertyChanging();
					this._BillId = value;
					this.SendPropertyChanged("BillId");
					this.OnBillIdChanged();
				}
			}
		}
		
		[Column(Storage="_Amount", DbType="Decimal(18,2) NOT NULL")]
		[DataMember(Order=3)]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(500)")]
		[DataMember(Order=4)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL")]
		[DataMember(Order=5)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Bill.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Column(Storage="_IsDenied", DbType="Bit")]
		[DataMember(Order=6)]
		public System.Nullable<bool> IsDenied
		{
			get
			{
				return this._IsDenied;
			}
			set
			{
				if ((this._IsDenied != value))
				{
					this.OnIsDeniedChanging(value);
					this.SendPropertyChanging();
					this._IsDenied = value;
					this.SendPropertyChanged("IsDenied");
					this.OnIsDeniedChanged();
				}
			}
		}
		
		[Column(Storage="_ExpenditureAuthorizationId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=7)]
		public int ExpenditureAuthorizationId
		{
			get
			{
				return this._ExpenditureAuthorizationId;
			}
			set
			{
				if ((this._ExpenditureAuthorizationId != value))
				{
					this.OnExpenditureAuthorizationIdChanging(value);
					this.SendPropertyChanging();
					this._ExpenditureAuthorizationId = value;
					this.SendPropertyChanged("ExpenditureAuthorizationId");
					this.OnExpenditureAuthorizationIdChanged();
				}
			}
		}
		
		[Association(Name="Bill_ExpenditureAuthorization", Storage="_Bill", ThisKey="BillId,CompanyId", OtherKey="BillId,CompanyId", IsForeignKey=true)]
		public Bill Bill
		{
			get
			{
				return this._Bill.Entity;
			}
			set
			{
				Bill previousValue = this._Bill.Entity;
				if (((previousValue != value) 
							|| (this._Bill.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bill.Entity = null;
						previousValue.ExpenditureAuthorizations.Remove(this);
					}
					this._Bill.Entity = value;
					if ((value != null))
					{
						value.ExpenditureAuthorizations.Add(this);
						this._BillId = value.BillId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._BillId = default(Nullable<int>);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Bill");
				}
			}
		}
		
		[Association(Name="CustomerCall_ExpenditureAuthorization", Storage="_CustomerCall", ThisKey="CustomerCallId,CompanyId", OtherKey="CustomerCallId,CompanyId", IsForeignKey=true)]
		public CustomerCall CustomerCall
		{
			get
			{
				return this._CustomerCall.Entity;
			}
			set
			{
				CustomerCall previousValue = this._CustomerCall.Entity;
				if (((previousValue != value) 
							|| (this._CustomerCall.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CustomerCall.Entity = null;
						previousValue.ExpenditureAuthorizations.Remove(this);
					}
					this._CustomerCall.Entity = value;
					if ((value != null))
					{
						value.ExpenditureAuthorizations.Add(this);
						this._CustomerCallId = value.CustomerCallId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CustomerCallId = default(int);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("CustomerCall");
				}
			}
		}
		
		[Association(Name="Company_ExpenditureAuthorization", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.ExpenditureAuthorizations.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.ExpenditureAuthorizations.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Bill = default(EntityRef<Bill>);
			this._CustomerCall = default(EntityRef<CustomerCall>);
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.FamilyRendInterval")]
	[DataContract()]
	public partial class FamilyRendInterval : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FamilyRendIntervalId;
		
		private System.Nullable<decimal> _Limit;
		
		private System.Nullable<decimal> _Tax;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFamilyRendIntervalIdChanging(int value);
    partial void OnFamilyRendIntervalIdChanged();
    partial void OnLimitChanging(System.Nullable<decimal> value);
    partial void OnLimitChanged();
    partial void OnTaxChanging(System.Nullable<decimal> value);
    partial void OnTaxChanged();
    #endregion
		
		public FamilyRendInterval()
		{
			this.Initialize();
		}
		
		[Column(Storage="_FamilyRendIntervalId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int FamilyRendIntervalId
		{
			get
			{
				return this._FamilyRendIntervalId;
			}
			set
			{
				if ((this._FamilyRendIntervalId != value))
				{
					this.OnFamilyRendIntervalIdChanging(value);
					this.SendPropertyChanging();
					this._FamilyRendIntervalId = value;
					this.SendPropertyChanged("FamilyRendIntervalId");
					this.OnFamilyRendIntervalIdChanged();
				}
			}
		}
		
		[Column(Storage="_Limit", DbType="Decimal(18,2)")]
		[DataMember(Order=2)]
		public System.Nullable<decimal> Limit
		{
			get
			{
				return this._Limit;
			}
			set
			{
				if ((this._Limit != value))
				{
					this.OnLimitChanging(value);
					this.SendPropertyChanging();
					this._Limit = value;
					this.SendPropertyChanged("Limit");
					this.OnLimitChanged();
				}
			}
		}
		
		[Column(Storage="_Tax", DbType="Decimal(18,2)")]
		[DataMember(Order=3)]
		public System.Nullable<decimal> Tax
		{
			get
			{
				return this._Tax;
			}
			set
			{
				if ((this._Tax != value))
				{
					this.OnTaxChanging(value);
					this.SendPropertyChanging();
					this._Tax = value;
					this.SendPropertyChanged("Tax");
					this.OnTaxChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.FinancierCondition")]
	[DataContract()]
	public partial class FinancierCondition : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CompanyId;
		
		private int _FinancierOperationId;
		
		private int _FinancierConditionId;
		
		private int _ParcelCount;
		
		private decimal _MonthlyTax;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Contract> _Contracts;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Company> _Company;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<FinancierOperation> _FinancierOperation;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnFinancierOperationIdChanging(int value);
    partial void OnFinancierOperationIdChanged();
    partial void OnFinancierConditionIdChanging(int value);
    partial void OnFinancierConditionIdChanged();
    partial void OnParcelCountChanging(int value);
    partial void OnParcelCountChanged();
    partial void OnMonthlyTaxChanging(decimal value);
    partial void OnMonthlyTaxChanged();
    #endregion
		
		public FinancierCondition()
		{
			this.Initialize();
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=1)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Column(Storage="_FinancierOperationId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=2)]
		public int FinancierOperationId
		{
			get
			{
				return this._FinancierOperationId;
			}
			set
			{
				if ((this._FinancierOperationId != value))
				{
					if (this._FinancierOperation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFinancierOperationIdChanging(value);
					this.SendPropertyChanging();
					this._FinancierOperationId = value;
					this.SendPropertyChanged("FinancierOperationId");
					this.OnFinancierOperationIdChanged();
				}
			}
		}
		
		[Column(Storage="_FinancierConditionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=3)]
		public int FinancierConditionId
		{
			get
			{
				return this._FinancierConditionId;
			}
			set
			{
				if ((this._FinancierConditionId != value))
				{
					this.OnFinancierConditionIdChanging(value);
					this.SendPropertyChanging();
					this._FinancierConditionId = value;
					this.SendPropertyChanged("FinancierConditionId");
					this.OnFinancierConditionIdChanged();
				}
			}
		}
		
		[Column(Storage="_ParcelCount", DbType="Int NOT NULL")]
		[DataMember(Order=4)]
		public int ParcelCount
		{
			get
			{
				return this._ParcelCount;
			}
			set
			{
				if ((this._ParcelCount != value))
				{
					this.OnParcelCountChanging(value);
					this.SendPropertyChanging();
					this._ParcelCount = value;
					this.SendPropertyChanged("ParcelCount");
					this.OnParcelCountChanged();
				}
			}
		}
		
		[Column(Storage="_MonthlyTax", DbType="Decimal(12,8) NOT NULL")]
		[DataMember(Order=5)]
		public decimal MonthlyTax
		{
			get
			{
				return this._MonthlyTax;
			}
			set
			{
				if ((this._MonthlyTax != value))
				{
					this.OnMonthlyTaxChanging(value);
					this.SendPropertyChanging();
					this._MonthlyTax = value;
					this.SendPropertyChanged("MonthlyTax");
					this.OnMonthlyTaxChanged();
				}
			}
		}
		
		[Association(Name="FinancierCondition_Contract", Storage="_Contracts", ThisKey="CompanyId,FinancierOperationId,FinancierConditionId", OtherKey="CompanyId,FinancierOperationId,FinancierConditionId")]
		[DataMember(Order=6, EmitDefaultValue=false)]
		public EntitySet<Contract> Contracts
		{
			get
			{
				if ((this.serializing 
							&& (this._Contracts.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Contracts;
			}
			set
			{
				this._Contracts.Assign(value);
			}
		}
		
		[Association(Name="Company_FinancierCondition", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.FinancierConditions.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.FinancierConditions.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[Association(Name="FinancierOperation_FinancierCondition", Storage="_FinancierOperation", ThisKey="FinancierOperationId,CompanyId", OtherKey="FinancierOperationId,CompanyId", IsForeignKey=true)]
		public FinancierOperation FinancierOperation
		{
			get
			{
				return this._FinancierOperation.Entity;
			}
			set
			{
				FinancierOperation previousValue = this._FinancierOperation.Entity;
				if (((previousValue != value) 
							|| (this._FinancierOperation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FinancierOperation.Entity = null;
						previousValue.FinancierConditions.Remove(this);
					}
					this._FinancierOperation.Entity = value;
					if ((value != null))
					{
						value.FinancierConditions.Add(this);
						this._FinancierOperationId = value.FinancierOperationId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._FinancierOperationId = default(int);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("FinancierOperation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Contracts(Contract entity)
		{
			this.SendPropertyChanging();
			entity.FinancierCondition = this;
		}
		
		private void detach_Contracts(Contract entity)
		{
			this.SendPropertyChanging();
			entity.FinancierCondition = null;
		}
		
		private void Initialize()
		{
			this._Contracts = new EntitySet<Contract>(new Action<Contract>(this.attach_Contracts), new Action<Contract>(this.detach_Contracts));
			this._Company = default(EntityRef<Company>);
			this._FinancierOperation = default(EntityRef<FinancierOperation>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.FinancierOperation")]
	[DataContract()]
	public partial class FinancierOperation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FinancierOperationId;
		
		private int _CompanyId;
		
		private decimal _Discount;
		
		private int _ReceiveDay;
		
		private decimal _AdminTax;
		
		private decimal _AdminTaxUnit;
		
		private bool _IsActive;
		
		private int _PaymentMethodId;
		
		private string _MembershipNumber;
		
		private string _OperationNumber;
		
		private System.Nullable<decimal> _OperationTax;
		
		private System.Nullable<decimal> _Penalty;
		
		private System.Nullable<decimal> _Interest;
		
		private System.Nullable<int> _AccountId;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Contract> _Contracts;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<FinancierCondition> _FinancierConditions;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Parcel> _Parcels;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Company> _Company;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Account> _Account;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<PaymentMethod> _PaymentMethod;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFinancierOperationIdChanging(int value);
    partial void OnFinancierOperationIdChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnDiscountChanging(decimal value);
    partial void OnDiscountChanged();
    partial void OnReceiveDayChanging(int value);
    partial void OnReceiveDayChanged();
    partial void OnAdminTaxChanging(decimal value);
    partial void OnAdminTaxChanged();
    partial void OnAdminTaxUnitChanging(decimal value);
    partial void OnAdminTaxUnitChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnPaymentMethodIdChanging(int value);
    partial void OnPaymentMethodIdChanged();
    partial void OnMembershipNumberChanging(string value);
    partial void OnMembershipNumberChanged();
    partial void OnOperationNumberChanging(string value);
    partial void OnOperationNumberChanged();
    partial void OnOperationTaxChanging(System.Nullable<decimal> value);
    partial void OnOperationTaxChanged();
    partial void OnPenaltyChanging(System.Nullable<decimal> value);
    partial void OnPenaltyChanged();
    partial void OnInterestChanging(System.Nullable<decimal> value);
    partial void OnInterestChanged();
    partial void OnAccountIdChanging(System.Nullable<int> value);
    partial void OnAccountIdChanged();
    #endregion
		
		public FinancierOperation()
		{
			this.Initialize();
		}
		
		[Column(Storage="_FinancierOperationId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int FinancierOperationId
		{
			get
			{
				return this._FinancierOperationId;
			}
			set
			{
				if ((this._FinancierOperationId != value))
				{
					this.OnFinancierOperationIdChanging(value);
					this.SendPropertyChanging();
					this._FinancierOperationId = value;
					this.SendPropertyChanged("FinancierOperationId");
					this.OnFinancierOperationIdChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=2)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Column(Storage="_Discount", DbType="Decimal(18,2) NOT NULL")]
		[DataMember(Order=3)]
		public decimal Discount
		{
			get
			{
				return this._Discount;
			}
			set
			{
				if ((this._Discount != value))
				{
					this.OnDiscountChanging(value);
					this.SendPropertyChanging();
					this._Discount = value;
					this.SendPropertyChanged("Discount");
					this.OnDiscountChanged();
				}
			}
		}
		
		[Column(Storage="_ReceiveDay", DbType="Int NOT NULL")]
		[DataMember(Order=4)]
		public int ReceiveDay
		{
			get
			{
				return this._ReceiveDay;
			}
			set
			{
				if ((this._ReceiveDay != value))
				{
					this.OnReceiveDayChanging(value);
					this.SendPropertyChanging();
					this._ReceiveDay = value;
					this.SendPropertyChanged("ReceiveDay");
					this.OnReceiveDayChanged();
				}
			}
		}
		
		[Column(Storage="_AdminTax", DbType="Decimal(18,2) NOT NULL")]
		[DataMember(Order=5)]
		public decimal AdminTax
		{
			get
			{
				return this._AdminTax;
			}
			set
			{
				if ((this._AdminTax != value))
				{
					this.OnAdminTaxChanging(value);
					this.SendPropertyChanging();
					this._AdminTax = value;
					this.SendPropertyChanged("AdminTax");
					this.OnAdminTaxChanged();
				}
			}
		}
		
		[Column(Storage="_AdminTaxUnit", DbType="Decimal(18,2) NOT NULL")]
		[DataMember(Order=6)]
		public decimal AdminTaxUnit
		{
			get
			{
				return this._AdminTaxUnit;
			}
			set
			{
				if ((this._AdminTaxUnit != value))
				{
					this.OnAdminTaxUnitChanging(value);
					this.SendPropertyChanging();
					this._AdminTaxUnit = value;
					this.SendPropertyChanged("AdminTaxUnit");
					this.OnAdminTaxUnitChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit NOT NULL")]
		[DataMember(Order=7)]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[Column(Storage="_PaymentMethodId", DbType="Int NOT NULL")]
		[DataMember(Order=8)]
		public int PaymentMethodId
		{
			get
			{
				return this._PaymentMethodId;
			}
			set
			{
				if ((this._PaymentMethodId != value))
				{
					if (this._PaymentMethod.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPaymentMethodIdChanging(value);
					this.SendPropertyChanging();
					this._PaymentMethodId = value;
					this.SendPropertyChanged("PaymentMethodId");
					this.OnPaymentMethodIdChanged();
				}
			}
		}
		
		[Column(Storage="_MembershipNumber", DbType="VarChar(20)")]
		[DataMember(Order=9)]
		public string MembershipNumber
		{
			get
			{
				return this._MembershipNumber;
			}
			set
			{
				if ((this._MembershipNumber != value))
				{
					this.OnMembershipNumberChanging(value);
					this.SendPropertyChanging();
					this._MembershipNumber = value;
					this.SendPropertyChanged("MembershipNumber");
					this.OnMembershipNumberChanged();
				}
			}
		}
		
		[Column(Storage="_OperationNumber", DbType="VarChar(2000)")]
		[DataMember(Order=10)]
		public string OperationNumber
		{
			get
			{
				return this._OperationNumber;
			}
			set
			{
				if ((this._OperationNumber != value))
				{
					this.OnOperationNumberChanging(value);
					this.SendPropertyChanging();
					this._OperationNumber = value;
					this.SendPropertyChanged("OperationNumber");
					this.OnOperationNumberChanged();
				}
			}
		}
		
		[Column(Storage="_OperationTax", DbType="Decimal(18,2)")]
		[DataMember(Order=11)]
		public System.Nullable<decimal> OperationTax
		{
			get
			{
				return this._OperationTax;
			}
			set
			{
				if ((this._OperationTax != value))
				{
					this.OnOperationTaxChanging(value);
					this.SendPropertyChanging();
					this._OperationTax = value;
					this.SendPropertyChanged("OperationTax");
					this.OnOperationTaxChanged();
				}
			}
		}
		
		[Column(Storage="_Penalty", DbType="Decimal(18,2)")]
		[DataMember(Order=12)]
		public System.Nullable<decimal> Penalty
		{
			get
			{
				return this._Penalty;
			}
			set
			{
				if ((this._Penalty != value))
				{
					this.OnPenaltyChanging(value);
					this.SendPropertyChanging();
					this._Penalty = value;
					this.SendPropertyChanged("Penalty");
					this.OnPenaltyChanged();
				}
			}
		}
		
		[Column(Storage="_Interest", DbType="Decimal(18,2)")]
		[DataMember(Order=13)]
		public System.Nullable<decimal> Interest
		{
			get
			{
				return this._Interest;
			}
			set
			{
				if ((this._Interest != value))
				{
					this.OnInterestChanging(value);
					this.SendPropertyChanging();
					this._Interest = value;
					this.SendPropertyChanged("Interest");
					this.OnInterestChanged();
				}
			}
		}
		
		[Column(Storage="_AccountId", DbType="Int")]
		[DataMember(Order=14)]
		public System.Nullable<int> AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[Association(Name="FinancierOperation_Contract", Storage="_Contracts", ThisKey="FinancierOperationId,CompanyId", OtherKey="FinancierOperationId,CompanyId")]
		[DataMember(Order=15, EmitDefaultValue=false)]
		public EntitySet<Contract> Contracts
		{
			get
			{
				if ((this.serializing 
							&& (this._Contracts.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Contracts;
			}
			set
			{
				this._Contracts.Assign(value);
			}
		}
		
		[Association(Name="FinancierOperation_FinancierCondition", Storage="_FinancierConditions", ThisKey="FinancierOperationId,CompanyId", OtherKey="FinancierOperationId,CompanyId")]
		[DataMember(Order=16, EmitDefaultValue=false)]
		public EntitySet<FinancierCondition> FinancierConditions
		{
			get
			{
				if ((this.serializing 
							&& (this._FinancierConditions.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._FinancierConditions;
			}
			set
			{
				this._FinancierConditions.Assign(value);
			}
		}
		
		[Association(Name="FinancierOperation_Parcel", Storage="_Parcels", ThisKey="FinancierOperationId,CompanyId", OtherKey="FinancierOperationId,CompanyId")]
		[DataMember(Order=17, EmitDefaultValue=false)]
		public EntitySet<Parcel> Parcels
		{
			get
			{
				if ((this.serializing 
							&& (this._Parcels.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Parcels;
			}
			set
			{
				this._Parcels.Assign(value);
			}
		}
		
		[Association(Name="Company_FinancierOperation", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.FinancierOperations.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.FinancierOperations.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[Association(Name="Account_FinancierOperation", Storage="_Account", ThisKey="AccountId,CompanyId", OtherKey="AccountId,CompanyId", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.FinancierOperations.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.FinancierOperations.Add(this);
						this._AccountId = value.AccountId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._AccountId = default(Nullable<int>);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[Association(Name="PaymentMethod_FinancierOperation", Storage="_PaymentMethod", ThisKey="PaymentMethodId", OtherKey="PaymentMethodId", IsForeignKey=true)]
		public PaymentMethod PaymentMethod
		{
			get
			{
				return this._PaymentMethod.Entity;
			}
			set
			{
				PaymentMethod previousValue = this._PaymentMethod.Entity;
				if (((previousValue != value) 
							|| (this._PaymentMethod.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PaymentMethod.Entity = null;
						previousValue.FinancierOperations.Remove(this);
					}
					this._PaymentMethod.Entity = value;
					if ((value != null))
					{
						value.FinancierOperations.Add(this);
						this._PaymentMethodId = value.PaymentMethodId;
					}
					else
					{
						this._PaymentMethodId = default(int);
					}
					this.SendPropertyChanged("PaymentMethod");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Contracts(Contract entity)
		{
			this.SendPropertyChanging();
			entity.FinancierOperation = this;
		}
		
		private void detach_Contracts(Contract entity)
		{
			this.SendPropertyChanging();
			entity.FinancierOperation = null;
		}
		
		private void attach_FinancierConditions(FinancierCondition entity)
		{
			this.SendPropertyChanging();
			entity.FinancierOperation = this;
		}
		
		private void detach_FinancierConditions(FinancierCondition entity)
		{
			this.SendPropertyChanging();
			entity.FinancierOperation = null;
		}
		
		private void attach_Parcels(Parcel entity)
		{
			this.SendPropertyChanging();
			entity.FinancierOperation = this;
		}
		
		private void detach_Parcels(Parcel entity)
		{
			this.SendPropertyChanging();
			entity.FinancierOperation = null;
		}
		
		private void Initialize()
		{
			this._Contracts = new EntitySet<Contract>(new Action<Contract>(this.attach_Contracts), new Action<Contract>(this.detach_Contracts));
			this._FinancierConditions = new EntitySet<FinancierCondition>(new Action<FinancierCondition>(this.attach_FinancierConditions), new Action<FinancierCondition>(this.detach_FinancierConditions));
			this._Parcels = new EntitySet<Parcel>(new Action<Parcel>(this.attach_Parcels), new Action<Parcel>(this.detach_Parcels));
			this._Company = default(EntityRef<Company>);
			this._Account = default(EntityRef<Account>);
			this._PaymentMethod = default(EntityRef<PaymentMethod>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.Functions")]
	[DataContract()]
	public partial class Function : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FunctionId;
		
		private string _Name;
		
		private string _CodeName;
		
		private string _Description;
		
		private System.Nullable<int> _ParentId;
		
		private string _Url;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<BranchFunction> _BranchFunctions;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<CustomFunction> _CustomFunctions;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<PackageFunction> _PackageFunctions;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Permission> _Permissions;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFunctionIdChanging(int value);
    partial void OnFunctionIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCodeNameChanging(string value);
    partial void OnCodeNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnParentIdChanging(System.Nullable<int> value);
    partial void OnParentIdChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    #endregion
		
		public Function()
		{
			this.Initialize();
		}
		
		[Column(Storage="_FunctionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int FunctionId
		{
			get
			{
				return this._FunctionId;
			}
			set
			{
				if ((this._FunctionId != value))
				{
					this.OnFunctionIdChanging(value);
					this.SendPropertyChanging();
					this._FunctionId = value;
					this.SendPropertyChanged("FunctionId");
					this.OnFunctionIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(128) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_CodeName", DbType="VarChar(128)")]
		[DataMember(Order=3)]
		public string CodeName
		{
			get
			{
				return this._CodeName;
			}
			set
			{
				if ((this._CodeName != value))
				{
					this.OnCodeNameChanging(value);
					this.SendPropertyChanging();
					this._CodeName = value;
					this.SendPropertyChanged("CodeName");
					this.OnCodeNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(1024)")]
		[DataMember(Order=4)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_ParentId", DbType="Int")]
		[DataMember(Order=5)]
		public System.Nullable<int> ParentId
		{
			get
			{
				return this._ParentId;
			}
			set
			{
				if ((this._ParentId != value))
				{
					this.OnParentIdChanging(value);
					this.SendPropertyChanging();
					this._ParentId = value;
					this.SendPropertyChanged("ParentId");
					this.OnParentIdChanged();
				}
			}
		}
		
		[Column(Storage="_Url", DbType="VarChar(1024)")]
		[DataMember(Order=6)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[Association(Name="Function_BranchFunction", Storage="_BranchFunctions", ThisKey="FunctionId", OtherKey="FunctionId")]
		[DataMember(Order=7, EmitDefaultValue=false)]
		public EntitySet<BranchFunction> BranchFunctions
		{
			get
			{
				if ((this.serializing 
							&& (this._BranchFunctions.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._BranchFunctions;
			}
			set
			{
				this._BranchFunctions.Assign(value);
			}
		}
		
		[Association(Name="Function_CustomFunction", Storage="_CustomFunctions", ThisKey="FunctionId", OtherKey="FunctionId")]
		[DataMember(Order=8, EmitDefaultValue=false)]
		public EntitySet<CustomFunction> CustomFunctions
		{
			get
			{
				if ((this.serializing 
							&& (this._CustomFunctions.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._CustomFunctions;
			}
			set
			{
				this._CustomFunctions.Assign(value);
			}
		}
		
		[Association(Name="Function_PackageFunction", Storage="_PackageFunctions", ThisKey="FunctionId", OtherKey="FunctionId")]
		[DataMember(Order=9, EmitDefaultValue=false)]
		public EntitySet<PackageFunction> PackageFunctions
		{
			get
			{
				if ((this.serializing 
							&& (this._PackageFunctions.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._PackageFunctions;
			}
			set
			{
				this._PackageFunctions.Assign(value);
			}
		}
		
		[Association(Name="Function_Permission", Storage="_Permissions", ThisKey="FunctionId", OtherKey="FunctionId")]
		[DataMember(Order=10, EmitDefaultValue=false)]
		public EntitySet<Permission> Permissions
		{
			get
			{
				if ((this.serializing 
							&& (this._Permissions.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Permissions;
			}
			set
			{
				this._Permissions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BranchFunctions(BranchFunction entity)
		{
			this.SendPropertyChanging();
			entity.Function = this;
		}
		
		private void detach_BranchFunctions(BranchFunction entity)
		{
			this.SendPropertyChanging();
			entity.Function = null;
		}
		
		private void attach_CustomFunctions(CustomFunction entity)
		{
			this.SendPropertyChanging();
			entity.Function = this;
		}
		
		private void detach_CustomFunctions(CustomFunction entity)
		{
			this.SendPropertyChanging();
			entity.Function = null;
		}
		
		private void attach_PackageFunctions(PackageFunction entity)
		{
			this.SendPropertyChanging();
			entity.Function = this;
		}
		
		private void detach_PackageFunctions(PackageFunction entity)
		{
			this.SendPropertyChanging();
			entity.Function = null;
		}
		
		private void attach_Permissions(Permission entity)
		{
			this.SendPropertyChanging();
			entity.Function = this;
		}
		
		private void detach_Permissions(Permission entity)
		{
			this.SendPropertyChanging();
			entity.Function = null;
		}
		
		private void Initialize()
		{
			this._BranchFunctions = new EntitySet<BranchFunction>(new Action<BranchFunction>(this.attach_BranchFunctions), new Action<BranchFunction>(this.detach_BranchFunctions));
			this._CustomFunctions = new EntitySet<CustomFunction>(new Action<CustomFunction>(this.attach_CustomFunctions), new Action<CustomFunction>(this.detach_CustomFunctions));
			this._PackageFunctions = new EntitySet<PackageFunction>(new Action<PackageFunction>(this.attach_PackageFunctions), new Action<PackageFunction>(this.detach_PackageFunctions));
			this._Permissions = new EntitySet<Permission>(new Action<Permission>(this.attach_Permissions), new Action<Permission>(this.detach_Permissions));
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.InssInterval")]
	[DataContract()]
	public partial class InssInterval : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _InssIntervalId;
		
		private decimal _Limit;
		
		private decimal _Tax;
		
		private int _Year;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInssIntervalIdChanging(int value);
    partial void OnInssIntervalIdChanged();
    partial void OnLimitChanging(decimal value);
    partial void OnLimitChanged();
    partial void OnTaxChanging(decimal value);
    partial void OnTaxChanged();
    partial void OnYearChanging(int value);
    partial void OnYearChanged();
    #endregion
		
		public InssInterval()
		{
			this.Initialize();
		}
		
		[Column(Storage="_InssIntervalId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int InssIntervalId
		{
			get
			{
				return this._InssIntervalId;
			}
			set
			{
				if ((this._InssIntervalId != value))
				{
					this.OnInssIntervalIdChanging(value);
					this.SendPropertyChanging();
					this._InssIntervalId = value;
					this.SendPropertyChanged("InssIntervalId");
					this.OnInssIntervalIdChanged();
				}
			}
		}
		
		[Column(Storage="_Limit", DbType="Decimal(18,2) NOT NULL")]
		[DataMember(Order=2)]
		public decimal Limit
		{
			get
			{
				return this._Limit;
			}
			set
			{
				if ((this._Limit != value))
				{
					this.OnLimitChanging(value);
					this.SendPropertyChanging();
					this._Limit = value;
					this.SendPropertyChanged("Limit");
					this.OnLimitChanged();
				}
			}
		}
		
		[Column(Storage="_Tax", DbType="Decimal(18,2) NOT NULL")]
		[DataMember(Order=3)]
		public decimal Tax
		{
			get
			{
				return this._Tax;
			}
			set
			{
				if ((this._Tax != value))
				{
					this.OnTaxChanging(value);
					this.SendPropertyChanging();
					this._Tax = value;
					this.SendPropertyChanged("Tax");
					this.OnTaxChanged();
				}
			}
		}
		
		[Column(Storage="_Year", DbType="Int NOT NULL")]
		[DataMember(Order=4)]
		public int Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.Inventory")]
	[DataContract()]
	public partial class Inventory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductId;
		
		private System.Nullable<int> _CurrencyRateId;
		
		private decimal _UnitPrice;
		
		private string _Localization;
		
		private int _Quantity;
		
		private System.DateTime _ModifiedDate;
		
		private int _MinimumRequired;
		
		private decimal _RealCost;
		
		private decimal _Profit;
		
		private System.Nullable<int> _SupplierId;
		
		private int _QuantityInReserve;
		
		private decimal _AverageCosts;
		
		private System.Nullable<System.DateTime> _EntryDate;
		
		private string _FiscalNumber;
		
		private int _DepositId;
		
		private int _CompanyId;
		
		private System.Nullable<decimal> _UnitPrice2;
		
		private System.Nullable<decimal> _UnitPrice3;
		
		private System.Nullable<decimal> _UnitPrice4;
		
		private System.Nullable<decimal> _UnitPrice5;
		
		private int _InventoryId;
		
		private System.Nullable<int> _ProductPackageId;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<InventoryMoviment> _InventoryMoviments;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<InventorySerial> _InventorySerials;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Deposit> _Deposit;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<CurrencyRate> _CurrencyRate;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Company> _Company;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Product> _Product;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<ProductPackage> _ProductPackage;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Supplier> _Supplier;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnCurrencyRateIdChanging(System.Nullable<int> value);
    partial void OnCurrencyRateIdChanged();
    partial void OnUnitPriceChanging(decimal value);
    partial void OnUnitPriceChanged();
    partial void OnLocalizationChanging(string value);
    partial void OnLocalizationChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnMinimumRequiredChanging(int value);
    partial void OnMinimumRequiredChanged();
    partial void OnRealCostChanging(decimal value);
    partial void OnRealCostChanged();
    partial void OnProfitChanging(decimal value);
    partial void OnProfitChanged();
    partial void OnSupplierIdChanging(System.Nullable<int> value);
    partial void OnSupplierIdChanged();
    partial void OnQuantityInReserveChanging(int value);
    partial void OnQuantityInReserveChanged();
    partial void OnAverageCostsChanging(decimal value);
    partial void OnAverageCostsChanged();
    partial void OnEntryDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEntryDateChanged();
    partial void OnFiscalNumberChanging(string value);
    partial void OnFiscalNumberChanged();
    partial void OnDepositIdChanging(int value);
    partial void OnDepositIdChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnUnitPrice2Changing(System.Nullable<decimal> value);
    partial void OnUnitPrice2Changed();
    partial void OnUnitPrice3Changing(System.Nullable<decimal> value);
    partial void OnUnitPrice3Changed();
    partial void OnUnitPrice4Changing(System.Nullable<decimal> value);
    partial void OnUnitPrice4Changed();
    partial void OnUnitPrice5Changing(System.Nullable<decimal> value);
    partial void OnUnitPrice5Changed();
    partial void OnInventoryIdChanging(int value);
    partial void OnInventoryIdChanged();
    partial void OnProductPackageIdChanging(System.Nullable<int> value);
    partial void OnProductPackageIdChanged();
    #endregion
		
		public Inventory()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ProductId", DbType="Int NOT NULL")]
		[DataMember(Order=1)]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[Column(Storage="_CurrencyRateId", DbType="Int")]
		[DataMember(Order=2)]
		public System.Nullable<int> CurrencyRateId
		{
			get
			{
				return this._CurrencyRateId;
			}
			set
			{
				if ((this._CurrencyRateId != value))
				{
					if (this._CurrencyRate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCurrencyRateIdChanging(value);
					this.SendPropertyChanging();
					this._CurrencyRateId = value;
					this.SendPropertyChanged("CurrencyRateId");
					this.OnCurrencyRateIdChanged();
				}
			}
		}
		
		[Column(Storage="_UnitPrice", DbType="Decimal(18,2) NOT NULL")]
		[DataMember(Order=3)]
		public decimal UnitPrice
		{
			get
			{
				return this._UnitPrice;
			}
			set
			{
				if ((this._UnitPrice != value))
				{
					this.OnUnitPriceChanging(value);
					this.SendPropertyChanging();
					this._UnitPrice = value;
					this.SendPropertyChanged("UnitPrice");
					this.OnUnitPriceChanged();
				}
			}
		}
		
		[Column(Storage="_Localization", DbType="VarChar(200)")]
		[DataMember(Order=4)]
		public string Localization
		{
			get
			{
				return this._Localization;
			}
			set
			{
				if ((this._Localization != value))
				{
					this.OnLocalizationChanging(value);
					this.SendPropertyChanging();
					this._Localization = value;
					this.SendPropertyChanged("Localization");
					this.OnLocalizationChanged();
				}
			}
		}
		
		[Column(Storage="_Quantity", DbType="Int NOT NULL")]
		[DataMember(Order=5)]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		[DataMember(Order=6)]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_MinimumRequired", DbType="Int NOT NULL")]
		[DataMember(Order=7)]
		public int MinimumRequired
		{
			get
			{
				return this._MinimumRequired;
			}
			set
			{
				if ((this._MinimumRequired != value))
				{
					this.OnMinimumRequiredChanging(value);
					this.SendPropertyChanging();
					this._MinimumRequired = value;
					this.SendPropertyChanged("MinimumRequired");
					this.OnMinimumRequiredChanged();
				}
			}
		}
		
		[Column(Storage="_RealCost", DbType="Decimal(9,2) NOT NULL")]
		[DataMember(Order=8)]
		public decimal RealCost
		{
			get
			{
				return this._RealCost;
			}
			set
			{
				if ((this._RealCost != value))
				{
					this.OnRealCostChanging(value);
					this.SendPropertyChanging();
					this._RealCost = value;
					this.SendPropertyChanged("RealCost");
					this.OnRealCostChanged();
				}
			}
		}
		
		[Column(Storage="_Profit", DbType="Decimal(9,2) NOT NULL")]
		[DataMember(Order=9)]
		public decimal Profit
		{
			get
			{
				return this._Profit;
			}
			set
			{
				if ((this._Profit != value))
				{
					this.OnProfitChanging(value);
					this.SendPropertyChanging();
					this._Profit = value;
					this.SendPropertyChanged("Profit");
					this.OnProfitChanged();
				}
			}
		}
		
		[Column(Storage="_SupplierId", DbType="Int")]
		[DataMember(Order=10)]
		public System.Nullable<int> SupplierId
		{
			get
			{
				return this._SupplierId;
			}
			set
			{
				if ((this._SupplierId != value))
				{
					if (this._Supplier.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSupplierIdChanging(value);
					this.SendPropertyChanging();
					this._SupplierId = value;
					this.SendPropertyChanged("SupplierId");
					this.OnSupplierIdChanged();
				}
			}
		}
		
		[Column(Storage="_QuantityInReserve", DbType="Int NOT NULL")]
		[DataMember(Order=11)]
		public int QuantityInReserve
		{
			get
			{
				return this._QuantityInReserve;
			}
			set
			{
				if ((this._QuantityInReserve != value))
				{
					this.OnQuantityInReserveChanging(value);
					this.SendPropertyChanging();
					this._QuantityInReserve = value;
					this.SendPropertyChanged("QuantityInReserve");
					this.OnQuantityInReserveChanged();
				}
			}
		}
		
		[Column(Storage="_AverageCosts", DbType="Decimal(18,2) NOT NULL")]
		[DataMember(Order=12)]
		public decimal AverageCosts
		{
			get
			{
				return this._AverageCosts;
			}
			set
			{
				if ((this._AverageCosts != value))
				{
					this.OnAverageCostsChanging(value);
					this.SendPropertyChanging();
					this._AverageCosts = value;
					this.SendPropertyChanged("AverageCosts");
					this.OnAverageCostsChanged();
				}
			}
		}
		
		[Column(Storage="_EntryDate", DbType="DateTime")]
		[DataMember(Order=13)]
		public System.Nullable<System.DateTime> EntryDate
		{
			get
			{
				return this._EntryDate;
			}
			set
			{
				if ((this._EntryDate != value))
				{
					this.OnEntryDateChanging(value);
					this.SendPropertyChanging();
					this._EntryDate = value;
					this.SendPropertyChanged("EntryDate");
					this.OnEntryDateChanged();
				}
			}
		}
		
		[Column(Storage="_FiscalNumber", DbType="VarChar(50)")]
		[DataMember(Order=14)]
		public string FiscalNumber
		{
			get
			{
				return this._FiscalNumber;
			}
			set
			{
				if ((this._FiscalNumber != value))
				{
					this.OnFiscalNumberChanging(value);
					this.SendPropertyChanging();
					this._FiscalNumber = value;
					this.SendPropertyChanged("FiscalNumber");
					this.OnFiscalNumberChanged();
				}
			}
		}
		
		[Column(Storage="_DepositId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=15)]
		public int DepositId
		{
			get
			{
				return this._DepositId;
			}
			set
			{
				if ((this._DepositId != value))
				{
					if (this._Deposit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepositIdChanging(value);
					this.SendPropertyChanging();
					this._DepositId = value;
					this.SendPropertyChanged("DepositId");
					this.OnDepositIdChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=16)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Deposit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Column(Storage="_UnitPrice2", DbType="Decimal(18,2)")]
		[DataMember(Order=17)]
		public System.Nullable<decimal> UnitPrice2
		{
			get
			{
				return this._UnitPrice2;
			}
			set
			{
				if ((this._UnitPrice2 != value))
				{
					this.OnUnitPrice2Changing(value);
					this.SendPropertyChanging();
					this._UnitPrice2 = value;
					this.SendPropertyChanged("UnitPrice2");
					this.OnUnitPrice2Changed();
				}
			}
		}
		
		[Column(Storage="_UnitPrice3", DbType="Decimal(18,2)")]
		[DataMember(Order=18)]
		public System.Nullable<decimal> UnitPrice3
		{
			get
			{
				return this._UnitPrice3;
			}
			set
			{
				if ((this._UnitPrice3 != value))
				{
					this.OnUnitPrice3Changing(value);
					this.SendPropertyChanging();
					this._UnitPrice3 = value;
					this.SendPropertyChanged("UnitPrice3");
					this.OnUnitPrice3Changed();
				}
			}
		}
		
		[Column(Storage="_UnitPrice4", DbType="Decimal(18,2)")]
		[DataMember(Order=19)]
		public System.Nullable<decimal> UnitPrice4
		{
			get
			{
				return this._UnitPrice4;
			}
			set
			{
				if ((this._UnitPrice4 != value))
				{
					this.OnUnitPrice4Changing(value);
					this.SendPropertyChanging();
					this._UnitPrice4 = value;
					this.SendPropertyChanged("UnitPrice4");
					this.OnUnitPrice4Changed();
				}
			}
		}
		
		[Column(Storage="_UnitPrice5", DbType="Decimal(18,2)")]
		[DataMember(Order=20)]
		public System.Nullable<decimal> UnitPrice5
		{
			get
			{
				return this._UnitPrice5;
			}
			set
			{
				if ((this._UnitPrice5 != value))
				{
					this.OnUnitPrice5Changing(value);
					this.SendPropertyChanging();
					this._UnitPrice5 = value;
					this.SendPropertyChanged("UnitPrice5");
					this.OnUnitPrice5Changed();
				}
			}
		}
		
		[Column(Storage="_InventoryId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=21)]
		public int InventoryId
		{
			get
			{
				return this._InventoryId;
			}
			set
			{
				if ((this._InventoryId != value))
				{
					this.OnInventoryIdChanging(value);
					this.SendPropertyChanging();
					this._InventoryId = value;
					this.SendPropertyChanged("InventoryId");
					this.OnInventoryIdChanged();
				}
			}
		}
		
		[Column(Storage="_ProductPackageId", DbType="Int")]
		[DataMember(Order=22)]
		public System.Nullable<int> ProductPackageId
		{
			get
			{
				return this._ProductPackageId;
			}
			set
			{
				if ((this._ProductPackageId != value))
				{
					if (this._ProductPackage.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductPackageIdChanging(value);
					this.SendPropertyChanging();
					this._ProductPackageId = value;
					this.SendPropertyChanged("ProductPackageId");
					this.OnProductPackageIdChanged();
				}
			}
		}
		
		[Association(Name="Inventory_InventoryMoviment", Storage="_InventoryMoviments", ThisKey="DepositId,InventoryId,CompanyId", OtherKey="DepositId,InventoryId,CompanyDestinationId")]
		[DataMember(Order=23, EmitDefaultValue=false)]
		public EntitySet<InventoryMoviment> InventoryMoviments
		{
			get
			{
				if ((this.serializing 
							&& (this._InventoryMoviments.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._InventoryMoviments;
			}
			set
			{
				this._InventoryMoviments.Assign(value);
			}
		}
		
		[Association(Name="Inventory_InventorySerial", Storage="_InventorySerials", ThisKey="DepositId,InventoryId,CompanyId", OtherKey="DepositId,InventoryId,CompanyId")]
		[DataMember(Order=24, EmitDefaultValue=false)]
		public EntitySet<InventorySerial> InventorySerials
		{
			get
			{
				if ((this.serializing 
							&& (this._InventorySerials.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._InventorySerials;
			}
			set
			{
				this._InventorySerials.Assign(value);
			}
		}
		
		[Association(Name="Deposit_Inventory", Storage="_Deposit", ThisKey="DepositId,CompanyId", OtherKey="DepositId,CompanyId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Deposit Deposit
		{
			get
			{
				return this._Deposit.Entity;
			}
			set
			{
				Deposit previousValue = this._Deposit.Entity;
				if (((previousValue != value) 
							|| (this._Deposit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Deposit.Entity = null;
						previousValue.Inventories.Remove(this);
					}
					this._Deposit.Entity = value;
					if ((value != null))
					{
						value.Inventories.Add(this);
						this._DepositId = value.DepositId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._DepositId = default(int);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Deposit");
				}
			}
		}
		
		[Association(Name="CurrencyRate_Inventory", Storage="_CurrencyRate", ThisKey="CurrencyRateId", OtherKey="CurrencyRateId", IsForeignKey=true)]
		public CurrencyRate CurrencyRate
		{
			get
			{
				return this._CurrencyRate.Entity;
			}
			set
			{
				CurrencyRate previousValue = this._CurrencyRate.Entity;
				if (((previousValue != value) 
							|| (this._CurrencyRate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CurrencyRate.Entity = null;
						previousValue.Inventories.Remove(this);
					}
					this._CurrencyRate.Entity = value;
					if ((value != null))
					{
						value.Inventories.Add(this);
						this._CurrencyRateId = value.CurrencyRateId;
					}
					else
					{
						this._CurrencyRateId = default(Nullable<int>);
					}
					this.SendPropertyChanged("CurrencyRate");
				}
			}
		}
		
		[Association(Name="Company_Inventory", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Inventories.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Inventories.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[Association(Name="Product_Inventory", Storage="_Product", ThisKey="ProductId", OtherKey="ProductId", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.Inventories.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.Inventories.Add(this);
						this._ProductId = value.ProductId;
					}
					else
					{
						this._ProductId = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		[Association(Name="ProductPackage_Inventory", Storage="_ProductPackage", ThisKey="ProductPackageId", OtherKey="ProductPackageId", IsForeignKey=true)]
		public ProductPackage ProductPackage
		{
			get
			{
				return this._ProductPackage.Entity;
			}
			set
			{
				ProductPackage previousValue = this._ProductPackage.Entity;
				if (((previousValue != value) 
							|| (this._ProductPackage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductPackage.Entity = null;
						previousValue.Inventories.Remove(this);
					}
					this._ProductPackage.Entity = value;
					if ((value != null))
					{
						value.Inventories.Add(this);
						this._ProductPackageId = value.ProductPackageId;
					}
					else
					{
						this._ProductPackageId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProductPackage");
				}
			}
		}
		
		[Association(Name="Supplier_Inventory", Storage="_Supplier", ThisKey="SupplierId", OtherKey="SupplierId", IsForeignKey=true)]
		public Supplier Supplier
		{
			get
			{
				return this._Supplier.Entity;
			}
			set
			{
				Supplier previousValue = this._Supplier.Entity;
				if (((previousValue != value) 
							|| (this._Supplier.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Supplier.Entity = null;
						previousValue.Inventories.Remove(this);
					}
					this._Supplier.Entity = value;
					if ((value != null))
					{
						value.Inventories.Add(this);
						this._SupplierId = value.SupplierId;
					}
					else
					{
						this._SupplierId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Supplier");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InventoryMoviments(InventoryMoviment entity)
		{
			this.SendPropertyChanging();
			entity.Inventory = this;
		}
		
		private void detach_InventoryMoviments(InventoryMoviment entity)
		{
			this.SendPropertyChanging();
			entity.Inventory = null;
		}
		
		private void attach_InventorySerials(InventorySerial entity)
		{
			this.SendPropertyChanging();
			entity.Inventory = this;
		}
		
		private void detach_InventorySerials(InventorySerial entity)
		{
			this.SendPropertyChanging();
			entity.Inventory = null;
		}
		
		private void Initialize()
		{
			this._InventoryMoviments = new EntitySet<InventoryMoviment>(new Action<InventoryMoviment>(this.attach_InventoryMoviments), new Action<InventoryMoviment>(this.detach_InventoryMoviments));
			this._InventorySerials = new EntitySet<InventorySerial>(new Action<InventorySerial>(this.attach_InventorySerials), new Action<InventorySerial>(this.detach_InventorySerials));
			this._Deposit = default(EntityRef<Deposit>);
			this._CurrencyRate = default(EntityRef<CurrencyRate>);
			this._Company = default(EntityRef<Company>);
			this._Product = default(EntityRef<Product>);
			this._ProductPackage = default(EntityRef<ProductPackage>);
			this._Supplier = default(EntityRef<Supplier>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.InventoryDropType")]
	[DataContract()]
	public partial class InventoryDropType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _InventoryDropTypeId;
		
		private string _Name;
		
		private System.DateTime _ModifiedDate;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<InventoryHistory> _InventoryHistories;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInventoryDropTypeIdChanging(int value);
    partial void OnInventoryDropTypeIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public InventoryDropType()
		{
			this.Initialize();
		}
		
		[Column(Storage="_InventoryDropTypeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int InventoryDropTypeId
		{
			get
			{
				return this._InventoryDropTypeId;
			}
			set
			{
				if ((this._InventoryDropTypeId != value))
				{
					this.OnInventoryDropTypeIdChanging(value);
					this.SendPropertyChanging();
					this._InventoryDropTypeId = value;
					this.SendPropertyChanged("InventoryDropTypeId");
					this.OnInventoryDropTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		[DataMember(Order=3)]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Association(Name="InventoryDropType_InventoryHistory", Storage="_InventoryHistories", ThisKey="InventoryDropTypeId", OtherKey="InventoryDropTypeId")]
		[DataMember(Order=4, EmitDefaultValue=false)]
		public EntitySet<InventoryHistory> InventoryHistories
		{
			get
			{
				if ((this.serializing 
							&& (this._InventoryHistories.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._InventoryHistories;
			}
			set
			{
				this._InventoryHistories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InventoryHistories(InventoryHistory entity)
		{
			this.SendPropertyChanging();
			entity.InventoryDropType = this;
		}
		
		private void detach_InventoryHistories(InventoryHistory entity)
		{
			this.SendPropertyChanging();
			entity.InventoryDropType = null;
		}
		
		private void Initialize()
		{
			this._InventoryHistories = new EntitySet<InventoryHistory>(new Action<InventoryHistory>(this.attach_InventoryHistories), new Action<InventoryHistory>(this.detach_InventoryHistories));
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.InventoryEntryType")]
	[DataContract()]
	public partial class InventoryEntryType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _InventoryEntryTypeId;
		
		private string _Name;
		
		private System.DateTime _ModifiedDate;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<InventoryHistory> _InventoryHistories;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInventoryEntryTypeIdChanging(int value);
    partial void OnInventoryEntryTypeIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public InventoryEntryType()
		{
			this.Initialize();
		}
		
		[Column(Storage="_InventoryEntryTypeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int InventoryEntryTypeId
		{
			get
			{
				return this._InventoryEntryTypeId;
			}
			set
			{
				if ((this._InventoryEntryTypeId != value))
				{
					this.OnInventoryEntryTypeIdChanging(value);
					this.SendPropertyChanging();
					this._InventoryEntryTypeId = value;
					this.SendPropertyChanged("InventoryEntryTypeId");
					this.OnInventoryEntryTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		[DataMember(Order=3)]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Association(Name="InventoryEntryType_InventoryHistory", Storage="_InventoryHistories", ThisKey="InventoryEntryTypeId", OtherKey="InventoryEntryTypeId")]
		[DataMember(Order=4, EmitDefaultValue=false)]
		public EntitySet<InventoryHistory> InventoryHistories
		{
			get
			{
				if ((this.serializing 
							&& (this._InventoryHistories.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._InventoryHistories;
			}
			set
			{
				this._InventoryHistories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InventoryHistories(InventoryHistory entity)
		{
			this.SendPropertyChanging();
			entity.InventoryEntryType = this;
		}
		
		private void detach_InventoryHistories(InventoryHistory entity)
		{
			this.SendPropertyChanging();
			entity.InventoryEntryType = null;
		}
		
		private void Initialize()
		{
			this._InventoryHistories = new EntitySet<InventoryHistory>(new Action<InventoryHistory>(this.attach_InventoryHistories), new Action<InventoryHistory>(this.detach_InventoryHistories));
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.InventoryHistory")]
	[DataContract()]
	public partial class InventoryHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DummyId;
		
		private int _ProductId;
		
		private System.Nullable<int> _CurrencyRateId;
		
		private decimal _UnitPrice;
		
		private string _Localization;
		
		private int _Quantity;
		
		private System.DateTime _LogDate;
		
		private int _MinimumRequired;
		
		private decimal _RealCost;
		
		private decimal _Profit;
		
		private System.Nullable<int> _SupplierId;
		
		private System.Nullable<int> _DestinationDepositId;
		
		private int _DepositId;
		
		private string _FiscalNumber;
		
		private System.Nullable<int> _InventoryDropTypeId;
		
		private System.Nullable<int> _InventoryEntryTypeId;
		
		private int _CompanyId;
		
		private System.Nullable<int> _QuantityInReserve;
		
		private System.Nullable<decimal> _AverageCosts;
		
		private System.Nullable<int> _UserId;
		
		private System.Nullable<int> _SaleId;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<InventoryDropType> _InventoryDropType;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<InventoryEntryType> _InventoryEntryType;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Deposit> _Deposit;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Company> _Company;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Product> _Product;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Sale> _Sale;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDummyIdChanging(int value);
    partial void OnDummyIdChanged();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnCurrencyRateIdChanging(System.Nullable<int> value);
    partial void OnCurrencyRateIdChanged();
    partial void OnUnitPriceChanging(decimal value);
    partial void OnUnitPriceChanged();
    partial void OnLocalizationChanging(string value);
    partial void OnLocalizationChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnLogDateChanging(System.DateTime value);
    partial void OnLogDateChanged();
    partial void OnMinimumRequiredChanging(int value);
    partial void OnMinimumRequiredChanged();
    partial void OnRealCostChanging(decimal value);
    partial void OnRealCostChanged();
    partial void OnProfitChanging(decimal value);
    partial void OnProfitChanged();
    partial void OnSupplierIdChanging(System.Nullable<int> value);
    partial void OnSupplierIdChanged();
    partial void OnDestinationDepositIdChanging(System.Nullable<int> value);
    partial void OnDestinationDepositIdChanged();
    partial void OnDepositIdChanging(int value);
    partial void OnDepositIdChanged();
    partial void OnFiscalNumberChanging(string value);
    partial void OnFiscalNumberChanged();
    partial void OnInventoryDropTypeIdChanging(System.Nullable<int> value);
    partial void OnInventoryDropTypeIdChanged();
    partial void OnInventoryEntryTypeIdChanging(System.Nullable<int> value);
    partial void OnInventoryEntryTypeIdChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnQuantityInReserveChanging(System.Nullable<int> value);
    partial void OnQuantityInReserveChanged();
    partial void OnAverageCostsChanging(System.Nullable<decimal> value);
    partial void OnAverageCostsChanged();
    partial void OnUserIdChanging(System.Nullable<int> value);
    partial void OnUserIdChanged();
    partial void OnSaleIdChanging(System.Nullable<int> value);
    partial void OnSaleIdChanged();
    #endregion
		
		public InventoryHistory()
		{
			this.Initialize();
		}
		
		[Column(Storage="_DummyId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int DummyId
		{
			get
			{
				return this._DummyId;
			}
			set
			{
				if ((this._DummyId != value))
				{
					this.OnDummyIdChanging(value);
					this.SendPropertyChanging();
					this._DummyId = value;
					this.SendPropertyChanged("DummyId");
					this.OnDummyIdChanged();
				}
			}
		}
		
		[Column(Storage="_ProductId", DbType="Int NOT NULL")]
		[DataMember(Order=2)]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[Column(Storage="_CurrencyRateId", DbType="Int")]
		[DataMember(Order=3)]
		public System.Nullable<int> CurrencyRateId
		{
			get
			{
				return this._CurrencyRateId;
			}
			set
			{
				if ((this._CurrencyRateId != value))
				{
					this.OnCurrencyRateIdChanging(value);
					this.SendPropertyChanging();
					this._CurrencyRateId = value;
					this.SendPropertyChanged("CurrencyRateId");
					this.OnCurrencyRateIdChanged();
				}
			}
		}
		
		[Column(Storage="_UnitPrice", DbType="Decimal(18,2) NOT NULL")]
		[DataMember(Order=4)]
		public decimal UnitPrice
		{
			get
			{
				return this._UnitPrice;
			}
			set
			{
				if ((this._UnitPrice != value))
				{
					this.OnUnitPriceChanging(value);
					this.SendPropertyChanging();
					this._UnitPrice = value;
					this.SendPropertyChanged("UnitPrice");
					this.OnUnitPriceChanged();
				}
			}
		}
		
		[Column(Storage="_Localization", DbType="VarChar(200)")]
		[DataMember(Order=5)]
		public string Localization
		{
			get
			{
				return this._Localization;
			}
			set
			{
				if ((this._Localization != value))
				{
					this.OnLocalizationChanging(value);
					this.SendPropertyChanging();
					this._Localization = value;
					this.SendPropertyChanged("Localization");
					this.OnLocalizationChanged();
				}
			}
		}
		
		[Column(Storage="_Quantity", DbType="Int NOT NULL")]
		[DataMember(Order=6)]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_LogDate", DbType="DateTime NOT NULL")]
		[DataMember(Order=7)]
		public System.DateTime LogDate
		{
			get
			{
				return this._LogDate;
			}
			set
			{
				if ((this._LogDate != value))
				{
					this.OnLogDateChanging(value);
					this.SendPropertyChanging();
					this._LogDate = value;
					this.SendPropertyChanged("LogDate");
					this.OnLogDateChanged();
				}
			}
		}
		
		[Column(Storage="_MinimumRequired", DbType="Int NOT NULL")]
		[DataMember(Order=8)]
		public int MinimumRequired
		{
			get
			{
				return this._MinimumRequired;
			}
			set
			{
				if ((this._MinimumRequired != value))
				{
					this.OnMinimumRequiredChanging(value);
					this.SendPropertyChanging();
					this._MinimumRequired = value;
					this.SendPropertyChanged("MinimumRequired");
					this.OnMinimumRequiredChanged();
				}
			}
		}
		
		[Column(Storage="_RealCost", DbType="Decimal(9,2) NOT NULL")]
		[DataMember(Order=9)]
		public decimal RealCost
		{
			get
			{
				return this._RealCost;
			}
			set
			{
				if ((this._RealCost != value))
				{
					this.OnRealCostChanging(value);
					this.SendPropertyChanging();
					this._RealCost = value;
					this.SendPropertyChanged("RealCost");
					this.OnRealCostChanged();
				}
			}
		}
		
		[Column(Storage="_Profit", DbType="Decimal(9,2) NOT NULL")]
		[DataMember(Order=10)]
		public decimal Profit
		{
			get
			{
				return this._Profit;
			}
			set
			{
				if ((this._Profit != value))
				{
					this.OnProfitChanging(value);
					this.SendPropertyChanging();
					this._Profit = value;
					this.SendPropertyChanged("Profit");
					this.OnProfitChanged();
				}
			}
		}
		
		[Column(Storage="_SupplierId", DbType="Int")]
		[DataMember(Order=11)]
		public System.Nullable<int> SupplierId
		{
			get
			{
				return this._SupplierId;
			}
			set
			{
				if ((this._SupplierId != value))
				{
					this.OnSupplierIdChanging(value);
					this.SendPropertyChanging();
					this._SupplierId = value;
					this.SendPropertyChanged("SupplierId");
					this.OnSupplierIdChanged();
				}
			}
		}
		
		[Column(Storage="_DestinationDepositId", DbType="Int")]
		[DataMember(Order=12)]
		public System.Nullable<int> DestinationDepositId
		{
			get
			{
				return this._DestinationDepositId;
			}
			set
			{
				if ((this._DestinationDepositId != value))
				{
					this.OnDestinationDepositIdChanging(value);
					this.SendPropertyChanging();
					this._DestinationDepositId = value;
					this.SendPropertyChanged("DestinationDepositId");
					this.OnDestinationDepositIdChanged();
				}
			}
		}
		
		[Column(Storage="_DepositId", DbType="Int NOT NULL")]
		[DataMember(Order=13)]
		public int DepositId
		{
			get
			{
				return this._DepositId;
			}
			set
			{
				if ((this._DepositId != value))
				{
					if (this._Deposit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepositIdChanging(value);
					this.SendPropertyChanging();
					this._DepositId = value;
					this.SendPropertyChanged("DepositId");
					this.OnDepositIdChanged();
				}
			}
		}
		
		[Column(Storage="_FiscalNumber", DbType="VarChar(50)")]
		[DataMember(Order=14)]
		public string FiscalNumber
		{
			get
			{
				return this._FiscalNumber;
			}
			set
			{
				if ((this._FiscalNumber != value))
				{
					this.OnFiscalNumberChanging(value);
					this.SendPropertyChanging();
					this._FiscalNumber = value;
					this.SendPropertyChanged("FiscalNumber");
					this.OnFiscalNumberChanged();
				}
			}
		}
		
		[Column(Storage="_InventoryDropTypeId", DbType="Int")]
		[DataMember(Order=15)]
		public System.Nullable<int> InventoryDropTypeId
		{
			get
			{
				return this._InventoryDropTypeId;
			}
			set
			{
				if ((this._InventoryDropTypeId != value))
				{
					if (this._InventoryDropType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInventoryDropTypeIdChanging(value);
					this.SendPropertyChanging();
					this._InventoryDropTypeId = value;
					this.SendPropertyChanged("InventoryDropTypeId");
					this.OnInventoryDropTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_InventoryEntryTypeId", DbType="Int")]
		[DataMember(Order=16)]
		public System.Nullable<int> InventoryEntryTypeId
		{
			get
			{
				return this._InventoryEntryTypeId;
			}
			set
			{
				if ((this._InventoryEntryTypeId != value))
				{
					if (this._InventoryEntryType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInventoryEntryTypeIdChanging(value);
					this.SendPropertyChanging();
					this._InventoryEntryTypeId = value;
					this.SendPropertyChanged("InventoryEntryTypeId");
					this.OnInventoryEntryTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL")]
		[DataMember(Order=17)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Deposit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Column(Storage="_QuantityInReserve", DbType="Int")]
		[DataMember(Order=18)]
		public System.Nullable<int> QuantityInReserve
		{
			get
			{
				return this._QuantityInReserve;
			}
			set
			{
				if ((this._QuantityInReserve != value))
				{
					this.OnQuantityInReserveChanging(value);
					this.SendPropertyChanging();
					this._QuantityInReserve = value;
					this.SendPropertyChanged("QuantityInReserve");
					this.OnQuantityInReserveChanged();
				}
			}
		}
		
		[Column(Storage="_AverageCosts", DbType="Decimal(18,2)")]
		[DataMember(Order=19)]
		public System.Nullable<decimal> AverageCosts
		{
			get
			{
				return this._AverageCosts;
			}
			set
			{
				if ((this._AverageCosts != value))
				{
					this.OnAverageCostsChanging(value);
					this.SendPropertyChanging();
					this._AverageCosts = value;
					this.SendPropertyChanged("AverageCosts");
					this.OnAverageCostsChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="Int")]
		[DataMember(Order=20)]
		public System.Nullable<int> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_SaleId", DbType="Int")]
		[DataMember(Order=21)]
		public System.Nullable<int> SaleId
		{
			get
			{
				return this._SaleId;
			}
			set
			{
				if ((this._SaleId != value))
				{
					if (this._Sale.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSaleIdChanging(value);
					this.SendPropertyChanging();
					this._SaleId = value;
					this.SendPropertyChanged("SaleId");
					this.OnSaleIdChanged();
				}
			}
		}
		
		[Association(Name="InventoryDropType_InventoryHistory", Storage="_InventoryDropType", ThisKey="InventoryDropTypeId", OtherKey="InventoryDropTypeId", IsForeignKey=true)]
		public InventoryDropType InventoryDropType
		{
			get
			{
				return this._InventoryDropType.Entity;
			}
			set
			{
				InventoryDropType previousValue = this._InventoryDropType.Entity;
				if (((previousValue != value) 
							|| (this._InventoryDropType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InventoryDropType.Entity = null;
						previousValue.InventoryHistories.Remove(this);
					}
					this._InventoryDropType.Entity = value;
					if ((value != null))
					{
						value.InventoryHistories.Add(this);
						this._InventoryDropTypeId = value.InventoryDropTypeId;
					}
					else
					{
						this._InventoryDropTypeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("InventoryDropType");
				}
			}
		}
		
		[Association(Name="InventoryEntryType_InventoryHistory", Storage="_InventoryEntryType", ThisKey="InventoryEntryTypeId", OtherKey="InventoryEntryTypeId", IsForeignKey=true)]
		public InventoryEntryType InventoryEntryType
		{
			get
			{
				return this._InventoryEntryType.Entity;
			}
			set
			{
				InventoryEntryType previousValue = this._InventoryEntryType.Entity;
				if (((previousValue != value) 
							|| (this._InventoryEntryType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InventoryEntryType.Entity = null;
						previousValue.InventoryHistories.Remove(this);
					}
					this._InventoryEntryType.Entity = value;
					if ((value != null))
					{
						value.InventoryHistories.Add(this);
						this._InventoryEntryTypeId = value.InventoryEntryTypeId;
					}
					else
					{
						this._InventoryEntryTypeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("InventoryEntryType");
				}
			}
		}
		
		[Association(Name="Deposit_InventoryHistory", Storage="_Deposit", ThisKey="DepositId,CompanyId", OtherKey="DepositId,CompanyId", IsForeignKey=true)]
		public Deposit Deposit
		{
			get
			{
				return this._Deposit.Entity;
			}
			set
			{
				Deposit previousValue = this._Deposit.Entity;
				if (((previousValue != value) 
							|| (this._Deposit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Deposit.Entity = null;
						previousValue.InventoryHistories.Remove(this);
					}
					this._Deposit.Entity = value;
					if ((value != null))
					{
						value.InventoryHistories.Add(this);
						this._DepositId = value.DepositId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._DepositId = default(int);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Deposit");
				}
			}
		}
		
		[Association(Name="Company_InventoryHistory", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.InventoryHistories.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.InventoryHistories.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[Association(Name="Product_InventoryHistory", Storage="_Product", ThisKey="ProductId", OtherKey="ProductId", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.InventoryHistories.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.InventoryHistories.Add(this);
						this._ProductId = value.ProductId;
					}
					else
					{
						this._ProductId = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		[Association(Name="Sale_InventoryHistory", Storage="_Sale", ThisKey="SaleId,CompanyId", OtherKey="SaleId,CompanyId", IsForeignKey=true)]
		public Sale Sale
		{
			get
			{
				return this._Sale.Entity;
			}
			set
			{
				Sale previousValue = this._Sale.Entity;
				if (((previousValue != value) 
							|| (this._Sale.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sale.Entity = null;
						previousValue.InventoryHistories.Remove(this);
					}
					this._Sale.Entity = value;
					if ((value != null))
					{
						value.InventoryHistories.Add(this);
						this._SaleId = value.SaleId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._SaleId = default(Nullable<int>);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Sale");
				}
			}
		}
		
		[Association(Name="User_InventoryHistory", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.InventoryHistories.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.InventoryHistories.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._InventoryDropType = default(EntityRef<InventoryDropType>);
			this._InventoryEntryType = default(EntityRef<InventoryEntryType>);
			this._Deposit = default(EntityRef<Deposit>);
			this._Company = default(EntityRef<Company>);
			this._Product = default(EntityRef<Product>);
			this._Sale = default(EntityRef<Sale>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.InventoryMoviment")]
	[DataContract()]
	public partial class InventoryMoviment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _InventoryMovementId;
		
		private int _DepositDestinationId;
		
		private int _Quantity;
		
		private System.DateTime _ModifiedDate;
		
		private int _CompanyDestinationId;
		
		private bool _Refused;
		
		private int _ProductId;
		
		private int _DepositId;
		
		private int _CompanyId;
		
		private int _InventoryId;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Company> _Company;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Inventory> _Inventory;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Deposit> _Deposit;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Company> _Company1;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInventoryMovementIdChanging(int value);
    partial void OnInventoryMovementIdChanged();
    partial void OnDepositDestinationIdChanging(int value);
    partial void OnDepositDestinationIdChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnCompanyDestinationIdChanging(int value);
    partial void OnCompanyDestinationIdChanged();
    partial void OnRefusedChanging(bool value);
    partial void OnRefusedChanged();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnDepositIdChanging(int value);
    partial void OnDepositIdChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnInventoryIdChanging(int value);
    partial void OnInventoryIdChanged();
    #endregion
		
		public InventoryMoviment()
		{
			this.Initialize();
		}
		
		[Column(Storage="_InventoryMovementId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int InventoryMovementId
		{
			get
			{
				return this._InventoryMovementId;
			}
			set
			{
				if ((this._InventoryMovementId != value))
				{
					this.OnInventoryMovementIdChanging(value);
					this.SendPropertyChanging();
					this._InventoryMovementId = value;
					this.SendPropertyChanged("InventoryMovementId");
					this.OnInventoryMovementIdChanged();
				}
			}
		}
		
		[Column(Storage="_DepositDestinationId", DbType="Int NOT NULL")]
		[DataMember(Order=2)]
		public int DepositDestinationId
		{
			get
			{
				return this._DepositDestinationId;
			}
			set
			{
				if ((this._DepositDestinationId != value))
				{
					if (this._Deposit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepositDestinationIdChanging(value);
					this.SendPropertyChanging();
					this._DepositDestinationId = value;
					this.SendPropertyChanged("DepositDestinationId");
					this.OnDepositDestinationIdChanged();
				}
			}
		}
		
		[Column(Storage="_Quantity", DbType="Int NOT NULL")]
		[DataMember(Order=3)]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		[DataMember(Order=4)]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyDestinationId", DbType="Int NOT NULL")]
		[DataMember(Order=5)]
		public int CompanyDestinationId
		{
			get
			{
				return this._CompanyDestinationId;
			}
			set
			{
				if ((this._CompanyDestinationId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyDestinationIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyDestinationId = value;
					this.SendPropertyChanged("CompanyDestinationId");
					this.OnCompanyDestinationIdChanged();
				}
			}
		}
		
		[Column(Storage="_Refused", DbType="Bit NOT NULL")]
		[DataMember(Order=6)]
		public bool Refused
		{
			get
			{
				return this._Refused;
			}
			set
			{
				if ((this._Refused != value))
				{
					this.OnRefusedChanging(value);
					this.SendPropertyChanging();
					this._Refused = value;
					this.SendPropertyChanged("Refused");
					this.OnRefusedChanged();
				}
			}
		}
		
		[Column(Storage="_ProductId", DbType="Int NOT NULL")]
		[DataMember(Order=7)]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[Column(Storage="_DepositId", DbType="Int NOT NULL")]
		[DataMember(Order=8)]
		public int DepositId
		{
			get
			{
				return this._DepositId;
			}
			set
			{
				if ((this._DepositId != value))
				{
					if (this._Inventory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepositIdChanging(value);
					this.SendPropertyChanging();
					this._DepositId = value;
					this.SendPropertyChanged("DepositId");
					this.OnDepositIdChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL")]
		[DataMember(Order=9)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Column(Storage="_InventoryId", DbType="Int NOT NULL")]
		[DataMember(Order=10)]
		public int InventoryId
		{
			get
			{
				return this._InventoryId;
			}
			set
			{
				if ((this._InventoryId != value))
				{
					if (this._Inventory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInventoryIdChanging(value);
					this.SendPropertyChanging();
					this._InventoryId = value;
					this.SendPropertyChanged("InventoryId");
					this.OnInventoryIdChanged();
				}
			}
		}
		
		[Association(Name="Company_InventoryMoviment", Storage="_Company", ThisKey="CompanyDestinationId", OtherKey="CompanyId", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.InventoryMoviments.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.InventoryMoviments.Add(this);
						this._CompanyDestinationId = value.CompanyId;
					}
					else
					{
						this._CompanyDestinationId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[Association(Name="Inventory_InventoryMoviment", Storage="_Inventory", ThisKey="DepositId,InventoryId,CompanyDestinationId", OtherKey="DepositId,InventoryId,CompanyId", IsForeignKey=true)]
		public Inventory Inventory
		{
			get
			{
				return this._Inventory.Entity;
			}
			set
			{
				Inventory previousValue = this._Inventory.Entity;
				if (((previousValue != value) 
							|| (this._Inventory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Inventory.Entity = null;
						previousValue.InventoryMoviments.Remove(this);
					}
					this._Inventory.Entity = value;
					if ((value != null))
					{
						value.InventoryMoviments.Add(this);
						this._DepositId = value.DepositId;
						this._InventoryId = value.InventoryId;
						this._CompanyDestinationId = value.CompanyId;
					}
					else
					{
						this._DepositId = default(int);
						this._InventoryId = default(int);
						this._CompanyDestinationId = default(int);
					}
					this.SendPropertyChanged("Inventory");
				}
			}
		}
		
		[Association(Name="Deposit_InventoryMoviment", Storage="_Deposit", ThisKey="DepositDestinationId,CompanyDestinationId", OtherKey="DepositId,CompanyId", IsForeignKey=true)]
		public Deposit Deposit
		{
			get
			{
				return this._Deposit.Entity;
			}
			set
			{
				Deposit previousValue = this._Deposit.Entity;
				if (((previousValue != value) 
							|| (this._Deposit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Deposit.Entity = null;
						previousValue.InventoryMoviments.Remove(this);
					}
					this._Deposit.Entity = value;
					if ((value != null))
					{
						value.InventoryMoviments.Add(this);
						this._DepositDestinationId = value.DepositId;
						this._CompanyDestinationId = value.CompanyId;
					}
					else
					{
						this._DepositDestinationId = default(int);
						this._CompanyDestinationId = default(int);
					}
					this.SendPropertyChanged("Deposit");
				}
			}
		}
		
		[Association(Name="Company_InventoryMoviment1", Storage="_Company1", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true)]
		public Company Company1
		{
			get
			{
				return this._Company1.Entity;
			}
			set
			{
				Company previousValue = this._Company1.Entity;
				if (((previousValue != value) 
							|| (this._Company1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company1.Entity = null;
						previousValue.InventoryMoviments1.Remove(this);
					}
					this._Company1.Entity = value;
					if ((value != null))
					{
						value.InventoryMoviments1.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company1");
				}
			}
		}
		
		[Association(Name="Product_InventoryMoviment", Storage="_Product", ThisKey="ProductId", OtherKey="ProductId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.InventoryMoviments.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.InventoryMoviments.Add(this);
						this._ProductId = value.ProductId;
					}
					else
					{
						this._ProductId = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Company = default(EntityRef<Company>);
			this._Inventory = default(EntityRef<Inventory>);
			this._Deposit = default(EntityRef<Deposit>);
			this._Company1 = default(EntityRef<Company>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.InventoryRMA")]
	[DataContract()]
	public partial class InventoryRMA : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _InventoryRMAId;
		
		private int _ProductId;
		
		private int _DepositId;
		
		private int _SupplierId;
		
		private int _Quantity;
		
		private System.DateTime _ModifiedDate;
		
		private bool _Substituted;
		
		private int _CompanyId;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Company> _Company;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Product> _Product;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Supplier> _Supplier;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInventoryRMAIdChanging(int value);
    partial void OnInventoryRMAIdChanged();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnDepositIdChanging(int value);
    partial void OnDepositIdChanged();
    partial void OnSupplierIdChanging(int value);
    partial void OnSupplierIdChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnSubstitutedChanging(bool value);
    partial void OnSubstitutedChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    #endregion
		
		public InventoryRMA()
		{
			this.Initialize();
		}
		
		[Column(Storage="_InventoryRMAId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int InventoryRMAId
		{
			get
			{
				return this._InventoryRMAId;
			}
			set
			{
				if ((this._InventoryRMAId != value))
				{
					this.OnInventoryRMAIdChanging(value);
					this.SendPropertyChanging();
					this._InventoryRMAId = value;
					this.SendPropertyChanged("InventoryRMAId");
					this.OnInventoryRMAIdChanged();
				}
			}
		}
		
		[Column(Storage="_ProductId", DbType="Int NOT NULL")]
		[DataMember(Order=2)]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[Column(Storage="_DepositId", DbType="Int NOT NULL")]
		[DataMember(Order=3)]
		public int DepositId
		{
			get
			{
				return this._DepositId;
			}
			set
			{
				if ((this._DepositId != value))
				{
					this.OnDepositIdChanging(value);
					this.SendPropertyChanging();
					this._DepositId = value;
					this.SendPropertyChanged("DepositId");
					this.OnDepositIdChanged();
				}
			}
		}
		
		[Column(Storage="_SupplierId", DbType="Int NOT NULL")]
		[DataMember(Order=4)]
		public int SupplierId
		{
			get
			{
				return this._SupplierId;
			}
			set
			{
				if ((this._SupplierId != value))
				{
					if (this._Supplier.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSupplierIdChanging(value);
					this.SendPropertyChanging();
					this._SupplierId = value;
					this.SendPropertyChanged("SupplierId");
					this.OnSupplierIdChanged();
				}
			}
		}
		
		[Column(Storage="_Quantity", DbType="Int NOT NULL")]
		[DataMember(Order=5)]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		[DataMember(Order=6)]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_Substituted", DbType="Bit NOT NULL")]
		[DataMember(Order=7)]
		public bool Substituted
		{
			get
			{
				return this._Substituted;
			}
			set
			{
				if ((this._Substituted != value))
				{
					this.OnSubstitutedChanging(value);
					this.SendPropertyChanging();
					this._Substituted = value;
					this.SendPropertyChanged("Substituted");
					this.OnSubstitutedChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL")]
		[DataMember(Order=8)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Association(Name="Company_InventoryRMA", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.InventoryRMAs.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.InventoryRMAs.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[Association(Name="Product_InventoryRMA", Storage="_Product", ThisKey="ProductId", OtherKey="ProductId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.InventoryRMAs.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.InventoryRMAs.Add(this);
						this._ProductId = value.ProductId;
					}
					else
					{
						this._ProductId = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		[Association(Name="Supplier_InventoryRMA", Storage="_Supplier", ThisKey="SupplierId", OtherKey="SupplierId", IsForeignKey=true)]
		public Supplier Supplier
		{
			get
			{
				return this._Supplier.Entity;
			}
			set
			{
				Supplier previousValue = this._Supplier.Entity;
				if (((previousValue != value) 
							|| (this._Supplier.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Supplier.Entity = null;
						previousValue.InventoryRMAs.Remove(this);
					}
					this._Supplier.Entity = value;
					if ((value != null))
					{
						value.InventoryRMAs.Add(this);
						this._SupplierId = value.SupplierId;
					}
					else
					{
						this._SupplierId = default(int);
					}
					this.SendPropertyChanged("Supplier");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Company = default(EntityRef<Company>);
			this._Product = default(EntityRef<Product>);
			this._Supplier = default(EntityRef<Supplier>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.InventorySerial")]
	[DataContract()]
	public partial class InventorySerial : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _InventorySerialId;
		
		private int _DepositId;
		
		private int _CompanyId;
		
		private string _Serial;
		
		private string _Lot;
		
		private System.Nullable<System.DateTime> _DueDate;
		
		private int _InventoryId;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Inventory> _Inventory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInventorySerialIdChanging(int value);
    partial void OnInventorySerialIdChanged();
    partial void OnDepositIdChanging(int value);
    partial void OnDepositIdChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnSerialChanging(string value);
    partial void OnSerialChanged();
    partial void OnLotChanging(string value);
    partial void OnLotChanged();
    partial void OnDueDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDueDateChanged();
    partial void OnInventoryIdChanging(int value);
    partial void OnInventoryIdChanged();
    #endregion
		
		public InventorySerial()
		{
			this.Initialize();
		}
		
		[Column(Storage="_InventorySerialId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int InventorySerialId
		{
			get
			{
				return this._InventorySerialId;
			}
			set
			{
				if ((this._InventorySerialId != value))
				{
					this.OnInventorySerialIdChanging(value);
					this.SendPropertyChanging();
					this._InventorySerialId = value;
					this.SendPropertyChanged("InventorySerialId");
					this.OnInventorySerialIdChanged();
				}
			}
		}
		
		[Column(Storage="_DepositId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=2)]
		public int DepositId
		{
			get
			{
				return this._DepositId;
			}
			set
			{
				if ((this._DepositId != value))
				{
					if (this._Inventory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepositIdChanging(value);
					this.SendPropertyChanging();
					this._DepositId = value;
					this.SendPropertyChanged("DepositId");
					this.OnDepositIdChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=3)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Inventory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Column(Storage="_Serial", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		[DataMember(Order=4)]
		public string Serial
		{
			get
			{
				return this._Serial;
			}
			set
			{
				if ((this._Serial != value))
				{
					this.OnSerialChanging(value);
					this.SendPropertyChanging();
					this._Serial = value;
					this.SendPropertyChanged("Serial");
					this.OnSerialChanged();
				}
			}
		}
		
		[Column(Storage="_Lot", DbType="VarChar(30)")]
		[DataMember(Order=5)]
		public string Lot
		{
			get
			{
				return this._Lot;
			}
			set
			{
				if ((this._Lot != value))
				{
					this.OnLotChanging(value);
					this.SendPropertyChanging();
					this._Lot = value;
					this.SendPropertyChanged("Lot");
					this.OnLotChanged();
				}
			}
		}
		
		[Column(Storage="_DueDate", DbType="DateTime")]
		[DataMember(Order=6)]
		public System.Nullable<System.DateTime> DueDate
		{
			get
			{
				return this._DueDate;
			}
			set
			{
				if ((this._DueDate != value))
				{
					this.OnDueDateChanging(value);
					this.SendPropertyChanging();
					this._DueDate = value;
					this.SendPropertyChanged("DueDate");
					this.OnDueDateChanged();
				}
			}
		}
		
		[Column(Storage="_InventoryId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=7)]
		public int InventoryId
		{
			get
			{
				return this._InventoryId;
			}
			set
			{
				if ((this._InventoryId != value))
				{
					if (this._Inventory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInventoryIdChanging(value);
					this.SendPropertyChanging();
					this._InventoryId = value;
					this.SendPropertyChanged("InventoryId");
					this.OnInventoryIdChanged();
				}
			}
		}
		
		[Association(Name="Inventory_InventorySerial", Storage="_Inventory", ThisKey="DepositId,InventoryId,CompanyId", OtherKey="DepositId,InventoryId,CompanyId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Inventory Inventory
		{
			get
			{
				return this._Inventory.Entity;
			}
			set
			{
				Inventory previousValue = this._Inventory.Entity;
				if (((previousValue != value) 
							|| (this._Inventory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Inventory.Entity = null;
						previousValue.InventorySerials.Remove(this);
					}
					this._Inventory.Entity = value;
					if ((value != null))
					{
						value.InventorySerials.Add(this);
						this._DepositId = value.DepositId;
						this._InventoryId = value.InventoryId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._DepositId = default(int);
						this._InventoryId = default(int);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Inventory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Inventory = default(EntityRef<Inventory>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.Invoice")]
	[DataContract()]
	public partial class Invoice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _InvoiceId;
		
		private System.Nullable<System.DateTime> _EntryDate;
		
		private string _Description;
		
		private System.Nullable<int> _CustomerId;
		
		private System.Nullable<int> _CostCenterId;
		
		private System.Nullable<int> _AccountingPlanId;
		
		private int _CompanyId;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private string _CreatedByUser;
		
		private string _ModifiedByUser;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Contract> _Contracts;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Parcel> _Parcels;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Sale> _Sales;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Statement> _Statements;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Customer> _Customer;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<CostCenter> _CostCenter;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<AccountingPlan> _AccountingPlan;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Company> _Company;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInvoiceIdChanging(int value);
    partial void OnInvoiceIdChanged();
    partial void OnEntryDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEntryDateChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCustomerIdChanging(System.Nullable<int> value);
    partial void OnCustomerIdChanged();
    partial void OnCostCenterIdChanging(System.Nullable<int> value);
    partial void OnCostCenterIdChanged();
    partial void OnAccountingPlanIdChanging(System.Nullable<int> value);
    partial void OnAccountingPlanIdChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    partial void OnCreatedByUserChanging(string value);
    partial void OnCreatedByUserChanged();
    partial void OnModifiedByUserChanging(string value);
    partial void OnModifiedByUserChanged();
    #endregion
		
		public Invoice()
		{
			this.Initialize();
		}
		
		[Column(Storage="_InvoiceId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int InvoiceId
		{
			get
			{
				return this._InvoiceId;
			}
			set
			{
				if ((this._InvoiceId != value))
				{
					this.OnInvoiceIdChanging(value);
					this.SendPropertyChanging();
					this._InvoiceId = value;
					this.SendPropertyChanged("InvoiceId");
					this.OnInvoiceIdChanged();
				}
			}
		}
		
		[Column(Storage="_EntryDate", DbType="DateTime")]
		[DataMember(Order=2)]
		public System.Nullable<System.DateTime> EntryDate
		{
			get
			{
				return this._EntryDate;
			}
			set
			{
				if ((this._EntryDate != value))
				{
					this.OnEntryDateChanging(value);
					this.SendPropertyChanging();
					this._EntryDate = value;
					this.SendPropertyChanged("EntryDate");
					this.OnEntryDateChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(1024)")]
		[DataMember(Order=3)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_CustomerId", DbType="Int")]
		[DataMember(Order=4)]
		public System.Nullable<int> CustomerId
		{
			get
			{
				return this._CustomerId;
			}
			set
			{
				if ((this._CustomerId != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerId = value;
					this.SendPropertyChanged("CustomerId");
					this.OnCustomerIdChanged();
				}
			}
		}
		
		[Column(Storage="_CostCenterId", DbType="Int")]
		[DataMember(Order=5)]
		public System.Nullable<int> CostCenterId
		{
			get
			{
				return this._CostCenterId;
			}
			set
			{
				if ((this._CostCenterId != value))
				{
					if (this._CostCenter.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCostCenterIdChanging(value);
					this.SendPropertyChanging();
					this._CostCenterId = value;
					this.SendPropertyChanged("CostCenterId");
					this.OnCostCenterIdChanged();
				}
			}
		}
		
		[Column(Storage="_AccountingPlanId", DbType="Int")]
		[DataMember(Order=6)]
		public System.Nullable<int> AccountingPlanId
		{
			get
			{
				return this._AccountingPlanId;
			}
			set
			{
				if ((this._AccountingPlanId != value))
				{
					if (this._AccountingPlan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountingPlanIdChanging(value);
					this.SendPropertyChanging();
					this._AccountingPlanId = value;
					this.SendPropertyChanged("AccountingPlanId");
					this.OnAccountingPlanIdChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=7)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._CostCenter.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime")]
		[DataMember(Order=8)]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime")]
		[DataMember(Order=9)]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedByUser", DbType="VarChar(50)")]
		[DataMember(Order=10)]
		public string CreatedByUser
		{
			get
			{
				return this._CreatedByUser;
			}
			set
			{
				if ((this._CreatedByUser != value))
				{
					this.OnCreatedByUserChanging(value);
					this.SendPropertyChanging();
					this._CreatedByUser = value;
					this.SendPropertyChanged("CreatedByUser");
					this.OnCreatedByUserChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedByUser", DbType="VarChar(50)")]
		[DataMember(Order=11)]
		public string ModifiedByUser
		{
			get
			{
				return this._ModifiedByUser;
			}
			set
			{
				if ((this._ModifiedByUser != value))
				{
					this.OnModifiedByUserChanging(value);
					this.SendPropertyChanging();
					this._ModifiedByUser = value;
					this.SendPropertyChanged("ModifiedByUser");
					this.OnModifiedByUserChanged();
				}
			}
		}
		
		[Association(Name="Invoice_Contract", Storage="_Contracts", ThisKey="InvoiceId,CompanyId", OtherKey="InvoiceId,CompanyId")]
		[DataMember(Order=12, EmitDefaultValue=false)]
		public EntitySet<Contract> Contracts
		{
			get
			{
				if ((this.serializing 
							&& (this._Contracts.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Contracts;
			}
			set
			{
				this._Contracts.Assign(value);
			}
		}
		
		[Association(Name="Invoice_Parcel", Storage="_Parcels", ThisKey="InvoiceId,CompanyId", OtherKey="InvoiceId,CompanyId")]
		[DataMember(Order=13, EmitDefaultValue=false)]
		public EntitySet<Parcel> Parcels
		{
			get
			{
				if ((this.serializing 
							&& (this._Parcels.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Parcels;
			}
			set
			{
				this._Parcels.Assign(value);
			}
		}
		
		[Association(Name="Invoice_Sale", Storage="_Sales", ThisKey="InvoiceId,CompanyId", OtherKey="InvoiceId,CompanyId")]
		[DataMember(Order=14, EmitDefaultValue=false)]
		public EntitySet<Sale> Sales
		{
			get
			{
				if ((this.serializing 
							&& (this._Sales.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Sales;
			}
			set
			{
				this._Sales.Assign(value);
			}
		}
		
		[Association(Name="Invoice_Statement", Storage="_Statements", ThisKey="InvoiceId,CompanyId", OtherKey="HostInvoiceId,CompanyId")]
		[DataMember(Order=15, EmitDefaultValue=false)]
		public EntitySet<Statement> Statements
		{
			get
			{
				if ((this.serializing 
							&& (this._Statements.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Statements;
			}
			set
			{
				this._Statements.Assign(value);
			}
		}
		
		[Association(Name="Customer_Invoice", Storage="_Customer", ThisKey="CustomerId", OtherKey="CustomerId", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Invoices.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Invoices.Add(this);
						this._CustomerId = value.CustomerId;
					}
					else
					{
						this._CustomerId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[Association(Name="CostCenter_Invoice", Storage="_CostCenter", ThisKey="CostCenterId,CompanyId", OtherKey="CostCenterId,CompanyId", IsForeignKey=true)]
		public CostCenter CostCenter
		{
			get
			{
				return this._CostCenter.Entity;
			}
			set
			{
				CostCenter previousValue = this._CostCenter.Entity;
				if (((previousValue != value) 
							|| (this._CostCenter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CostCenter.Entity = null;
						previousValue.Invoices.Remove(this);
					}
					this._CostCenter.Entity = value;
					if ((value != null))
					{
						value.Invoices.Add(this);
						this._CostCenterId = value.CostCenterId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CostCenterId = default(Nullable<int>);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("CostCenter");
				}
			}
		}
		
		[Association(Name="AccountingPlan_Invoice", Storage="_AccountingPlan", ThisKey="AccountingPlanId,CompanyId", OtherKey="AccountingPlanId,CompanyId", IsForeignKey=true)]
		public AccountingPlan AccountingPlan
		{
			get
			{
				return this._AccountingPlan.Entity;
			}
			set
			{
				AccountingPlan previousValue = this._AccountingPlan.Entity;
				if (((previousValue != value) 
							|| (this._AccountingPlan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccountingPlan.Entity = null;
						previousValue.Invoices.Remove(this);
					}
					this._AccountingPlan.Entity = value;
					if ((value != null))
					{
						value.Invoices.Add(this);
						this._AccountingPlanId = value.AccountingPlanId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._AccountingPlanId = default(Nullable<int>);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("AccountingPlan");
				}
			}
		}
		
		[Association(Name="Company_Invoice", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Invoices.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Invoices.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Contracts(Contract entity)
		{
			this.SendPropertyChanging();
			entity.Invoice = this;
		}
		
		private void detach_Contracts(Contract entity)
		{
			this.SendPropertyChanging();
			entity.Invoice = null;
		}
		
		private void attach_Parcels(Parcel entity)
		{
			this.SendPropertyChanging();
			entity.Invoice = this;
		}
		
		private void detach_Parcels(Parcel entity)
		{
			this.SendPropertyChanging();
			entity.Invoice = null;
		}
		
		private void attach_Sales(Sale entity)
		{
			this.SendPropertyChanging();
			entity.Invoice = this;
		}
		
		private void detach_Sales(Sale entity)
		{
			this.SendPropertyChanging();
			entity.Invoice = null;
		}
		
		private void attach_Statements(Statement entity)
		{
			this.SendPropertyChanging();
			entity.Invoice = this;
		}
		
		private void detach_Statements(Statement entity)
		{
			this.SendPropertyChanging();
			entity.Invoice = null;
		}
		
		private void Initialize()
		{
			this._Contracts = new EntitySet<Contract>(new Action<Contract>(this.attach_Contracts), new Action<Contract>(this.detach_Contracts));
			this._Parcels = new EntitySet<Parcel>(new Action<Parcel>(this.attach_Parcels), new Action<Parcel>(this.detach_Parcels));
			this._Sales = new EntitySet<Sale>(new Action<Sale>(this.attach_Sales), new Action<Sale>(this.detach_Sales));
			this._Statements = new EntitySet<Statement>(new Action<Statement>(this.attach_Statements), new Action<Statement>(this.detach_Statements));
			this._Customer = default(EntityRef<Customer>);
			this._CostCenter = default(EntityRef<CostCenter>);
			this._AccountingPlan = default(EntityRef<AccountingPlan>);
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.IrrfInterval")]
	[DataContract()]
	public partial class IrrfInterval : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IrrfIntervalId;
		
		private decimal _Limit;
		
		private decimal _Tax;
		
		private int _Year;
		
		private decimal _Dedution;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIrrfIntervalIdChanging(int value);
    partial void OnIrrfIntervalIdChanged();
    partial void OnLimitChanging(decimal value);
    partial void OnLimitChanged();
    partial void OnTaxChanging(decimal value);
    partial void OnTaxChanged();
    partial void OnYearChanging(int value);
    partial void OnYearChanged();
    partial void OnDedutionChanging(decimal value);
    partial void OnDedutionChanged();
    #endregion
		
		public IrrfInterval()
		{
			this.Initialize();
		}
		
		[Column(Storage="_IrrfIntervalId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int IrrfIntervalId
		{
			get
			{
				return this._IrrfIntervalId;
			}
			set
			{
				if ((this._IrrfIntervalId != value))
				{
					this.OnIrrfIntervalIdChanging(value);
					this.SendPropertyChanging();
					this._IrrfIntervalId = value;
					this.SendPropertyChanged("IrrfIntervalId");
					this.OnIrrfIntervalIdChanged();
				}
			}
		}
		
		[Column(Storage="_Limit", DbType="Decimal(18,2) NOT NULL")]
		[DataMember(Order=2)]
		public decimal Limit
		{
			get
			{
				return this._Limit;
			}
			set
			{
				if ((this._Limit != value))
				{
					this.OnLimitChanging(value);
					this.SendPropertyChanging();
					this._Limit = value;
					this.SendPropertyChanged("Limit");
					this.OnLimitChanged();
				}
			}
		}
		
		[Column(Storage="_Tax", DbType="Decimal(18,2) NOT NULL")]
		[DataMember(Order=3)]
		public decimal Tax
		{
			get
			{
				return this._Tax;
			}
			set
			{
				if ((this._Tax != value))
				{
					this.OnTaxChanging(value);
					this.SendPropertyChanging();
					this._Tax = value;
					this.SendPropertyChanged("Tax");
					this.OnTaxChanged();
				}
			}
		}
		
		[Column(Storage="_Year", DbType="Int NOT NULL")]
		[DataMember(Order=4)]
		public int Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[Column(Storage="_Dedution", DbType="Decimal(18,2) NOT NULL")]
		[DataMember(Order=5)]
		public decimal Dedution
		{
			get
			{
				return this._Dedution;
			}
			set
			{
				if ((this._Dedution != value))
				{
					this.OnDedutionChanging(value);
					this.SendPropertyChanging();
					this._Dedution = value;
					this.SendPropertyChanged("Dedution");
					this.OnDedutionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.JudicialNature")]
	[DataContract()]
	public partial class JudicialNature : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _JudicialNatureId;
		
		private string _Name;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Company> _Companies;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnJudicialNatureIdChanging(int value);
    partial void OnJudicialNatureIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public JudicialNature()
		{
			this.Initialize();
		}
		
		[Column(Storage="_JudicialNatureId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int JudicialNatureId
		{
			get
			{
				return this._JudicialNatureId;
			}
			set
			{
				if ((this._JudicialNatureId != value))
				{
					this.OnJudicialNatureIdChanging(value);
					this.SendPropertyChanging();
					this._JudicialNatureId = value;
					this.SendPropertyChanged("JudicialNatureId");
					this.OnJudicialNatureIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(120)")]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="JudicialNature_Company", Storage="_Companies", ThisKey="JudicialNatureId", OtherKey="JudicialNatureId")]
		[DataMember(Order=3, EmitDefaultValue=false)]
		public EntitySet<Company> Companies
		{
			get
			{
				if ((this.serializing 
							&& (this._Companies.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Companies;
			}
			set
			{
				this._Companies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Companies(Company entity)
		{
			this.SendPropertyChanging();
			entity.JudicialNature = this;
		}
		
		private void detach_Companies(Company entity)
		{
			this.SendPropertyChanging();
			entity.JudicialNature = null;
		}
		
		private void Initialize()
		{
			this._Companies = new EntitySet<Company>(new Action<Company>(this.attach_Companies), new Action<Company>(this.detach_Companies));
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.LegalEntityProfile")]
	[DataContract()]
	public partial class LegalEntityProfile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LegalEntityProfileId;
		
		private string _CompanyName;
		
		private string _FantasyName;
		
		private string _CNPJ;
		
		private string _IE;
		
		private string _Phone;
		
		private string _Email;
		
		private string _Website;
		
		private string _PostalCode;
		
		private string _AddressNumber;
		
		private string _AddressComp;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private System.Nullable<int> _BranchId;
		
		private string _Observations;
		
		private string _RecoveryAddressNumber;
		
		private string _RecoveryPostalCode;
		
		private string _RecoveryAddressComp;
		
		private string _Fax;
		
		private string _Phone2;
		
		private string _Phone3;
		
		private string _MunicipalRegister;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Company> _Companies;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Customer> _Customers;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<ProfileAddress> _ProfileAddresses;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Representant> _Representants;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Supplier> _Suppliers;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Transporter> _Transporters;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Address> _Address;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Branch> _Branch;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLegalEntityProfileIdChanging(int value);
    partial void OnLegalEntityProfileIdChanged();
    partial void OnCompanyNameChanging(string value);
    partial void OnCompanyNameChanged();
    partial void OnFantasyNameChanging(string value);
    partial void OnFantasyNameChanged();
    partial void OnCNPJChanging(string value);
    partial void OnCNPJChanged();
    partial void OnIEChanging(string value);
    partial void OnIEChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnWebsiteChanging(string value);
    partial void OnWebsiteChanged();
    partial void OnPostalCodeChanging(string value);
    partial void OnPostalCodeChanged();
    partial void OnAddressNumberChanging(string value);
    partial void OnAddressNumberChanged();
    partial void OnAddressCompChanging(string value);
    partial void OnAddressCompChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    partial void OnBranchIdChanging(System.Nullable<int> value);
    partial void OnBranchIdChanged();
    partial void OnObservationsChanging(string value);
    partial void OnObservationsChanged();
    partial void OnRecoveryAddressNumberChanging(string value);
    partial void OnRecoveryAddressNumberChanged();
    partial void OnRecoveryPostalCodeChanging(string value);
    partial void OnRecoveryPostalCodeChanged();
    partial void OnRecoveryAddressCompChanging(string value);
    partial void OnRecoveryAddressCompChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnPhone2Changing(string value);
    partial void OnPhone2Changed();
    partial void OnPhone3Changing(string value);
    partial void OnPhone3Changed();
    partial void OnMunicipalRegisterChanging(string value);
    partial void OnMunicipalRegisterChanged();
    #endregion
		
		public LegalEntityProfile()
		{
			this.Initialize();
		}
		
		[Column(Storage="_LegalEntityProfileId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int LegalEntityProfileId
		{
			get
			{
				return this._LegalEntityProfileId;
			}
			set
			{
				if ((this._LegalEntityProfileId != value))
				{
					this.OnLegalEntityProfileIdChanging(value);
					this.SendPropertyChanging();
					this._LegalEntityProfileId = value;
					this.SendPropertyChanged("LegalEntityProfileId");
					this.OnLegalEntityProfileIdChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string CompanyName
		{
			get
			{
				return this._CompanyName;
			}
			set
			{
				if ((this._CompanyName != value))
				{
					this.OnCompanyNameChanging(value);
					this.SendPropertyChanging();
					this._CompanyName = value;
					this.SendPropertyChanged("CompanyName");
					this.OnCompanyNameChanged();
				}
			}
		}
		
		[Column(Storage="_FantasyName", DbType="VarChar(100)")]
		[DataMember(Order=3)]
		public string FantasyName
		{
			get
			{
				return this._FantasyName;
			}
			set
			{
				if ((this._FantasyName != value))
				{
					this.OnFantasyNameChanging(value);
					this.SendPropertyChanging();
					this._FantasyName = value;
					this.SendPropertyChanged("FantasyName");
					this.OnFantasyNameChanged();
				}
			}
		}
		
		[Column(Storage="_CNPJ", DbType="VarChar(18) NOT NULL", CanBeNull=false)]
		[DataMember(Order=4)]
		public string CNPJ
		{
			get
			{
				return this._CNPJ;
			}
			set
			{
				if ((this._CNPJ != value))
				{
					this.OnCNPJChanging(value);
					this.SendPropertyChanging();
					this._CNPJ = value;
					this.SendPropertyChanged("CNPJ");
					this.OnCNPJChanged();
				}
			}
		}
		
		[Column(Storage="_IE", DbType="VarChar(20)")]
		[DataMember(Order=5)]
		public string IE
		{
			get
			{
				return this._IE;
			}
			set
			{
				if ((this._IE != value))
				{
					this.OnIEChanging(value);
					this.SendPropertyChanging();
					this._IE = value;
					this.SendPropertyChanged("IE");
					this.OnIEChanged();
				}
			}
		}
		
		[Column(Storage="_Phone", DbType="VarChar(50)")]
		[DataMember(Order=6)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="VarChar(50)")]
		[DataMember(Order=7)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_Website", DbType="VarChar(1024)")]
		[DataMember(Order=8)]
		public string Website
		{
			get
			{
				return this._Website;
			}
			set
			{
				if ((this._Website != value))
				{
					this.OnWebsiteChanging(value);
					this.SendPropertyChanging();
					this._Website = value;
					this.SendPropertyChanged("Website");
					this.OnWebsiteChanged();
				}
			}
		}
		
		[Column(Storage="_PostalCode", DbType="Char(8)")]
		[DataMember(Order=9)]
		public string PostalCode
		{
			get
			{
				return this._PostalCode;
			}
			set
			{
				if ((this._PostalCode != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPostalCodeChanging(value);
					this.SendPropertyChanging();
					this._PostalCode = value;
					this.SendPropertyChanged("PostalCode");
					this.OnPostalCodeChanged();
				}
			}
		}
		
		[Column(Storage="_AddressNumber", DbType="VarChar(8)")]
		[DataMember(Order=10)]
		public string AddressNumber
		{
			get
			{
				return this._AddressNumber;
			}
			set
			{
				if ((this._AddressNumber != value))
				{
					this.OnAddressNumberChanging(value);
					this.SendPropertyChanging();
					this._AddressNumber = value;
					this.SendPropertyChanged("AddressNumber");
					this.OnAddressNumberChanged();
				}
			}
		}
		
		[Column(Storage="_AddressComp", DbType="VarChar(50)")]
		[DataMember(Order=11)]
		public string AddressComp
		{
			get
			{
				return this._AddressComp;
			}
			set
			{
				if ((this._AddressComp != value))
				{
					this.OnAddressCompChanging(value);
					this.SendPropertyChanging();
					this._AddressComp = value;
					this.SendPropertyChanged("AddressComp");
					this.OnAddressCompChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime")]
		[DataMember(Order=12)]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_BranchId", DbType="Int")]
		[DataMember(Order=13)]
		public System.Nullable<int> BranchId
		{
			get
			{
				return this._BranchId;
			}
			set
			{
				if ((this._BranchId != value))
				{
					if (this._Branch.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBranchIdChanging(value);
					this.SendPropertyChanging();
					this._BranchId = value;
					this.SendPropertyChanged("BranchId");
					this.OnBranchIdChanged();
				}
			}
		}
		
		[Column(Storage="_Observations", DbType="VarChar(200)")]
		[DataMember(Order=14)]
		public string Observations
		{
			get
			{
				return this._Observations;
			}
			set
			{
				if ((this._Observations != value))
				{
					this.OnObservationsChanging(value);
					this.SendPropertyChanging();
					this._Observations = value;
					this.SendPropertyChanged("Observations");
					this.OnObservationsChanged();
				}
			}
		}
		
		[Column(Storage="_RecoveryAddressNumber", DbType="VarChar(50)")]
		[DataMember(Order=15)]
		public string RecoveryAddressNumber
		{
			get
			{
				return this._RecoveryAddressNumber;
			}
			set
			{
				if ((this._RecoveryAddressNumber != value))
				{
					this.OnRecoveryAddressNumberChanging(value);
					this.SendPropertyChanging();
					this._RecoveryAddressNumber = value;
					this.SendPropertyChanged("RecoveryAddressNumber");
					this.OnRecoveryAddressNumberChanged();
				}
			}
		}
		
		[Column(Storage="_RecoveryPostalCode", DbType="Char(8)")]
		[DataMember(Order=16)]
		public string RecoveryPostalCode
		{
			get
			{
				return this._RecoveryPostalCode;
			}
			set
			{
				if ((this._RecoveryPostalCode != value))
				{
					this.OnRecoveryPostalCodeChanging(value);
					this.SendPropertyChanging();
					this._RecoveryPostalCode = value;
					this.SendPropertyChanged("RecoveryPostalCode");
					this.OnRecoveryPostalCodeChanged();
				}
			}
		}
		
		[Column(Storage="_RecoveryAddressComp", DbType="VarChar(50)")]
		[DataMember(Order=17)]
		public string RecoveryAddressComp
		{
			get
			{
				return this._RecoveryAddressComp;
			}
			set
			{
				if ((this._RecoveryAddressComp != value))
				{
					this.OnRecoveryAddressCompChanging(value);
					this.SendPropertyChanging();
					this._RecoveryAddressComp = value;
					this.SendPropertyChanged("RecoveryAddressComp");
					this.OnRecoveryAddressCompChanged();
				}
			}
		}
		
		[Column(Storage="_Fax", DbType="VarChar(15)")]
		[DataMember(Order=18)]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}
		
		[Column(Storage="_Phone2", DbType="VarChar(15)")]
		[DataMember(Order=19)]
		public string Phone2
		{
			get
			{
				return this._Phone2;
			}
			set
			{
				if ((this._Phone2 != value))
				{
					this.OnPhone2Changing(value);
					this.SendPropertyChanging();
					this._Phone2 = value;
					this.SendPropertyChanged("Phone2");
					this.OnPhone2Changed();
				}
			}
		}
		
		[Column(Storage="_Phone3", DbType="VarChar(15)")]
		[DataMember(Order=20)]
		public string Phone3
		{
			get
			{
				return this._Phone3;
			}
			set
			{
				if ((this._Phone3 != value))
				{
					this.OnPhone3Changing(value);
					this.SendPropertyChanging();
					this._Phone3 = value;
					this.SendPropertyChanged("Phone3");
					this.OnPhone3Changed();
				}
			}
		}
		
		[Column(Storage="_MunicipalRegister", DbType="VarChar(20)")]
		[DataMember(Order=21)]
		public string MunicipalRegister
		{
			get
			{
				return this._MunicipalRegister;
			}
			set
			{
				if ((this._MunicipalRegister != value))
				{
					this.OnMunicipalRegisterChanging(value);
					this.SendPropertyChanging();
					this._MunicipalRegister = value;
					this.SendPropertyChanged("MunicipalRegister");
					this.OnMunicipalRegisterChanged();
				}
			}
		}
		
		[Association(Name="LegalEntityProfile_Company", Storage="_Companies", ThisKey="LegalEntityProfileId", OtherKey="LegalEntityProfileId")]
		[DataMember(Order=22, EmitDefaultValue=false)]
		public EntitySet<Company> Companies
		{
			get
			{
				if ((this.serializing 
							&& (this._Companies.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Companies;
			}
			set
			{
				this._Companies.Assign(value);
			}
		}
		
		[Association(Name="LegalEntityProfile_Customer", Storage="_Customers", ThisKey="LegalEntityProfileId", OtherKey="LegalEntityProfileId")]
		[DataMember(Order=23, EmitDefaultValue=false)]
		public EntitySet<Customer> Customers
		{
			get
			{
				if ((this.serializing 
							&& (this._Customers.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Customers;
			}
			set
			{
				this._Customers.Assign(value);
			}
		}
		
		[Association(Name="LegalEntityProfile_ProfileAddress", Storage="_ProfileAddresses", ThisKey="LegalEntityProfileId", OtherKey="LegalEntityProfileId")]
		[DataMember(Order=24, EmitDefaultValue=false)]
		public EntitySet<ProfileAddress> ProfileAddresses
		{
			get
			{
				if ((this.serializing 
							&& (this._ProfileAddresses.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ProfileAddresses;
			}
			set
			{
				this._ProfileAddresses.Assign(value);
			}
		}
		
		[Association(Name="LegalEntityProfile_Representant", Storage="_Representants", ThisKey="LegalEntityProfileId", OtherKey="LegalEntityProfileId")]
		[DataMember(Order=25, EmitDefaultValue=false)]
		public EntitySet<Representant> Representants
		{
			get
			{
				if ((this.serializing 
							&& (this._Representants.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Representants;
			}
			set
			{
				this._Representants.Assign(value);
			}
		}
		
		[Association(Name="LegalEntityProfile_Supplier", Storage="_Suppliers", ThisKey="LegalEntityProfileId", OtherKey="LegalEntityProfileId")]
		[DataMember(Order=26, EmitDefaultValue=false)]
		public EntitySet<Supplier> Suppliers
		{
			get
			{
				if ((this.serializing 
							&& (this._Suppliers.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Suppliers;
			}
			set
			{
				this._Suppliers.Assign(value);
			}
		}
		
		[Association(Name="LegalEntityProfile_Transporter", Storage="_Transporters", ThisKey="LegalEntityProfileId", OtherKey="LegalEntityProfileId")]
		[DataMember(Order=27, EmitDefaultValue=false)]
		public EntitySet<Transporter> Transporters
		{
			get
			{
				if ((this.serializing 
							&& (this._Transporters.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Transporters;
			}
			set
			{
				this._Transporters.Assign(value);
			}
		}
		
		[Association(Name="Address_LegalEntityProfile", Storage="_Address", ThisKey="PostalCode", OtherKey="PostalCode", IsForeignKey=true)]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.LegalEntityProfiles.Remove(this);
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.LegalEntityProfiles.Add(this);
						this._PostalCode = value.PostalCode;
					}
					else
					{
						this._PostalCode = default(string);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		[Association(Name="Branch_LegalEntityProfile", Storage="_Branch", ThisKey="BranchId", OtherKey="BranchId", IsForeignKey=true)]
		public Branch Branch
		{
			get
			{
				return this._Branch.Entity;
			}
			set
			{
				Branch previousValue = this._Branch.Entity;
				if (((previousValue != value) 
							|| (this._Branch.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Branch.Entity = null;
						previousValue.LegalEntityProfiles.Remove(this);
					}
					this._Branch.Entity = value;
					if ((value != null))
					{
						value.LegalEntityProfiles.Add(this);
						this._BranchId = value.BranchId;
					}
					else
					{
						this._BranchId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Branch");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Companies(Company entity)
		{
			this.SendPropertyChanging();
			entity.LegalEntityProfile = this;
		}
		
		private void detach_Companies(Company entity)
		{
			this.SendPropertyChanging();
			entity.LegalEntityProfile = null;
		}
		
		private void attach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.LegalEntityProfile = this;
		}
		
		private void detach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.LegalEntityProfile = null;
		}
		
		private void attach_ProfileAddresses(ProfileAddress entity)
		{
			this.SendPropertyChanging();
			entity.LegalEntityProfile = this;
		}
		
		private void detach_ProfileAddresses(ProfileAddress entity)
		{
			this.SendPropertyChanging();
			entity.LegalEntityProfile = null;
		}
		
		private void attach_Representants(Representant entity)
		{
			this.SendPropertyChanging();
			entity.LegalEntityProfile = this;
		}
		
		private void detach_Representants(Representant entity)
		{
			this.SendPropertyChanging();
			entity.LegalEntityProfile = null;
		}
		
		private void attach_Suppliers(Supplier entity)
		{
			this.SendPropertyChanging();
			entity.LegalEntityProfile = this;
		}
		
		private void detach_Suppliers(Supplier entity)
		{
			this.SendPropertyChanging();
			entity.LegalEntityProfile = null;
		}
		
		private void attach_Transporters(Transporter entity)
		{
			this.SendPropertyChanging();
			entity.LegalEntityProfile = this;
		}
		
		private void detach_Transporters(Transporter entity)
		{
			this.SendPropertyChanging();
			entity.LegalEntityProfile = null;
		}
		
		private void Initialize()
		{
			this._Companies = new EntitySet<Company>(new Action<Company>(this.attach_Companies), new Action<Company>(this.detach_Companies));
			this._Customers = new EntitySet<Customer>(new Action<Customer>(this.attach_Customers), new Action<Customer>(this.detach_Customers));
			this._ProfileAddresses = new EntitySet<ProfileAddress>(new Action<ProfileAddress>(this.attach_ProfileAddresses), new Action<ProfileAddress>(this.detach_ProfileAddresses));
			this._Representants = new EntitySet<Representant>(new Action<Representant>(this.attach_Representants), new Action<Representant>(this.detach_Representants));
			this._Suppliers = new EntitySet<Supplier>(new Action<Supplier>(this.attach_Suppliers), new Action<Supplier>(this.detach_Suppliers));
			this._Transporters = new EntitySet<Transporter>(new Action<Transporter>(this.attach_Transporters), new Action<Transporter>(this.detach_Transporters));
			this._Address = default(EntityRef<Address>);
			this._Branch = default(EntityRef<Branch>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.Manufacturer")]
	[DataContract()]
	public partial class Manufacturer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ManufacturerId;
		
		private string _Name;
		
		private System.Nullable<int> _BranchId;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Product> _Products;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnManufacturerIdChanging(int value);
    partial void OnManufacturerIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnBranchIdChanging(System.Nullable<int> value);
    partial void OnBranchIdChanged();
    #endregion
		
		public Manufacturer()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ManufacturerId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int ManufacturerId
		{
			get
			{
				return this._ManufacturerId;
			}
			set
			{
				if ((this._ManufacturerId != value))
				{
					this.OnManufacturerIdChanging(value);
					this.SendPropertyChanging();
					this._ManufacturerId = value;
					this.SendPropertyChanged("ManufacturerId");
					this.OnManufacturerIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_BranchId", DbType="Int")]
		[DataMember(Order=3)]
		public System.Nullable<int> BranchId
		{
			get
			{
				return this._BranchId;
			}
			set
			{
				if ((this._BranchId != value))
				{
					this.OnBranchIdChanging(value);
					this.SendPropertyChanging();
					this._BranchId = value;
					this.SendPropertyChanged("BranchId");
					this.OnBranchIdChanged();
				}
			}
		}
		
		[Association(Name="Manufacturer_Product", Storage="_Products", ThisKey="ManufacturerId", OtherKey="ManufacturerId")]
		[DataMember(Order=4, EmitDefaultValue=false)]
		public EntitySet<Product> Products
		{
			get
			{
				if ((this.serializing 
							&& (this._Products.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Manufacturer = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Manufacturer = null;
		}
		
		private void Initialize()
		{
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.MaritalStatus")]
	[DataContract()]
	public partial class MaritalStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MaritalStatusId;
		
		private string _Name;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Profile> _Profiles;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaritalStatusIdChanging(int value);
    partial void OnMaritalStatusIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public MaritalStatus()
		{
			this.Initialize();
		}
		
		[Column(Storage="_MaritalStatusId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int MaritalStatusId
		{
			get
			{
				return this._MaritalStatusId;
			}
			set
			{
				if ((this._MaritalStatusId != value))
				{
					this.OnMaritalStatusIdChanging(value);
					this.SendPropertyChanging();
					this._MaritalStatusId = value;
					this.SendPropertyChanged("MaritalStatusId");
					this.OnMaritalStatusIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="MaritalStatus_Profile", Storage="_Profiles", ThisKey="MaritalStatusId", OtherKey="MaritalStatusId")]
		[DataMember(Order=3, EmitDefaultValue=false)]
		public EntitySet<Profile> Profiles
		{
			get
			{
				if ((this.serializing 
							&& (this._Profiles.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Profiles;
			}
			set
			{
				this._Profiles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Profiles(Profile entity)
		{
			this.SendPropertyChanging();
			entity.MaritalStatus = this;
		}
		
		private void detach_Profiles(Profile entity)
		{
			this.SendPropertyChanging();
			entity.MaritalStatus = null;
		}
		
		private void Initialize()
		{
			this._Profiles = new EntitySet<Profile>(new Action<Profile>(this.attach_Profiles), new Action<Profile>(this.detach_Profiles));
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.Neighborhood")]
	[DataContract()]
	public partial class Neighborhood : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NeighborhoodId;
		
		private System.Nullable<int> _CityId;
		
		private string _Name;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<City> _City;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNeighborhoodIdChanging(int value);
    partial void OnNeighborhoodIdChanged();
    partial void OnCityIdChanging(System.Nullable<int> value);
    partial void OnCityIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Neighborhood()
		{
			this.Initialize();
		}
		
		[Column(Storage="_NeighborhoodId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int NeighborhoodId
		{
			get
			{
				return this._NeighborhoodId;
			}
			set
			{
				if ((this._NeighborhoodId != value))
				{
					this.OnNeighborhoodIdChanging(value);
					this.SendPropertyChanging();
					this._NeighborhoodId = value;
					this.SendPropertyChanged("NeighborhoodId");
					this.OnNeighborhoodIdChanged();
				}
			}
		}
		
		[Column(Storage="_CityId", DbType="Int")]
		[DataMember(Order=2)]
		public System.Nullable<int> CityId
		{
			get
			{
				return this._CityId;
			}
			set
			{
				if ((this._CityId != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIdChanging(value);
					this.SendPropertyChanging();
					this._CityId = value;
					this.SendPropertyChanged("CityId");
					this.OnCityIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50)")]
		[DataMember(Order=3)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="City_Neighborhood", Storage="_City", ThisKey="CityId", OtherKey="CityId", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.Neighborhoods.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.Neighborhoods.Add(this);
						this._CityId = value.CityId;
					}
					else
					{
						this._CityId = default(Nullable<int>);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._City = default(EntityRef<City>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.OrganizationLevel")]
	[DataContract()]
	public partial class OrganizationLevel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrganizationlevelId;
		
		private string _Name;
		
		private System.Nullable<int> _Parentid;
		
		private System.Nullable<int> _CompanyId;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Employee> _Employees;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<OrganizationLevel> _OrganizationLevels;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Company> _Company;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<OrganizationLevel> _OrganizationLevel1;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrganizationlevelIdChanging(int value);
    partial void OnOrganizationlevelIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnParentidChanging(System.Nullable<int> value);
    partial void OnParentidChanged();
    partial void OnCompanyIdChanging(System.Nullable<int> value);
    partial void OnCompanyIdChanged();
    #endregion
		
		public OrganizationLevel()
		{
			this.Initialize();
		}
		
		[Column(Storage="_OrganizationlevelId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int OrganizationlevelId
		{
			get
			{
				return this._OrganizationlevelId;
			}
			set
			{
				if ((this._OrganizationlevelId != value))
				{
					this.OnOrganizationlevelIdChanging(value);
					this.SendPropertyChanging();
					this._OrganizationlevelId = value;
					this.SendPropertyChanged("OrganizationlevelId");
					this.OnOrganizationlevelIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Parentid", DbType="Int")]
		[DataMember(Order=3)]
		public System.Nullable<int> Parentid
		{
			get
			{
				return this._Parentid;
			}
			set
			{
				if ((this._Parentid != value))
				{
					if (this._OrganizationLevel1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentidChanging(value);
					this.SendPropertyChanging();
					this._Parentid = value;
					this.SendPropertyChanged("Parentid");
					this.OnParentidChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int")]
		[DataMember(Order=4)]
		public System.Nullable<int> CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Association(Name="OrganizationLevel_Employee", Storage="_Employees", ThisKey="OrganizationlevelId", OtherKey="OrganizationlevelId")]
		[DataMember(Order=5, EmitDefaultValue=false)]
		public EntitySet<Employee> Employees
		{
			get
			{
				if ((this.serializing 
							&& (this._Employees.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		[Association(Name="OrganizationLevel_OrganizationLevel", Storage="_OrganizationLevels", ThisKey="OrganizationlevelId", OtherKey="Parentid")]
		[DataMember(Order=6, EmitDefaultValue=false)]
		public EntitySet<OrganizationLevel> OrganizationLevels
		{
			get
			{
				if ((this.serializing 
							&& (this._OrganizationLevels.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._OrganizationLevels;
			}
			set
			{
				this._OrganizationLevels.Assign(value);
			}
		}
		
		[Association(Name="Company_OrganizationLevel", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true, DeleteRule="CASCADE")]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.OrganizationLevels.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.OrganizationLevels.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[Association(Name="OrganizationLevel_OrganizationLevel", Storage="_OrganizationLevel1", ThisKey="Parentid", OtherKey="OrganizationlevelId", IsForeignKey=true)]
		public OrganizationLevel OrganizationLevel1
		{
			get
			{
				return this._OrganizationLevel1.Entity;
			}
			set
			{
				OrganizationLevel previousValue = this._OrganizationLevel1.Entity;
				if (((previousValue != value) 
							|| (this._OrganizationLevel1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrganizationLevel1.Entity = null;
						previousValue.OrganizationLevels.Remove(this);
					}
					this._OrganizationLevel1.Entity = value;
					if ((value != null))
					{
						value.OrganizationLevels.Add(this);
						this._Parentid = value.OrganizationlevelId;
					}
					else
					{
						this._Parentid = default(Nullable<int>);
					}
					this.SendPropertyChanged("OrganizationLevel1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.OrganizationLevel = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.OrganizationLevel = null;
		}
		
		private void attach_OrganizationLevels(OrganizationLevel entity)
		{
			this.SendPropertyChanging();
			entity.OrganizationLevel1 = this;
		}
		
		private void detach_OrganizationLevels(OrganizationLevel entity)
		{
			this.SendPropertyChanging();
			entity.OrganizationLevel1 = null;
		}
		
		private void Initialize()
		{
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			this._OrganizationLevels = new EntitySet<OrganizationLevel>(new Action<OrganizationLevel>(this.attach_OrganizationLevels), new Action<OrganizationLevel>(this.detach_OrganizationLevels));
			this._Company = default(EntityRef<Company>);
			this._OrganizationLevel1 = default(EntityRef<OrganizationLevel>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.OtherSchool")]
	[DataContract()]
	public partial class OtherSchool : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OtherSchoolId;
		
		private string _Name;
		
		private int _CompanyId;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<EmployeeOtherSchool> _EmployeeOtherSchools;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Company> _Company;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOtherSchoolIdChanging(int value);
    partial void OnOtherSchoolIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    #endregion
		
		public OtherSchool()
		{
			this.Initialize();
		}
		
		[Column(Storage="_OtherSchoolId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int OtherSchoolId
		{
			get
			{
				return this._OtherSchoolId;
			}
			set
			{
				if ((this._OtherSchoolId != value))
				{
					this.OnOtherSchoolIdChanging(value);
					this.SendPropertyChanging();
					this._OtherSchoolId = value;
					this.SendPropertyChanged("OtherSchoolId");
					this.OnOtherSchoolIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=3)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Association(Name="OtherSchool_EmployeeOtherSchool", Storage="_EmployeeOtherSchools", ThisKey="OtherSchoolId,CompanyId", OtherKey="OtherSchoolId,CompanyId")]
		[DataMember(Order=4, EmitDefaultValue=false)]
		public EntitySet<EmployeeOtherSchool> EmployeeOtherSchools
		{
			get
			{
				if ((this.serializing 
							&& (this._EmployeeOtherSchools.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._EmployeeOtherSchools;
			}
			set
			{
				this._EmployeeOtherSchools.Assign(value);
			}
		}
		
		[Association(Name="Company_OtherSchool", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.OtherSchools.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.OtherSchools.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EmployeeOtherSchools(EmployeeOtherSchool entity)
		{
			this.SendPropertyChanging();
			entity.OtherSchool = this;
		}
		
		private void detach_EmployeeOtherSchools(EmployeeOtherSchool entity)
		{
			this.SendPropertyChanging();
			entity.OtherSchool = null;
		}
		
		private void Initialize()
		{
			this._EmployeeOtherSchools = new EntitySet<EmployeeOtherSchool>(new Action<EmployeeOtherSchool>(this.attach_EmployeeOtherSchools), new Action<EmployeeOtherSchool>(this.detach_EmployeeOtherSchools));
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.Package")]
	[DataContract()]
	public partial class Package : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PackageId;
		
		private string _Name;
		
		private int _NumberUsers;
		
		private int _NumberItems;
		
		private decimal _Price;
		
		private System.DateTime _ModifiedDate;
		
		private System.Nullable<bool> _IsActive;
		
		private System.Nullable<decimal> _UserPerHourPrice;
		
		private System.Nullable<decimal> _ProductPrice;
		
		private System.Nullable<decimal> _SetupFee;
		
		private System.Nullable<decimal> _ComissionPerSale;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<PackageAdditional> _PackageAdditionals;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<PackageFunction> _PackageFunctions;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Plan> _Plans;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPackageIdChanging(int value);
    partial void OnPackageIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnNumberUsersChanging(int value);
    partial void OnNumberUsersChanged();
    partial void OnNumberItemsChanging(int value);
    partial void OnNumberItemsChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnIsActiveChanging(System.Nullable<bool> value);
    partial void OnIsActiveChanged();
    partial void OnUserPerHourPriceChanging(System.Nullable<decimal> value);
    partial void OnUserPerHourPriceChanged();
    partial void OnProductPriceChanging(System.Nullable<decimal> value);
    partial void OnProductPriceChanged();
    partial void OnSetupFeeChanging(System.Nullable<decimal> value);
    partial void OnSetupFeeChanged();
    partial void OnComissionPerSaleChanging(System.Nullable<decimal> value);
    partial void OnComissionPerSaleChanged();
    #endregion
		
		public Package()
		{
			this.Initialize();
		}
		
		[Column(Storage="_PackageId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int PackageId
		{
			get
			{
				return this._PackageId;
			}
			set
			{
				if ((this._PackageId != value))
				{
					this.OnPackageIdChanging(value);
					this.SendPropertyChanging();
					this._PackageId = value;
					this.SendPropertyChanged("PackageId");
					this.OnPackageIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_NumberUsers", DbType="Int NOT NULL")]
		[DataMember(Order=3)]
		public int NumberUsers
		{
			get
			{
				return this._NumberUsers;
			}
			set
			{
				if ((this._NumberUsers != value))
				{
					this.OnNumberUsersChanging(value);
					this.SendPropertyChanging();
					this._NumberUsers = value;
					this.SendPropertyChanged("NumberUsers");
					this.OnNumberUsersChanged();
				}
			}
		}
		
		[Column(Storage="_NumberItems", DbType="Int NOT NULL")]
		[DataMember(Order=4)]
		public int NumberItems
		{
			get
			{
				return this._NumberItems;
			}
			set
			{
				if ((this._NumberItems != value))
				{
					this.OnNumberItemsChanging(value);
					this.SendPropertyChanging();
					this._NumberItems = value;
					this.SendPropertyChanged("NumberItems");
					this.OnNumberItemsChanged();
				}
			}
		}
		
		[Column(Storage="_Price", DbType="Decimal(18,2) NOT NULL")]
		[DataMember(Order=5)]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		[DataMember(Order=6)]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit")]
		[DataMember(Order=7)]
		public System.Nullable<bool> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[Column(Storage="_UserPerHourPrice", DbType="Decimal(18,2)")]
		[DataMember(Order=8)]
		public System.Nullable<decimal> UserPerHourPrice
		{
			get
			{
				return this._UserPerHourPrice;
			}
			set
			{
				if ((this._UserPerHourPrice != value))
				{
					this.OnUserPerHourPriceChanging(value);
					this.SendPropertyChanging();
					this._UserPerHourPrice = value;
					this.SendPropertyChanged("UserPerHourPrice");
					this.OnUserPerHourPriceChanged();
				}
			}
		}
		
		[Column(Storage="_ProductPrice", DbType="Decimal(18,2)")]
		[DataMember(Order=9)]
		public System.Nullable<decimal> ProductPrice
		{
			get
			{
				return this._ProductPrice;
			}
			set
			{
				if ((this._ProductPrice != value))
				{
					this.OnProductPriceChanging(value);
					this.SendPropertyChanging();
					this._ProductPrice = value;
					this.SendPropertyChanged("ProductPrice");
					this.OnProductPriceChanged();
				}
			}
		}
		
		[Column(Storage="_SetupFee", DbType="Decimal(18,2)")]
		[DataMember(Order=10)]
		public System.Nullable<decimal> SetupFee
		{
			get
			{
				return this._SetupFee;
			}
			set
			{
				if ((this._SetupFee != value))
				{
					this.OnSetupFeeChanging(value);
					this.SendPropertyChanging();
					this._SetupFee = value;
					this.SendPropertyChanged("SetupFee");
					this.OnSetupFeeChanged();
				}
			}
		}
		
		[Column(Storage="_ComissionPerSale", DbType="Decimal(18,2)")]
		[DataMember(Order=11)]
		public System.Nullable<decimal> ComissionPerSale
		{
			get
			{
				return this._ComissionPerSale;
			}
			set
			{
				if ((this._ComissionPerSale != value))
				{
					this.OnComissionPerSaleChanging(value);
					this.SendPropertyChanging();
					this._ComissionPerSale = value;
					this.SendPropertyChanged("ComissionPerSale");
					this.OnComissionPerSaleChanged();
				}
			}
		}
		
		[Association(Name="Package_PackageAdditional", Storage="_PackageAdditionals", ThisKey="PackageId", OtherKey="PackageId")]
		[DataMember(Order=12, EmitDefaultValue=false)]
		public EntitySet<PackageAdditional> PackageAdditionals
		{
			get
			{
				if ((this.serializing 
							&& (this._PackageAdditionals.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._PackageAdditionals;
			}
			set
			{
				this._PackageAdditionals.Assign(value);
			}
		}
		
		[Association(Name="Package_PackageFunction", Storage="_PackageFunctions", ThisKey="PackageId", OtherKey="PackageId")]
		[DataMember(Order=13, EmitDefaultValue=false)]
		public EntitySet<PackageFunction> PackageFunctions
		{
			get
			{
				if ((this.serializing 
							&& (this._PackageFunctions.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._PackageFunctions;
			}
			set
			{
				this._PackageFunctions.Assign(value);
			}
		}
		
		[Association(Name="Package_Plan", Storage="_Plans", ThisKey="PackageId", OtherKey="PackageId")]
		[DataMember(Order=14, EmitDefaultValue=false)]
		public EntitySet<Plan> Plans
		{
			get
			{
				if ((this.serializing 
							&& (this._Plans.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Plans;
			}
			set
			{
				this._Plans.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PackageAdditionals(PackageAdditional entity)
		{
			this.SendPropertyChanging();
			entity.Package = this;
		}
		
		private void detach_PackageAdditionals(PackageAdditional entity)
		{
			this.SendPropertyChanging();
			entity.Package = null;
		}
		
		private void attach_PackageFunctions(PackageFunction entity)
		{
			this.SendPropertyChanging();
			entity.Package = this;
		}
		
		private void detach_PackageFunctions(PackageFunction entity)
		{
			this.SendPropertyChanging();
			entity.Package = null;
		}
		
		private void attach_Plans(Plan entity)
		{
			this.SendPropertyChanging();
			entity.Package = this;
		}
		
		private void detach_Plans(Plan entity)
		{
			this.SendPropertyChanging();
			entity.Package = null;
		}
		
		private void Initialize()
		{
			this._PackageAdditionals = new EntitySet<PackageAdditional>(new Action<PackageAdditional>(this.attach_PackageAdditionals), new Action<PackageAdditional>(this.detach_PackageAdditionals));
			this._PackageFunctions = new EntitySet<PackageFunction>(new Action<PackageFunction>(this.attach_PackageFunctions), new Action<PackageFunction>(this.detach_PackageFunctions));
			this._Plans = new EntitySet<Plan>(new Action<Plan>(this.attach_Plans), new Action<Plan>(this.detach_Plans));
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.PackageAdditional")]
	[DataContract()]
	public partial class PackageAdditional : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AddonId;
		
		private int _PackageId;
		
		private System.DateTime _StartDate;
		
		private System.DateTime _EndDate;
		
		private int _CompanyId;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Company> _Company;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Package> _Package;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAddonIdChanging(int value);
    partial void OnAddonIdChanged();
    partial void OnPackageIdChanging(int value);
    partial void OnPackageIdChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    #endregion
		
		public PackageAdditional()
		{
			this.Initialize();
		}
		
		[Column(Storage="_AddonId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int AddonId
		{
			get
			{
				return this._AddonId;
			}
			set
			{
				if ((this._AddonId != value))
				{
					this.OnAddonIdChanging(value);
					this.SendPropertyChanging();
					this._AddonId = value;
					this.SendPropertyChanged("AddonId");
					this.OnAddonIdChanged();
				}
			}
		}
		
		[Column(Storage="_PackageId", DbType="Int NOT NULL")]
		[DataMember(Order=2)]
		public int PackageId
		{
			get
			{
				return this._PackageId;
			}
			set
			{
				if ((this._PackageId != value))
				{
					if (this._Package.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPackageIdChanging(value);
					this.SendPropertyChanging();
					this._PackageId = value;
					this.SendPropertyChanged("PackageId");
					this.OnPackageIdChanged();
				}
			}
		}
		
		[Column(Storage="_StartDate", DbType="DateTime NOT NULL")]
		[DataMember(Order=3)]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime NOT NULL")]
		[DataMember(Order=4)]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL")]
		[DataMember(Order=5)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Association(Name="Company_PackageAdditional", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.PackageAdditionals.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.PackageAdditionals.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[Association(Name="Package_PackageAdditional", Storage="_Package", ThisKey="PackageId", OtherKey="PackageId", IsForeignKey=true)]
		public Package Package
		{
			get
			{
				return this._Package.Entity;
			}
			set
			{
				Package previousValue = this._Package.Entity;
				if (((previousValue != value) 
							|| (this._Package.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Package.Entity = null;
						previousValue.PackageAdditionals.Remove(this);
					}
					this._Package.Entity = value;
					if ((value != null))
					{
						value.PackageAdditionals.Add(this);
						this._PackageId = value.PackageId;
					}
					else
					{
						this._PackageId = default(int);
					}
					this.SendPropertyChanged("Package");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Company = default(EntityRef<Company>);
			this._Package = default(EntityRef<Package>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.PackageFunction")]
	[DataContract()]
	public partial class PackageFunction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PackageId;
		
		private int _FunctionId;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Package> _Package;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Function> _Function;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPackageIdChanging(int value);
    partial void OnPackageIdChanged();
    partial void OnFunctionIdChanging(int value);
    partial void OnFunctionIdChanged();
    #endregion
		
		public PackageFunction()
		{
			this.Initialize();
		}
		
		[Column(Storage="_PackageId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=1)]
		public int PackageId
		{
			get
			{
				return this._PackageId;
			}
			set
			{
				if ((this._PackageId != value))
				{
					if (this._Package.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPackageIdChanging(value);
					this.SendPropertyChanging();
					this._PackageId = value;
					this.SendPropertyChanged("PackageId");
					this.OnPackageIdChanged();
				}
			}
		}
		
		[Column(Storage="_FunctionId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=2)]
		public int FunctionId
		{
			get
			{
				return this._FunctionId;
			}
			set
			{
				if ((this._FunctionId != value))
				{
					if (this._Function.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFunctionIdChanging(value);
					this.SendPropertyChanging();
					this._FunctionId = value;
					this.SendPropertyChanged("FunctionId");
					this.OnFunctionIdChanged();
				}
			}
		}
		
		[Association(Name="Package_PackageFunction", Storage="_Package", ThisKey="PackageId", OtherKey="PackageId", IsForeignKey=true)]
		public Package Package
		{
			get
			{
				return this._Package.Entity;
			}
			set
			{
				Package previousValue = this._Package.Entity;
				if (((previousValue != value) 
							|| (this._Package.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Package.Entity = null;
						previousValue.PackageFunctions.Remove(this);
					}
					this._Package.Entity = value;
					if ((value != null))
					{
						value.PackageFunctions.Add(this);
						this._PackageId = value.PackageId;
					}
					else
					{
						this._PackageId = default(int);
					}
					this.SendPropertyChanged("Package");
				}
			}
		}
		
		[Association(Name="Function_PackageFunction", Storage="_Function", ThisKey="FunctionId", OtherKey="FunctionId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Function Function
		{
			get
			{
				return this._Function.Entity;
			}
			set
			{
				Function previousValue = this._Function.Entity;
				if (((previousValue != value) 
							|| (this._Function.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Function.Entity = null;
						previousValue.PackageFunctions.Remove(this);
					}
					this._Function.Entity = value;
					if ((value != null))
					{
						value.PackageFunctions.Add(this);
						this._FunctionId = value.FunctionId;
					}
					else
					{
						this._FunctionId = default(int);
					}
					this.SendPropertyChanged("Function");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Package = default(EntityRef<Package>);
			this._Function = default(EntityRef<Function>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.PageTag")]
	[DataContract()]
	public partial class PageTag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PageTagId;
		
		private string _Name;
		
		private int _WebPageId;
		
		private int _CompanyId;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<WebPage> _WebPage;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPageTagIdChanging(int value);
    partial void OnPageTagIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnWebPageIdChanging(int value);
    partial void OnWebPageIdChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    #endregion
		
		public PageTag()
		{
			this.Initialize();
		}
		
		[Column(Storage="_PageTagId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int PageTagId
		{
			get
			{
				return this._PageTagId;
			}
			set
			{
				if ((this._PageTagId != value))
				{
					this.OnPageTagIdChanging(value);
					this.SendPropertyChanging();
					this._PageTagId = value;
					this.SendPropertyChanged("PageTagId");
					this.OnPageTagIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(1024) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_WebPageId", DbType="Int NOT NULL")]
		[DataMember(Order=3)]
		public int WebPageId
		{
			get
			{
				return this._WebPageId;
			}
			set
			{
				if ((this._WebPageId != value))
				{
					if (this._WebPage.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWebPageIdChanging(value);
					this.SendPropertyChanging();
					this._WebPageId = value;
					this.SendPropertyChanged("WebPageId");
					this.OnWebPageIdChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL")]
		[DataMember(Order=4)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._WebPage.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Association(Name="WebPage_PageTag", Storage="_WebPage", ThisKey="WebPageId,CompanyId", OtherKey="WebPageId,CompanyId", IsForeignKey=true)]
		public WebPage WebPage
		{
			get
			{
				return this._WebPage.Entity;
			}
			set
			{
				WebPage previousValue = this._WebPage.Entity;
				if (((previousValue != value) 
							|| (this._WebPage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WebPage.Entity = null;
						previousValue.PageTags.Remove(this);
					}
					this._WebPage.Entity = value;
					if ((value != null))
					{
						value.PageTags.Add(this);
						this._WebPageId = value.WebPageId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._WebPageId = default(int);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("WebPage");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._WebPage = default(EntityRef<WebPage>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.Parcel")]
	[DataContract()]
	public partial class Parcel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ParcelId;
		
		private System.DateTime _DueDate;
		
		private System.Nullable<System.DateTime> _EffectedDate;
		
		private decimal _Amount;
		
		private System.Nullable<decimal> _EffectedAmount;
		
		private string _Description;
		
		private System.Nullable<int> _InvoiceId;
		
		private System.Nullable<int> _BillId;
		
		private System.Nullable<int> _AccountId;
		
		private System.Nullable<bool> _IsRecurrent;
		
		private System.Nullable<int> _RecurrentPeriod;
		
		private int _CompanyId;
		
		private System.Nullable<int> _PaymentMethodId;
		
		private string _IdentificationNumber;
		
		private System.Nullable<int> _FinancierOperationId;
		
		private System.Nullable<System.DateTime> _OperationDate;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Company> _Company;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Invoice> _Invoice;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Bill> _Bill;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Account> _Account;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<FinancierOperation> _FinancierOperation;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<PaymentMethod> _PaymentMethod;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnParcelIdChanging(int value);
    partial void OnParcelIdChanged();
    partial void OnDueDateChanging(System.DateTime value);
    partial void OnDueDateChanged();
    partial void OnEffectedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEffectedDateChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnEffectedAmountChanging(System.Nullable<decimal> value);
    partial void OnEffectedAmountChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnInvoiceIdChanging(System.Nullable<int> value);
    partial void OnInvoiceIdChanged();
    partial void OnBillIdChanging(System.Nullable<int> value);
    partial void OnBillIdChanged();
    partial void OnAccountIdChanging(System.Nullable<int> value);
    partial void OnAccountIdChanged();
    partial void OnIsRecurrentChanging(System.Nullable<bool> value);
    partial void OnIsRecurrentChanged();
    partial void OnRecurrentPeriodChanging(System.Nullable<int> value);
    partial void OnRecurrentPeriodChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnPaymentMethodIdChanging(System.Nullable<int> value);
    partial void OnPaymentMethodIdChanged();
    partial void OnIdentificationNumberChanging(string value);
    partial void OnIdentificationNumberChanged();
    partial void OnFinancierOperationIdChanging(System.Nullable<int> value);
    partial void OnFinancierOperationIdChanged();
    partial void OnOperationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnOperationDateChanged();
    #endregion
		
		public Parcel()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ParcelId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int ParcelId
		{
			get
			{
				return this._ParcelId;
			}
			set
			{
				if ((this._ParcelId != value))
				{
					this.OnParcelIdChanging(value);
					this.SendPropertyChanging();
					this._ParcelId = value;
					this.SendPropertyChanged("ParcelId");
					this.OnParcelIdChanged();
				}
			}
		}
		
		[Column(Storage="_DueDate", DbType="DateTime NOT NULL")]
		[DataMember(Order=2)]
		public System.DateTime DueDate
		{
			get
			{
				return this._DueDate;
			}
			set
			{
				if ((this._DueDate != value))
				{
					this.OnDueDateChanging(value);
					this.SendPropertyChanging();
					this._DueDate = value;
					this.SendPropertyChanged("DueDate");
					this.OnDueDateChanged();
				}
			}
		}
		
		[Column(Storage="_EffectedDate", DbType="DateTime")]
		[DataMember(Order=3)]
		public System.Nullable<System.DateTime> EffectedDate
		{
			get
			{
				return this._EffectedDate;
			}
			set
			{
				if ((this._EffectedDate != value))
				{
					this.OnEffectedDateChanging(value);
					this.SendPropertyChanging();
					this._EffectedDate = value;
					this.SendPropertyChanged("EffectedDate");
					this.OnEffectedDateChanged();
				}
			}
		}
		
		[Column(Storage="_Amount", DbType="Decimal(18,2) NOT NULL")]
		[DataMember(Order=4)]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[Column(Storage="_EffectedAmount", DbType="Decimal(18,2)")]
		[DataMember(Order=5)]
		public System.Nullable<decimal> EffectedAmount
		{
			get
			{
				return this._EffectedAmount;
			}
			set
			{
				if ((this._EffectedAmount != value))
				{
					this.OnEffectedAmountChanging(value);
					this.SendPropertyChanging();
					this._EffectedAmount = value;
					this.SendPropertyChanged("EffectedAmount");
					this.OnEffectedAmountChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(500)")]
		[DataMember(Order=6)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_InvoiceId", DbType="Int")]
		[DataMember(Order=7)]
		public System.Nullable<int> InvoiceId
		{
			get
			{
				return this._InvoiceId;
			}
			set
			{
				if ((this._InvoiceId != value))
				{
					if (this._Invoice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInvoiceIdChanging(value);
					this.SendPropertyChanging();
					this._InvoiceId = value;
					this.SendPropertyChanged("InvoiceId");
					this.OnInvoiceIdChanged();
				}
			}
		}
		
		[Column(Storage="_BillId", DbType="Int")]
		[DataMember(Order=8)]
		public System.Nullable<int> BillId
		{
			get
			{
				return this._BillId;
			}
			set
			{
				if ((this._BillId != value))
				{
					if (this._Bill.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBillIdChanging(value);
					this.SendPropertyChanging();
					this._BillId = value;
					this.SendPropertyChanged("BillId");
					this.OnBillIdChanged();
				}
			}
		}
		
		[Column(Storage="_AccountId", DbType="Int")]
		[DataMember(Order=9)]
		public System.Nullable<int> AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[Column(Storage="_IsRecurrent", DbType="Bit")]
		[DataMember(Order=10)]
		public System.Nullable<bool> IsRecurrent
		{
			get
			{
				return this._IsRecurrent;
			}
			set
			{
				if ((this._IsRecurrent != value))
				{
					this.OnIsRecurrentChanging(value);
					this.SendPropertyChanging();
					this._IsRecurrent = value;
					this.SendPropertyChanged("IsRecurrent");
					this.OnIsRecurrentChanged();
				}
			}
		}
		
		[Column(Storage="_RecurrentPeriod", DbType="Int")]
		[DataMember(Order=11)]
		public System.Nullable<int> RecurrentPeriod
		{
			get
			{
				return this._RecurrentPeriod;
			}
			set
			{
				if ((this._RecurrentPeriod != value))
				{
					this.OnRecurrentPeriodChanging(value);
					this.SendPropertyChanging();
					this._RecurrentPeriod = value;
					this.SendPropertyChanged("RecurrentPeriod");
					this.OnRecurrentPeriodChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL")]
		[DataMember(Order=12)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Column(Storage="_PaymentMethodId", DbType="Int")]
		[DataMember(Order=13)]
		public System.Nullable<int> PaymentMethodId
		{
			get
			{
				return this._PaymentMethodId;
			}
			set
			{
				if ((this._PaymentMethodId != value))
				{
					if (this._PaymentMethod.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPaymentMethodIdChanging(value);
					this.SendPropertyChanging();
					this._PaymentMethodId = value;
					this.SendPropertyChanged("PaymentMethodId");
					this.OnPaymentMethodIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdentificationNumber", DbType="VarChar(50)")]
		[DataMember(Order=14)]
		public string IdentificationNumber
		{
			get
			{
				return this._IdentificationNumber;
			}
			set
			{
				if ((this._IdentificationNumber != value))
				{
					this.OnIdentificationNumberChanging(value);
					this.SendPropertyChanging();
					this._IdentificationNumber = value;
					this.SendPropertyChanged("IdentificationNumber");
					this.OnIdentificationNumberChanged();
				}
			}
		}
		
		[Column(Storage="_FinancierOperationId", DbType="Int")]
		[DataMember(Order=15)]
		public System.Nullable<int> FinancierOperationId
		{
			get
			{
				return this._FinancierOperationId;
			}
			set
			{
				if ((this._FinancierOperationId != value))
				{
					if (this._FinancierOperation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFinancierOperationIdChanging(value);
					this.SendPropertyChanging();
					this._FinancierOperationId = value;
					this.SendPropertyChanged("FinancierOperationId");
					this.OnFinancierOperationIdChanged();
				}
			}
		}
		
		[Column(Storage="_OperationDate", DbType="DateTime")]
		[DataMember(Order=16)]
		public System.Nullable<System.DateTime> OperationDate
		{
			get
			{
				return this._OperationDate;
			}
			set
			{
				if ((this._OperationDate != value))
				{
					this.OnOperationDateChanging(value);
					this.SendPropertyChanging();
					this._OperationDate = value;
					this.SendPropertyChanged("OperationDate");
					this.OnOperationDateChanged();
				}
			}
		}
		
		[Association(Name="Company_Parcel", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Parcels.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Parcels.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[Association(Name="Invoice_Parcel", Storage="_Invoice", ThisKey="InvoiceId,CompanyId", OtherKey="InvoiceId,CompanyId", IsForeignKey=true)]
		public Invoice Invoice
		{
			get
			{
				return this._Invoice.Entity;
			}
			set
			{
				Invoice previousValue = this._Invoice.Entity;
				if (((previousValue != value) 
							|| (this._Invoice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Invoice.Entity = null;
						previousValue.Parcels.Remove(this);
					}
					this._Invoice.Entity = value;
					if ((value != null))
					{
						value.Parcels.Add(this);
						this._InvoiceId = value.InvoiceId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._InvoiceId = default(Nullable<int>);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Invoice");
				}
			}
		}
		
		[Association(Name="Bill_Parcel", Storage="_Bill", ThisKey="BillId,CompanyId", OtherKey="BillId,CompanyId", IsForeignKey=true)]
		public Bill Bill
		{
			get
			{
				return this._Bill.Entity;
			}
			set
			{
				Bill previousValue = this._Bill.Entity;
				if (((previousValue != value) 
							|| (this._Bill.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bill.Entity = null;
						previousValue.Parcels.Remove(this);
					}
					this._Bill.Entity = value;
					if ((value != null))
					{
						value.Parcels.Add(this);
						this._BillId = value.BillId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._BillId = default(Nullable<int>);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Bill");
				}
			}
		}
		
		[Association(Name="Account_Parcel", Storage="_Account", ThisKey="AccountId,CompanyId", OtherKey="AccountId,CompanyId", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Parcels.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Parcels.Add(this);
						this._AccountId = value.AccountId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._AccountId = default(Nullable<int>);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[Association(Name="FinancierOperation_Parcel", Storage="_FinancierOperation", ThisKey="FinancierOperationId,CompanyId", OtherKey="FinancierOperationId,CompanyId", IsForeignKey=true)]
		public FinancierOperation FinancierOperation
		{
			get
			{
				return this._FinancierOperation.Entity;
			}
			set
			{
				FinancierOperation previousValue = this._FinancierOperation.Entity;
				if (((previousValue != value) 
							|| (this._FinancierOperation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FinancierOperation.Entity = null;
						previousValue.Parcels.Remove(this);
					}
					this._FinancierOperation.Entity = value;
					if ((value != null))
					{
						value.Parcels.Add(this);
						this._FinancierOperationId = value.FinancierOperationId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._FinancierOperationId = default(Nullable<int>);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("FinancierOperation");
				}
			}
		}
		
		[Association(Name="PaymentMethod_Parcel", Storage="_PaymentMethod", ThisKey="PaymentMethodId", OtherKey="PaymentMethodId", IsForeignKey=true)]
		public PaymentMethod PaymentMethod
		{
			get
			{
				return this._PaymentMethod.Entity;
			}
			set
			{
				PaymentMethod previousValue = this._PaymentMethod.Entity;
				if (((previousValue != value) 
							|| (this._PaymentMethod.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PaymentMethod.Entity = null;
						previousValue.Parcels.Remove(this);
					}
					this._PaymentMethod.Entity = value;
					if ((value != null))
					{
						value.Parcels.Add(this);
						this._PaymentMethodId = value.PaymentMethodId;
					}
					else
					{
						this._PaymentMethodId = default(Nullable<int>);
					}
					this.SendPropertyChanged("PaymentMethod");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Company = default(EntityRef<Company>);
			this._Invoice = default(EntityRef<Invoice>);
			this._Bill = default(EntityRef<Bill>);
			this._Account = default(EntityRef<Account>);
			this._FinancierOperation = default(EntityRef<FinancierOperation>);
			this._PaymentMethod = default(EntityRef<PaymentMethod>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.PaymentMethod")]
	[DataContract()]
	public partial class PaymentMethod : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PaymentMethodId;
		
		private string _Name;
		
		private string _TransactionUrl;
		
		private string _ConfigUrl;
		
		private System.DateTime _ModifiedDate;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<FinancierOperation> _FinancierOperations;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Parcel> _Parcels;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPaymentMethodIdChanging(int value);
    partial void OnPaymentMethodIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTransactionUrlChanging(string value);
    partial void OnTransactionUrlChanged();
    partial void OnConfigUrlChanging(string value);
    partial void OnConfigUrlChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public PaymentMethod()
		{
			this.Initialize();
		}
		
		[Column(Storage="_PaymentMethodId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int PaymentMethodId
		{
			get
			{
				return this._PaymentMethodId;
			}
			set
			{
				if ((this._PaymentMethodId != value))
				{
					this.OnPaymentMethodIdChanging(value);
					this.SendPropertyChanging();
					this._PaymentMethodId = value;
					this.SendPropertyChanged("PaymentMethodId");
					this.OnPaymentMethodIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_TransactionUrl", DbType="VarChar(512)")]
		[DataMember(Order=3)]
		public string TransactionUrl
		{
			get
			{
				return this._TransactionUrl;
			}
			set
			{
				if ((this._TransactionUrl != value))
				{
					this.OnTransactionUrlChanging(value);
					this.SendPropertyChanging();
					this._TransactionUrl = value;
					this.SendPropertyChanged("TransactionUrl");
					this.OnTransactionUrlChanged();
				}
			}
		}
		
		[Column(Storage="_ConfigUrl", DbType="VarChar(512)")]
		[DataMember(Order=4)]
		public string ConfigUrl
		{
			get
			{
				return this._ConfigUrl;
			}
			set
			{
				if ((this._ConfigUrl != value))
				{
					this.OnConfigUrlChanging(value);
					this.SendPropertyChanging();
					this._ConfigUrl = value;
					this.SendPropertyChanged("ConfigUrl");
					this.OnConfigUrlChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		[DataMember(Order=5)]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Association(Name="PaymentMethod_FinancierOperation", Storage="_FinancierOperations", ThisKey="PaymentMethodId", OtherKey="PaymentMethodId")]
		[DataMember(Order=6, EmitDefaultValue=false)]
		public EntitySet<FinancierOperation> FinancierOperations
		{
			get
			{
				if ((this.serializing 
							&& (this._FinancierOperations.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._FinancierOperations;
			}
			set
			{
				this._FinancierOperations.Assign(value);
			}
		}
		
		[Association(Name="PaymentMethod_Parcel", Storage="_Parcels", ThisKey="PaymentMethodId", OtherKey="PaymentMethodId")]
		[DataMember(Order=7, EmitDefaultValue=false)]
		public EntitySet<Parcel> Parcels
		{
			get
			{
				if ((this.serializing 
							&& (this._Parcels.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Parcels;
			}
			set
			{
				this._Parcels.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FinancierOperations(FinancierOperation entity)
		{
			this.SendPropertyChanging();
			entity.PaymentMethod = this;
		}
		
		private void detach_FinancierOperations(FinancierOperation entity)
		{
			this.SendPropertyChanging();
			entity.PaymentMethod = null;
		}
		
		private void attach_Parcels(Parcel entity)
		{
			this.SendPropertyChanging();
			entity.PaymentMethod = this;
		}
		
		private void detach_Parcels(Parcel entity)
		{
			this.SendPropertyChanging();
			entity.PaymentMethod = null;
		}
		
		private void Initialize()
		{
			this._FinancierOperations = new EntitySet<FinancierOperation>(new Action<FinancierOperation>(this.attach_FinancierOperations), new Action<FinancierOperation>(this.detach_FinancierOperations));
			this._Parcels = new EntitySet<Parcel>(new Action<Parcel>(this.attach_Parcels), new Action<Parcel>(this.detach_Parcels));
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.Permissions")]
	[DataContract()]
	public partial class Permission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FunctionId;
		
		private int _RoleId;
		
		private System.Nullable<int> _PermissionTypeId;
		
		private int _CompanyId;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Function> _Function;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Company> _Company;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<PermissionType> _PermissionType;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFunctionIdChanging(int value);
    partial void OnFunctionIdChanged();
    partial void OnRoleIdChanging(int value);
    partial void OnRoleIdChanged();
    partial void OnPermissionTypeIdChanging(System.Nullable<int> value);
    partial void OnPermissionTypeIdChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    #endregion
		
		public Permission()
		{
			this.Initialize();
		}
		
		[Column(Storage="_FunctionId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=1)]
		public int FunctionId
		{
			get
			{
				return this._FunctionId;
			}
			set
			{
				if ((this._FunctionId != value))
				{
					if (this._Function.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFunctionIdChanging(value);
					this.SendPropertyChanging();
					this._FunctionId = value;
					this.SendPropertyChanged("FunctionId");
					this.OnFunctionIdChanged();
				}
			}
		}
		
		[Column(Storage="_RoleId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=2)]
		public int RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[Column(Storage="_PermissionTypeId", DbType="Int")]
		[DataMember(Order=3)]
		public System.Nullable<int> PermissionTypeId
		{
			get
			{
				return this._PermissionTypeId;
			}
			set
			{
				if ((this._PermissionTypeId != value))
				{
					if (this._PermissionType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPermissionTypeIdChanging(value);
					this.SendPropertyChanging();
					this._PermissionTypeId = value;
					this.SendPropertyChanged("PermissionTypeId");
					this.OnPermissionTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=4)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Association(Name="Function_Permission", Storage="_Function", ThisKey="FunctionId", OtherKey="FunctionId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Function Function
		{
			get
			{
				return this._Function.Entity;
			}
			set
			{
				Function previousValue = this._Function.Entity;
				if (((previousValue != value) 
							|| (this._Function.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Function.Entity = null;
						previousValue.Permissions.Remove(this);
					}
					this._Function.Entity = value;
					if ((value != null))
					{
						value.Permissions.Add(this);
						this._FunctionId = value.FunctionId;
					}
					else
					{
						this._FunctionId = default(int);
					}
					this.SendPropertyChanged("Function");
				}
			}
		}
		
		[Association(Name="Company_Permission", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Permissions.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Permissions.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[Association(Name="PermissionType_Permission", Storage="_PermissionType", ThisKey="PermissionTypeId", OtherKey="PermissionTypeId", IsForeignKey=true)]
		public PermissionType PermissionType
		{
			get
			{
				return this._PermissionType.Entity;
			}
			set
			{
				PermissionType previousValue = this._PermissionType.Entity;
				if (((previousValue != value) 
							|| (this._PermissionType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PermissionType.Entity = null;
						previousValue.Permissions.Remove(this);
					}
					this._PermissionType.Entity = value;
					if ((value != null))
					{
						value.Permissions.Add(this);
						this._PermissionTypeId = value.PermissionTypeId;
					}
					else
					{
						this._PermissionTypeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("PermissionType");
				}
			}
		}
		
		[Association(Name="Role_Permission", Storage="_Role", ThisKey="RoleId,CompanyId", OtherKey="RoleId,CompanyId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.Permissions.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.Permissions.Add(this);
						this._RoleId = value.RoleId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._RoleId = default(int);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Function = default(EntityRef<Function>);
			this._Company = default(EntityRef<Company>);
			this._PermissionType = default(EntityRef<PermissionType>);
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.PermissionType")]
	[DataContract()]
	public partial class PermissionType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PermissionTypeId;
		
		private string _Name;
		
		private string _Description;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Permission> _Permissions;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPermissionTypeIdChanging(int value);
    partial void OnPermissionTypeIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public PermissionType()
		{
			this.Initialize();
		}
		
		[Column(Storage="_PermissionTypeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int PermissionTypeId
		{
			get
			{
				return this._PermissionTypeId;
			}
			set
			{
				if ((this._PermissionTypeId != value))
				{
					this.OnPermissionTypeIdChanging(value);
					this.SendPropertyChanging();
					this._PermissionTypeId = value;
					this.SendPropertyChanged("PermissionTypeId");
					this.OnPermissionTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(32) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(512)")]
		[DataMember(Order=3)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="PermissionType_Permission", Storage="_Permissions", ThisKey="PermissionTypeId", OtherKey="PermissionTypeId")]
		[DataMember(Order=4, EmitDefaultValue=false)]
		public EntitySet<Permission> Permissions
		{
			get
			{
				if ((this.serializing 
							&& (this._Permissions.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Permissions;
			}
			set
			{
				this._Permissions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Permissions(Permission entity)
		{
			this.SendPropertyChanging();
			entity.PermissionType = this;
		}
		
		private void detach_Permissions(Permission entity)
		{
			this.SendPropertyChanging();
			entity.PermissionType = null;
		}
		
		private void Initialize()
		{
			this._Permissions = new EntitySet<Permission>(new Action<Permission>(this.attach_Permissions), new Action<Permission>(this.detach_Permissions));
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.Plans")]
	[DataContract()]
	public partial class Plan : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PlanId;
		
		private string _Name;
		
		private System.DateTime _AvailableStartDate;
		
		private System.DateTime _AvailableEndDate;
		
		private System.DateTime _ModifiedDate;
		
		private int _PackageId;
		
		private System.Nullable<int> _BranchId;
		
		private System.Nullable<int> _ApplicationId;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Company> _Companies;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Branch> _Branch;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Package> _Package;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Application> _Application;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlanIdChanging(int value);
    partial void OnPlanIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAvailableStartDateChanging(System.DateTime value);
    partial void OnAvailableStartDateChanged();
    partial void OnAvailableEndDateChanging(System.DateTime value);
    partial void OnAvailableEndDateChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnPackageIdChanging(int value);
    partial void OnPackageIdChanged();
    partial void OnBranchIdChanging(System.Nullable<int> value);
    partial void OnBranchIdChanged();
    partial void OnApplicationIdChanging(System.Nullable<int> value);
    partial void OnApplicationIdChanged();
    #endregion
		
		public Plan()
		{
			this.Initialize();
		}
		
		[Column(Storage="_PlanId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int PlanId
		{
			get
			{
				return this._PlanId;
			}
			set
			{
				if ((this._PlanId != value))
				{
					this.OnPlanIdChanging(value);
					this.SendPropertyChanging();
					this._PlanId = value;
					this.SendPropertyChanged("PlanId");
					this.OnPlanIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_AvailableStartDate", DbType="DateTime NOT NULL")]
		[DataMember(Order=3)]
		public System.DateTime AvailableStartDate
		{
			get
			{
				return this._AvailableStartDate;
			}
			set
			{
				if ((this._AvailableStartDate != value))
				{
					this.OnAvailableStartDateChanging(value);
					this.SendPropertyChanging();
					this._AvailableStartDate = value;
					this.SendPropertyChanged("AvailableStartDate");
					this.OnAvailableStartDateChanged();
				}
			}
		}
		
		[Column(Storage="_AvailableEndDate", DbType="DateTime NOT NULL")]
		[DataMember(Order=4)]
		public System.DateTime AvailableEndDate
		{
			get
			{
				return this._AvailableEndDate;
			}
			set
			{
				if ((this._AvailableEndDate != value))
				{
					this.OnAvailableEndDateChanging(value);
					this.SendPropertyChanging();
					this._AvailableEndDate = value;
					this.SendPropertyChanged("AvailableEndDate");
					this.OnAvailableEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		[DataMember(Order=5)]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_PackageId", DbType="Int NOT NULL")]
		[DataMember(Order=6)]
		public int PackageId
		{
			get
			{
				return this._PackageId;
			}
			set
			{
				if ((this._PackageId != value))
				{
					if (this._Package.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPackageIdChanging(value);
					this.SendPropertyChanging();
					this._PackageId = value;
					this.SendPropertyChanged("PackageId");
					this.OnPackageIdChanged();
				}
			}
		}
		
		[Column(Storage="_BranchId", DbType="Int")]
		[DataMember(Order=7)]
		public System.Nullable<int> BranchId
		{
			get
			{
				return this._BranchId;
			}
			set
			{
				if ((this._BranchId != value))
				{
					if (this._Branch.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBranchIdChanging(value);
					this.SendPropertyChanging();
					this._BranchId = value;
					this.SendPropertyChanged("BranchId");
					this.OnBranchIdChanged();
				}
			}
		}
		
		[Column(Storage="_ApplicationId", DbType="Int")]
		[DataMember(Order=8)]
		public System.Nullable<int> ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					if (this._Application.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[Association(Name="Plan_Company", Storage="_Companies", ThisKey="PlanId", OtherKey="PlanId")]
		[DataMember(Order=9, EmitDefaultValue=false)]
		public EntitySet<Company> Companies
		{
			get
			{
				if ((this.serializing 
							&& (this._Companies.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Companies;
			}
			set
			{
				this._Companies.Assign(value);
			}
		}
		
		[Association(Name="Branch_Plan", Storage="_Branch", ThisKey="BranchId", OtherKey="BranchId", IsForeignKey=true)]
		public Branch Branch
		{
			get
			{
				return this._Branch.Entity;
			}
			set
			{
				Branch previousValue = this._Branch.Entity;
				if (((previousValue != value) 
							|| (this._Branch.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Branch.Entity = null;
						previousValue.Plans.Remove(this);
					}
					this._Branch.Entity = value;
					if ((value != null))
					{
						value.Plans.Add(this);
						this._BranchId = value.BranchId;
					}
					else
					{
						this._BranchId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Branch");
				}
			}
		}
		
		[Association(Name="Package_Plan", Storage="_Package", ThisKey="PackageId", OtherKey="PackageId", IsForeignKey=true)]
		public Package Package
		{
			get
			{
				return this._Package.Entity;
			}
			set
			{
				Package previousValue = this._Package.Entity;
				if (((previousValue != value) 
							|| (this._Package.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Package.Entity = null;
						previousValue.Plans.Remove(this);
					}
					this._Package.Entity = value;
					if ((value != null))
					{
						value.Plans.Add(this);
						this._PackageId = value.PackageId;
					}
					else
					{
						this._PackageId = default(int);
					}
					this.SendPropertyChanged("Package");
				}
			}
		}
		
		[Association(Name="Application_Plan", Storage="_Application", ThisKey="ApplicationId", OtherKey="ApplicationId", IsForeignKey=true)]
		public Application Application
		{
			get
			{
				return this._Application.Entity;
			}
			set
			{
				Application previousValue = this._Application.Entity;
				if (((previousValue != value) 
							|| (this._Application.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Application.Entity = null;
						previousValue.Plans.Remove(this);
					}
					this._Application.Entity = value;
					if ((value != null))
					{
						value.Plans.Add(this);
						this._ApplicationId = value.ApplicationId;
					}
					else
					{
						this._ApplicationId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Application");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Companies(Company entity)
		{
			this.SendPropertyChanging();
			entity.Plan = this;
		}
		
		private void detach_Companies(Company entity)
		{
			this.SendPropertyChanging();
			entity.Plan = null;
		}
		
		private void Initialize()
		{
			this._Companies = new EntitySet<Company>(new Action<Company>(this.attach_Companies), new Action<Company>(this.detach_Companies));
			this._Branch = default(EntityRef<Branch>);
			this._Package = default(EntityRef<Package>);
			this._Application = default(EntityRef<Application>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.Post")]
	[DataContract()]
	public partial class Post : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PostId;
		
		private string _Name;
		
		private System.Nullable<int> _CompanyId;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Employee> _Employees;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Company> _Company;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Company> _Company1;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPostIdChanging(int value);
    partial void OnPostIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCompanyIdChanging(System.Nullable<int> value);
    partial void OnCompanyIdChanged();
    #endregion
		
		public Post()
		{
			this.Initialize();
		}
		
		[Column(Storage="_PostId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int PostId
		{
			get
			{
				return this._PostId;
			}
			set
			{
				if ((this._PostId != value))
				{
					this.OnPostIdChanging(value);
					this.SendPropertyChanging();
					this._PostId = value;
					this.SendPropertyChanged("PostId");
					this.OnPostIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int")]
		[DataMember(Order=3)]
		public System.Nullable<int> CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Association(Name="Post_Employee", Storage="_Employees", ThisKey="PostId", OtherKey="PostId")]
		[DataMember(Order=4, EmitDefaultValue=false)]
		public EntitySet<Employee> Employees
		{
			get
			{
				if ((this.serializing 
							&& (this._Employees.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		[Association(Name="Company_Post", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Posts.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Posts.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[Association(Name="Company_Post1", Storage="_Company1", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true, DeleteRule="CASCADE")]
		public Company Company1
		{
			get
			{
				return this._Company1.Entity;
			}
			set
			{
				Company previousValue = this._Company1.Entity;
				if (((previousValue != value) 
							|| (this._Company1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company1.Entity = null;
						previousValue.Posts1.Remove(this);
					}
					this._Company1.Entity = value;
					if ((value != null))
					{
						value.Posts1.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Company1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Post = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Post = null;
		}
		
		private void Initialize()
		{
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			this._Company = default(EntityRef<Company>);
			this._Company1 = default(EntityRef<Company>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.Product")]
	[DataContract()]
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductId;
		
		private string _Name;
		
		private string _ProductCode;
		
		private System.DateTime _ModifiedDate;
		
		private string _BarCode;
		
		private System.Nullable<int> _CategoryId;
		
		private System.Nullable<bool> _IsActive;
		
		private System.Nullable<int> _ManufacturerId;
		
		private System.Nullable<int> _BarCodeTypeId;
		
		private string _Description;
		
		private bool _DropCompositeInStock;
		
		private int _CompanyId;
		
		private System.Nullable<bool> _AddCustomerEquipmentInSale;
		
		private System.Nullable<bool> _AllowNegativeStock;
		
		private System.Nullable<bool> _AllowSaleBelowCost;
		
		private System.Nullable<decimal> _IPI;
		
		private System.Nullable<decimal> _ICMS;
		
		private string _FiscalClass;
		
		private System.Nullable<int> _WarrantyDays;
		
		private string _IdentificationOrPlaca;
		
		private string _PatrimonioOrRenavam;
		
		private string _SerialNumberOrChassi;
		
		private string _Unit;
		
		private string _Package;
		
		private System.Nullable<bool> _RequiresAuthorization;
		
		private System.Nullable<bool> _IsTemp;
		
		private string _Keywords;
		
		private System.Nullable<decimal> _Weight;
		
		private System.Nullable<bool> _IsCasting;
		
		private System.Nullable<bool> _EmphasizeInHome;
		
		private string _ExternalSourceProductId;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private string _CreatedByUser;
		
		private string _ModifiedByUser;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<BudgetItem> _BudgetItems;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<CompositeProduct> _CompositeProducts;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<CompositeProduct> _CompositeProducts1;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Inventory> _Inventories;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<InventoryHistory> _InventoryHistories;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<InventoryMoviment> _InventoryMoviments;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<InventoryRMA> _InventoryRMAs;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<ProductCertificate> _ProductCertificates;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<ProductImage> _ProductImages;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<ProductManufacturer> _ProductManufacturers;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<ProductPackage> _ProductPackages;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<ProductPart> _ProductParts;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<PurchaseOrderItem> _PurchaseOrderItems;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<PurchaseRequest> _PurchaseRequests;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<PurchaseRequestItem> _PurchaseRequestItems;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<ReceiptItem> _ReceiptItems;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<SaleItem> _SaleItems;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<ServiceOrderItem> _ServiceOrderItems;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Company> _Company;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Category> _Category;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<BarCodeType> _BarCodeType;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Manufacturer> _Manufacturer;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnProductCodeChanging(string value);
    partial void OnProductCodeChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnBarCodeChanging(string value);
    partial void OnBarCodeChanged();
    partial void OnCategoryIdChanging(System.Nullable<int> value);
    partial void OnCategoryIdChanged();
    partial void OnIsActiveChanging(System.Nullable<bool> value);
    partial void OnIsActiveChanged();
    partial void OnManufacturerIdChanging(System.Nullable<int> value);
    partial void OnManufacturerIdChanged();
    partial void OnBarCodeTypeIdChanging(System.Nullable<int> value);
    partial void OnBarCodeTypeIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDropCompositeInStockChanging(bool value);
    partial void OnDropCompositeInStockChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnAddCustomerEquipmentInSaleChanging(System.Nullable<bool> value);
    partial void OnAddCustomerEquipmentInSaleChanged();
    partial void OnAllowNegativeStockChanging(System.Nullable<bool> value);
    partial void OnAllowNegativeStockChanged();
    partial void OnAllowSaleBelowCostChanging(System.Nullable<bool> value);
    partial void OnAllowSaleBelowCostChanged();
    partial void OnIPIChanging(System.Nullable<decimal> value);
    partial void OnIPIChanged();
    partial void OnICMSChanging(System.Nullable<decimal> value);
    partial void OnICMSChanged();
    partial void OnFiscalClassChanging(string value);
    partial void OnFiscalClassChanged();
    partial void OnWarrantyDaysChanging(System.Nullable<int> value);
    partial void OnWarrantyDaysChanged();
    partial void OnIdentificationOrPlacaChanging(string value);
    partial void OnIdentificationOrPlacaChanged();
    partial void OnPatrimonioOrRenavamChanging(string value);
    partial void OnPatrimonioOrRenavamChanged();
    partial void OnSerialNumberOrChassiChanging(string value);
    partial void OnSerialNumberOrChassiChanged();
    partial void OnUnitChanging(string value);
    partial void OnUnitChanged();
    partial void OnPackageChanging(string value);
    partial void OnPackageChanged();
    partial void OnRequiresAuthorizationChanging(System.Nullable<bool> value);
    partial void OnRequiresAuthorizationChanged();
    partial void OnIsTempChanging(System.Nullable<bool> value);
    partial void OnIsTempChanged();
    partial void OnKeywordsChanging(string value);
    partial void OnKeywordsChanged();
    partial void OnWeightChanging(System.Nullable<decimal> value);
    partial void OnWeightChanged();
    partial void OnIsCastingChanging(System.Nullable<bool> value);
    partial void OnIsCastingChanged();
    partial void OnEmphasizeInHomeChanging(System.Nullable<bool> value);
    partial void OnEmphasizeInHomeChanged();
    partial void OnExternalSourceProductIdChanging(string value);
    partial void OnExternalSourceProductIdChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnCreatedByUserChanging(string value);
    partial void OnCreatedByUserChanged();
    partial void OnModifiedByUserChanging(string value);
    partial void OnModifiedByUserChanged();
    #endregion
		
		public Product()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ProductId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(128) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_ProductCode", DbType="VarChar(128)")]
		[DataMember(Order=3)]
		public string ProductCode
		{
			get
			{
				return this._ProductCode;
			}
			set
			{
				if ((this._ProductCode != value))
				{
					this.OnProductCodeChanging(value);
					this.SendPropertyChanging();
					this._ProductCode = value;
					this.SendPropertyChanged("ProductCode");
					this.OnProductCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		[DataMember(Order=4)]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_BarCode", DbType="VarChar(128)")]
		[DataMember(Order=5)]
		public string BarCode
		{
			get
			{
				return this._BarCode;
			}
			set
			{
				if ((this._BarCode != value))
				{
					this.OnBarCodeChanging(value);
					this.SendPropertyChanging();
					this._BarCode = value;
					this.SendPropertyChanged("BarCode");
					this.OnBarCodeChanged();
				}
			}
		}
		
		[Column(Storage="_CategoryId", DbType="Int")]
		[DataMember(Order=6)]
		public System.Nullable<int> CategoryId
		{
			get
			{
				return this._CategoryId;
			}
			set
			{
				if ((this._CategoryId != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._CategoryId = value;
					this.SendPropertyChanged("CategoryId");
					this.OnCategoryIdChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit")]
		[DataMember(Order=7)]
		public System.Nullable<bool> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[Column(Storage="_ManufacturerId", DbType="Int")]
		[DataMember(Order=8)]
		public System.Nullable<int> ManufacturerId
		{
			get
			{
				return this._ManufacturerId;
			}
			set
			{
				if ((this._ManufacturerId != value))
				{
					if (this._Manufacturer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnManufacturerIdChanging(value);
					this.SendPropertyChanging();
					this._ManufacturerId = value;
					this.SendPropertyChanged("ManufacturerId");
					this.OnManufacturerIdChanged();
				}
			}
		}
		
		[Column(Storage="_BarCodeTypeId", DbType="Int")]
		[DataMember(Order=9)]
		public System.Nullable<int> BarCodeTypeId
		{
			get
			{
				return this._BarCodeTypeId;
			}
			set
			{
				if ((this._BarCodeTypeId != value))
				{
					if (this._BarCodeType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBarCodeTypeIdChanging(value);
					this.SendPropertyChanging();
					this._BarCodeTypeId = value;
					this.SendPropertyChanged("BarCodeTypeId");
					this.OnBarCodeTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=10)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_DropCompositeInStock", DbType="Bit NOT NULL")]
		[DataMember(Order=11)]
		public bool DropCompositeInStock
		{
			get
			{
				return this._DropCompositeInStock;
			}
			set
			{
				if ((this._DropCompositeInStock != value))
				{
					this.OnDropCompositeInStockChanging(value);
					this.SendPropertyChanging();
					this._DropCompositeInStock = value;
					this.SendPropertyChanged("DropCompositeInStock");
					this.OnDropCompositeInStockChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL")]
		[DataMember(Order=12)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Column(Storage="_AddCustomerEquipmentInSale", DbType="Bit")]
		[DataMember(Order=13)]
		public System.Nullable<bool> AddCustomerEquipmentInSale
		{
			get
			{
				return this._AddCustomerEquipmentInSale;
			}
			set
			{
				if ((this._AddCustomerEquipmentInSale != value))
				{
					this.OnAddCustomerEquipmentInSaleChanging(value);
					this.SendPropertyChanging();
					this._AddCustomerEquipmentInSale = value;
					this.SendPropertyChanged("AddCustomerEquipmentInSale");
					this.OnAddCustomerEquipmentInSaleChanged();
				}
			}
		}
		
		[Column(Storage="_AllowNegativeStock", DbType="Bit")]
		[DataMember(Order=14)]
		public System.Nullable<bool> AllowNegativeStock
		{
			get
			{
				return this._AllowNegativeStock;
			}
			set
			{
				if ((this._AllowNegativeStock != value))
				{
					this.OnAllowNegativeStockChanging(value);
					this.SendPropertyChanging();
					this._AllowNegativeStock = value;
					this.SendPropertyChanged("AllowNegativeStock");
					this.OnAllowNegativeStockChanged();
				}
			}
		}
		
		[Column(Storage="_AllowSaleBelowCost", DbType="Bit")]
		[DataMember(Order=15)]
		public System.Nullable<bool> AllowSaleBelowCost
		{
			get
			{
				return this._AllowSaleBelowCost;
			}
			set
			{
				if ((this._AllowSaleBelowCost != value))
				{
					this.OnAllowSaleBelowCostChanging(value);
					this.SendPropertyChanging();
					this._AllowSaleBelowCost = value;
					this.SendPropertyChanged("AllowSaleBelowCost");
					this.OnAllowSaleBelowCostChanged();
				}
			}
		}
		
		[Column(Storage="_IPI", DbType="Decimal(18,2)")]
		[DataMember(Order=16)]
		public System.Nullable<decimal> IPI
		{
			get
			{
				return this._IPI;
			}
			set
			{
				if ((this._IPI != value))
				{
					this.OnIPIChanging(value);
					this.SendPropertyChanging();
					this._IPI = value;
					this.SendPropertyChanged("IPI");
					this.OnIPIChanged();
				}
			}
		}
		
		[Column(Storage="_ICMS", DbType="Decimal(18,2)")]
		[DataMember(Order=17)]
		public System.Nullable<decimal> ICMS
		{
			get
			{
				return this._ICMS;
			}
			set
			{
				if ((this._ICMS != value))
				{
					this.OnICMSChanging(value);
					this.SendPropertyChanging();
					this._ICMS = value;
					this.SendPropertyChanged("ICMS");
					this.OnICMSChanged();
				}
			}
		}
		
		[Column(Storage="_FiscalClass", DbType="VarChar(50)")]
		[DataMember(Order=18)]
		public string FiscalClass
		{
			get
			{
				return this._FiscalClass;
			}
			set
			{
				if ((this._FiscalClass != value))
				{
					this.OnFiscalClassChanging(value);
					this.SendPropertyChanging();
					this._FiscalClass = value;
					this.SendPropertyChanged("FiscalClass");
					this.OnFiscalClassChanged();
				}
			}
		}
		
		[Column(Storage="_WarrantyDays", DbType="Int")]
		[DataMember(Order=19)]
		public System.Nullable<int> WarrantyDays
		{
			get
			{
				return this._WarrantyDays;
			}
			set
			{
				if ((this._WarrantyDays != value))
				{
					this.OnWarrantyDaysChanging(value);
					this.SendPropertyChanging();
					this._WarrantyDays = value;
					this.SendPropertyChanged("WarrantyDays");
					this.OnWarrantyDaysChanged();
				}
			}
		}
		
		[Column(Storage="_IdentificationOrPlaca", DbType="VarChar(50)")]
		[DataMember(Order=20)]
		public string IdentificationOrPlaca
		{
			get
			{
				return this._IdentificationOrPlaca;
			}
			set
			{
				if ((this._IdentificationOrPlaca != value))
				{
					this.OnIdentificationOrPlacaChanging(value);
					this.SendPropertyChanging();
					this._IdentificationOrPlaca = value;
					this.SendPropertyChanged("IdentificationOrPlaca");
					this.OnIdentificationOrPlacaChanged();
				}
			}
		}
		
		[Column(Storage="_PatrimonioOrRenavam", DbType="VarChar(50)")]
		[DataMember(Order=21)]
		public string PatrimonioOrRenavam
		{
			get
			{
				return this._PatrimonioOrRenavam;
			}
			set
			{
				if ((this._PatrimonioOrRenavam != value))
				{
					this.OnPatrimonioOrRenavamChanging(value);
					this.SendPropertyChanging();
					this._PatrimonioOrRenavam = value;
					this.SendPropertyChanged("PatrimonioOrRenavam");
					this.OnPatrimonioOrRenavamChanged();
				}
			}
		}
		
		[Column(Storage="_SerialNumberOrChassi", DbType="VarChar(50)")]
		[DataMember(Order=22)]
		public string SerialNumberOrChassi
		{
			get
			{
				return this._SerialNumberOrChassi;
			}
			set
			{
				if ((this._SerialNumberOrChassi != value))
				{
					this.OnSerialNumberOrChassiChanging(value);
					this.SendPropertyChanging();
					this._SerialNumberOrChassi = value;
					this.SendPropertyChanged("SerialNumberOrChassi");
					this.OnSerialNumberOrChassiChanged();
				}
			}
		}
		
		[Column(Storage="_Unit", DbType="VarChar(20)")]
		[DataMember(Order=23)]
		public string Unit
		{
			get
			{
				return this._Unit;
			}
			set
			{
				if ((this._Unit != value))
				{
					this.OnUnitChanging(value);
					this.SendPropertyChanging();
					this._Unit = value;
					this.SendPropertyChanged("Unit");
					this.OnUnitChanged();
				}
			}
		}
		
		[Column(Storage="_Package", DbType="VarChar(20)")]
		[DataMember(Order=24)]
		public string Package
		{
			get
			{
				return this._Package;
			}
			set
			{
				if ((this._Package != value))
				{
					this.OnPackageChanging(value);
					this.SendPropertyChanging();
					this._Package = value;
					this.SendPropertyChanged("Package");
					this.OnPackageChanged();
				}
			}
		}
		
		[Column(Storage="_RequiresAuthorization", DbType="Bit")]
		[DataMember(Order=25)]
		public System.Nullable<bool> RequiresAuthorization
		{
			get
			{
				return this._RequiresAuthorization;
			}
			set
			{
				if ((this._RequiresAuthorization != value))
				{
					this.OnRequiresAuthorizationChanging(value);
					this.SendPropertyChanging();
					this._RequiresAuthorization = value;
					this.SendPropertyChanged("RequiresAuthorization");
					this.OnRequiresAuthorizationChanged();
				}
			}
		}
		
		[Column(Storage="_IsTemp", DbType="Bit")]
		[DataMember(Order=26)]
		public System.Nullable<bool> IsTemp
		{
			get
			{
				return this._IsTemp;
			}
			set
			{
				if ((this._IsTemp != value))
				{
					this.OnIsTempChanging(value);
					this.SendPropertyChanging();
					this._IsTemp = value;
					this.SendPropertyChanged("IsTemp");
					this.OnIsTempChanged();
				}
			}
		}
		
		[Column(Storage="_Keywords", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=27)]
		public string Keywords
		{
			get
			{
				return this._Keywords;
			}
			set
			{
				if ((this._Keywords != value))
				{
					this.OnKeywordsChanging(value);
					this.SendPropertyChanging();
					this._Keywords = value;
					this.SendPropertyChanged("Keywords");
					this.OnKeywordsChanged();
				}
			}
		}
		
		[Column(Storage="_Weight", DbType="Decimal(18,2)")]
		[DataMember(Order=28)]
		public System.Nullable<decimal> Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this.OnWeightChanging(value);
					this.SendPropertyChanging();
					this._Weight = value;
					this.SendPropertyChanged("Weight");
					this.OnWeightChanged();
				}
			}
		}
		
		[Column(Storage="_IsCasting", DbType="Bit")]
		[DataMember(Order=29)]
		public System.Nullable<bool> IsCasting
		{
			get
			{
				return this._IsCasting;
			}
			set
			{
				if ((this._IsCasting != value))
				{
					this.OnIsCastingChanging(value);
					this.SendPropertyChanging();
					this._IsCasting = value;
					this.SendPropertyChanged("IsCasting");
					this.OnIsCastingChanged();
				}
			}
		}
		
		[Column(Storage="_EmphasizeInHome", DbType="Bit")]
		[DataMember(Order=30)]
		public System.Nullable<bool> EmphasizeInHome
		{
			get
			{
				return this._EmphasizeInHome;
			}
			set
			{
				if ((this._EmphasizeInHome != value))
				{
					this.OnEmphasizeInHomeChanging(value);
					this.SendPropertyChanging();
					this._EmphasizeInHome = value;
					this.SendPropertyChanged("EmphasizeInHome");
					this.OnEmphasizeInHomeChanged();
				}
			}
		}
		
		[Column(Storage="_ExternalSourceProductId", DbType="VarChar(20)")]
		[DataMember(Order=31)]
		public string ExternalSourceProductId
		{
			get
			{
				return this._ExternalSourceProductId;
			}
			set
			{
				if ((this._ExternalSourceProductId != value))
				{
					this.OnExternalSourceProductIdChanging(value);
					this.SendPropertyChanging();
					this._ExternalSourceProductId = value;
					this.SendPropertyChanged("ExternalSourceProductId");
					this.OnExternalSourceProductIdChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime")]
		[DataMember(Order=32)]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedByUser", DbType="VarChar(50)")]
		[DataMember(Order=33)]
		public string CreatedByUser
		{
			get
			{
				return this._CreatedByUser;
			}
			set
			{
				if ((this._CreatedByUser != value))
				{
					this.OnCreatedByUserChanging(value);
					this.SendPropertyChanging();
					this._CreatedByUser = value;
					this.SendPropertyChanged("CreatedByUser");
					this.OnCreatedByUserChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedByUser", DbType="VarChar(50)")]
		[DataMember(Order=34)]
		public string ModifiedByUser
		{
			get
			{
				return this._ModifiedByUser;
			}
			set
			{
				if ((this._ModifiedByUser != value))
				{
					this.OnModifiedByUserChanging(value);
					this.SendPropertyChanging();
					this._ModifiedByUser = value;
					this.SendPropertyChanged("ModifiedByUser");
					this.OnModifiedByUserChanged();
				}
			}
		}
		
		[Association(Name="Product_BudgetItem", Storage="_BudgetItems", ThisKey="ProductId", OtherKey="ProductId")]
		[DataMember(Order=35, EmitDefaultValue=false)]
		public EntitySet<BudgetItem> BudgetItems
		{
			get
			{
				if ((this.serializing 
							&& (this._BudgetItems.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._BudgetItems;
			}
			set
			{
				this._BudgetItems.Assign(value);
			}
		}
		
		[Association(Name="Product_CompositeProduct", Storage="_CompositeProducts", ThisKey="ProductId", OtherKey="CompositeProductId")]
		[DataMember(Order=36, EmitDefaultValue=false)]
		public EntitySet<CompositeProduct> CompositeProducts
		{
			get
			{
				if ((this.serializing 
							&& (this._CompositeProducts.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._CompositeProducts;
			}
			set
			{
				this._CompositeProducts.Assign(value);
			}
		}
		
		[Association(Name="Product_CompositeProduct1", Storage="_CompositeProducts1", ThisKey="ProductId", OtherKey="ProductId")]
		[DataMember(Order=37, EmitDefaultValue=false)]
		public EntitySet<CompositeProduct> CompositeProducts1
		{
			get
			{
				if ((this.serializing 
							&& (this._CompositeProducts1.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._CompositeProducts1;
			}
			set
			{
				this._CompositeProducts1.Assign(value);
			}
		}
		
		[Association(Name="Product_Inventory", Storage="_Inventories", ThisKey="ProductId", OtherKey="ProductId")]
		[DataMember(Order=38, EmitDefaultValue=false)]
		public EntitySet<Inventory> Inventories
		{
			get
			{
				if ((this.serializing 
							&& (this._Inventories.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Inventories;
			}
			set
			{
				this._Inventories.Assign(value);
			}
		}
		
		[Association(Name="Product_InventoryHistory", Storage="_InventoryHistories", ThisKey="ProductId", OtherKey="ProductId")]
		[DataMember(Order=39, EmitDefaultValue=false)]
		public EntitySet<InventoryHistory> InventoryHistories
		{
			get
			{
				if ((this.serializing 
							&& (this._InventoryHistories.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._InventoryHistories;
			}
			set
			{
				this._InventoryHistories.Assign(value);
			}
		}
		
		[Association(Name="Product_InventoryMoviment", Storage="_InventoryMoviments", ThisKey="ProductId", OtherKey="ProductId")]
		[DataMember(Order=40, EmitDefaultValue=false)]
		public EntitySet<InventoryMoviment> InventoryMoviments
		{
			get
			{
				if ((this.serializing 
							&& (this._InventoryMoviments.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._InventoryMoviments;
			}
			set
			{
				this._InventoryMoviments.Assign(value);
			}
		}
		
		[Association(Name="Product_InventoryRMA", Storage="_InventoryRMAs", ThisKey="ProductId", OtherKey="ProductId")]
		[DataMember(Order=41, EmitDefaultValue=false)]
		public EntitySet<InventoryRMA> InventoryRMAs
		{
			get
			{
				if ((this.serializing 
							&& (this._InventoryRMAs.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._InventoryRMAs;
			}
			set
			{
				this._InventoryRMAs.Assign(value);
			}
		}
		
		[Association(Name="Product_ProductCertificate", Storage="_ProductCertificates", ThisKey="ProductId", OtherKey="ProductId")]
		[DataMember(Order=42, EmitDefaultValue=false)]
		public EntitySet<ProductCertificate> ProductCertificates
		{
			get
			{
				if ((this.serializing 
							&& (this._ProductCertificates.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ProductCertificates;
			}
			set
			{
				this._ProductCertificates.Assign(value);
			}
		}
		
		[Association(Name="Product_ProductImage", Storage="_ProductImages", ThisKey="ProductId", OtherKey="ProductId")]
		[DataMember(Order=43, EmitDefaultValue=false)]
		public EntitySet<ProductImage> ProductImages
		{
			get
			{
				if ((this.serializing 
							&& (this._ProductImages.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ProductImages;
			}
			set
			{
				this._ProductImages.Assign(value);
			}
		}
		
		[Association(Name="Product_ProductManufacturer", Storage="_ProductManufacturers", ThisKey="ProductId", OtherKey="ProductId")]
		[DataMember(Order=44, EmitDefaultValue=false)]
		public EntitySet<ProductManufacturer> ProductManufacturers
		{
			get
			{
				if ((this.serializing 
							&& (this._ProductManufacturers.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ProductManufacturers;
			}
			set
			{
				this._ProductManufacturers.Assign(value);
			}
		}
		
		[Association(Name="Product_ProductPackage", Storage="_ProductPackages", ThisKey="ProductId", OtherKey="ProductId")]
		[DataMember(Order=45, EmitDefaultValue=false)]
		public EntitySet<ProductPackage> ProductPackages
		{
			get
			{
				if ((this.serializing 
							&& (this._ProductPackages.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ProductPackages;
			}
			set
			{
				this._ProductPackages.Assign(value);
			}
		}
		
		[Association(Name="Product_ProductPart", Storage="_ProductParts", ThisKey="ProductId", OtherKey="ProductId")]
		[DataMember(Order=46, EmitDefaultValue=false)]
		public EntitySet<ProductPart> ProductParts
		{
			get
			{
				if ((this.serializing 
							&& (this._ProductParts.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ProductParts;
			}
			set
			{
				this._ProductParts.Assign(value);
			}
		}
		
		[Association(Name="Product_PurchaseOrderItem", Storage="_PurchaseOrderItems", ThisKey="ProductId", OtherKey="ProductId")]
		[DataMember(Order=47, EmitDefaultValue=false)]
		public EntitySet<PurchaseOrderItem> PurchaseOrderItems
		{
			get
			{
				if ((this.serializing 
							&& (this._PurchaseOrderItems.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._PurchaseOrderItems;
			}
			set
			{
				this._PurchaseOrderItems.Assign(value);
			}
		}
		
		[Association(Name="Product_PurchaseRequest", Storage="_PurchaseRequests", ThisKey="ProductId", OtherKey="ProductId")]
		[DataMember(Order=48, EmitDefaultValue=false)]
		public EntitySet<PurchaseRequest> PurchaseRequests
		{
			get
			{
				if ((this.serializing 
							&& (this._PurchaseRequests.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._PurchaseRequests;
			}
			set
			{
				this._PurchaseRequests.Assign(value);
			}
		}
		
		[Association(Name="Product_PurchaseRequestItem", Storage="_PurchaseRequestItems", ThisKey="ProductId", OtherKey="ProductId")]
		[DataMember(Order=49, EmitDefaultValue=false)]
		public EntitySet<PurchaseRequestItem> PurchaseRequestItems
		{
			get
			{
				if ((this.serializing 
							&& (this._PurchaseRequestItems.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._PurchaseRequestItems;
			}
			set
			{
				this._PurchaseRequestItems.Assign(value);
			}
		}
		
		[Association(Name="Product_ReceiptItem", Storage="_ReceiptItems", ThisKey="ProductId", OtherKey="ProductId")]
		[DataMember(Order=50, EmitDefaultValue=false)]
		public EntitySet<ReceiptItem> ReceiptItems
		{
			get
			{
				if ((this.serializing 
							&& (this._ReceiptItems.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ReceiptItems;
			}
			set
			{
				this._ReceiptItems.Assign(value);
			}
		}
		
		[Association(Name="Product_SaleItem", Storage="_SaleItems", ThisKey="ProductId", OtherKey="ProductId")]
		[DataMember(Order=51, EmitDefaultValue=false)]
		public EntitySet<SaleItem> SaleItems
		{
			get
			{
				if ((this.serializing 
							&& (this._SaleItems.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._SaleItems;
			}
			set
			{
				this._SaleItems.Assign(value);
			}
		}
		
		[Association(Name="Product_ServiceOrderItem", Storage="_ServiceOrderItems", ThisKey="ProductId", OtherKey="ProductId")]
		[DataMember(Order=52, EmitDefaultValue=false)]
		public EntitySet<ServiceOrderItem> ServiceOrderItems
		{
			get
			{
				if ((this.serializing 
							&& (this._ServiceOrderItems.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ServiceOrderItems;
			}
			set
			{
				this._ServiceOrderItems.Assign(value);
			}
		}
		
		[Association(Name="Company_Product", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[Association(Name="Category_Product", Storage="_Category", ThisKey="CategoryId", OtherKey="CategoryId", IsForeignKey=true, DeleteRule="SET NULL")]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._CategoryId = value.CategoryId;
					}
					else
					{
						this._CategoryId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[Association(Name="BarCodeType_Product", Storage="_BarCodeType", ThisKey="BarCodeTypeId", OtherKey="BarCodeTypeId", IsForeignKey=true)]
		public BarCodeType BarCodeType
		{
			get
			{
				return this._BarCodeType.Entity;
			}
			set
			{
				BarCodeType previousValue = this._BarCodeType.Entity;
				if (((previousValue != value) 
							|| (this._BarCodeType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BarCodeType.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._BarCodeType.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._BarCodeTypeId = value.BarCodeTypeId;
					}
					else
					{
						this._BarCodeTypeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("BarCodeType");
				}
			}
		}
		
		[Association(Name="Manufacturer_Product", Storage="_Manufacturer", ThisKey="ManufacturerId", OtherKey="ManufacturerId", IsForeignKey=true)]
		public Manufacturer Manufacturer
		{
			get
			{
				return this._Manufacturer.Entity;
			}
			set
			{
				Manufacturer previousValue = this._Manufacturer.Entity;
				if (((previousValue != value) 
							|| (this._Manufacturer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Manufacturer.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._Manufacturer.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._ManufacturerId = value.ManufacturerId;
					}
					else
					{
						this._ManufacturerId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Manufacturer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BudgetItems(BudgetItem entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_BudgetItems(BudgetItem entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_CompositeProducts(CompositeProduct entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_CompositeProducts(CompositeProduct entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_CompositeProducts1(CompositeProduct entity)
		{
			this.SendPropertyChanging();
			entity.Product1 = this;
		}
		
		private void detach_CompositeProducts1(CompositeProduct entity)
		{
			this.SendPropertyChanging();
			entity.Product1 = null;
		}
		
		private void attach_Inventories(Inventory entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_Inventories(Inventory entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_InventoryHistories(InventoryHistory entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_InventoryHistories(InventoryHistory entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_InventoryMoviments(InventoryMoviment entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_InventoryMoviments(InventoryMoviment entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_InventoryRMAs(InventoryRMA entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_InventoryRMAs(InventoryRMA entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_ProductCertificates(ProductCertificate entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ProductCertificates(ProductCertificate entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_ProductImages(ProductImage entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ProductImages(ProductImage entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_ProductManufacturers(ProductManufacturer entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ProductManufacturers(ProductManufacturer entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_ProductPackages(ProductPackage entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ProductPackages(ProductPackage entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_ProductParts(ProductPart entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ProductParts(ProductPart entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_PurchaseOrderItems(PurchaseOrderItem entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_PurchaseOrderItems(PurchaseOrderItem entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_PurchaseRequests(PurchaseRequest entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_PurchaseRequests(PurchaseRequest entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_PurchaseRequestItems(PurchaseRequestItem entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_PurchaseRequestItems(PurchaseRequestItem entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_ReceiptItems(ReceiptItem entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ReceiptItems(ReceiptItem entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_SaleItems(SaleItem entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_SaleItems(SaleItem entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_ServiceOrderItems(ServiceOrderItem entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ServiceOrderItems(ServiceOrderItem entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void Initialize()
		{
			this._BudgetItems = new EntitySet<BudgetItem>(new Action<BudgetItem>(this.attach_BudgetItems), new Action<BudgetItem>(this.detach_BudgetItems));
			this._CompositeProducts = new EntitySet<CompositeProduct>(new Action<CompositeProduct>(this.attach_CompositeProducts), new Action<CompositeProduct>(this.detach_CompositeProducts));
			this._CompositeProducts1 = new EntitySet<CompositeProduct>(new Action<CompositeProduct>(this.attach_CompositeProducts1), new Action<CompositeProduct>(this.detach_CompositeProducts1));
			this._Inventories = new EntitySet<Inventory>(new Action<Inventory>(this.attach_Inventories), new Action<Inventory>(this.detach_Inventories));
			this._InventoryHistories = new EntitySet<InventoryHistory>(new Action<InventoryHistory>(this.attach_InventoryHistories), new Action<InventoryHistory>(this.detach_InventoryHistories));
			this._InventoryMoviments = new EntitySet<InventoryMoviment>(new Action<InventoryMoviment>(this.attach_InventoryMoviments), new Action<InventoryMoviment>(this.detach_InventoryMoviments));
			this._InventoryRMAs = new EntitySet<InventoryRMA>(new Action<InventoryRMA>(this.attach_InventoryRMAs), new Action<InventoryRMA>(this.detach_InventoryRMAs));
			this._ProductCertificates = new EntitySet<ProductCertificate>(new Action<ProductCertificate>(this.attach_ProductCertificates), new Action<ProductCertificate>(this.detach_ProductCertificates));
			this._ProductImages = new EntitySet<ProductImage>(new Action<ProductImage>(this.attach_ProductImages), new Action<ProductImage>(this.detach_ProductImages));
			this._ProductManufacturers = new EntitySet<ProductManufacturer>(new Action<ProductManufacturer>(this.attach_ProductManufacturers), new Action<ProductManufacturer>(this.detach_ProductManufacturers));
			this._ProductPackages = new EntitySet<ProductPackage>(new Action<ProductPackage>(this.attach_ProductPackages), new Action<ProductPackage>(this.detach_ProductPackages));
			this._ProductParts = new EntitySet<ProductPart>(new Action<ProductPart>(this.attach_ProductParts), new Action<ProductPart>(this.detach_ProductParts));
			this._PurchaseOrderItems = new EntitySet<PurchaseOrderItem>(new Action<PurchaseOrderItem>(this.attach_PurchaseOrderItems), new Action<PurchaseOrderItem>(this.detach_PurchaseOrderItems));
			this._PurchaseRequests = new EntitySet<PurchaseRequest>(new Action<PurchaseRequest>(this.attach_PurchaseRequests), new Action<PurchaseRequest>(this.detach_PurchaseRequests));
			this._PurchaseRequestItems = new EntitySet<PurchaseRequestItem>(new Action<PurchaseRequestItem>(this.attach_PurchaseRequestItems), new Action<PurchaseRequestItem>(this.detach_PurchaseRequestItems));
			this._ReceiptItems = new EntitySet<ReceiptItem>(new Action<ReceiptItem>(this.attach_ReceiptItems), new Action<ReceiptItem>(this.detach_ReceiptItems));
			this._SaleItems = new EntitySet<SaleItem>(new Action<SaleItem>(this.attach_SaleItems), new Action<SaleItem>(this.detach_SaleItems));
			this._ServiceOrderItems = new EntitySet<ServiceOrderItem>(new Action<ServiceOrderItem>(this.attach_ServiceOrderItems), new Action<ServiceOrderItem>(this.detach_ServiceOrderItems));
			this._Company = default(EntityRef<Company>);
			this._Category = default(EntityRef<Category>);
			this._BarCodeType = default(EntityRef<BarCodeType>);
			this._Manufacturer = default(EntityRef<Manufacturer>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.ProductCertificate")]
	[DataContract()]
	public partial class ProductCertificate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductCertificateId;
		
		private int _ProductId;
		
		private string _Name;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductCertificateIdChanging(int value);
    partial void OnProductCertificateIdChanged();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public ProductCertificate()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ProductCertificateId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int ProductCertificateId
		{
			get
			{
				return this._ProductCertificateId;
			}
			set
			{
				if ((this._ProductCertificateId != value))
				{
					this.OnProductCertificateIdChanging(value);
					this.SendPropertyChanging();
					this._ProductCertificateId = value;
					this.SendPropertyChanged("ProductCertificateId");
					this.OnProductCertificateIdChanged();
				}
			}
		}
		
		[Column(Storage="_ProductId", DbType="Int NOT NULL")]
		[DataMember(Order=2)]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(1024) NOT NULL", CanBeNull=false)]
		[DataMember(Order=3)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="Product_ProductCertificate", Storage="_Product", ThisKey="ProductId", OtherKey="ProductId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ProductCertificates.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ProductCertificates.Add(this);
						this._ProductId = value.ProductId;
					}
					else
					{
						this._ProductId = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.ProductImages")]
	[DataContract()]
	public partial class ProductImage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ProductImageId;
		
		private int _ProductId;
		
		private string _ImageUrl;
		
		private string _Description;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductImageIdChanging(long value);
    partial void OnProductImageIdChanged();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnImageUrlChanging(string value);
    partial void OnImageUrlChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public ProductImage()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ProductImageId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public long ProductImageId
		{
			get
			{
				return this._ProductImageId;
			}
			set
			{
				if ((this._ProductImageId != value))
				{
					this.OnProductImageIdChanging(value);
					this.SendPropertyChanging();
					this._ProductImageId = value;
					this.SendPropertyChanged("ProductImageId");
					this.OnProductImageIdChanged();
				}
			}
		}
		
		[Column(Storage="_ProductId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=2)]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[Column(Storage="_ImageUrl", DbType="VarChar(1024)")]
		[DataMember(Order=3)]
		public string ImageUrl
		{
			get
			{
				return this._ImageUrl;
			}
			set
			{
				if ((this._ImageUrl != value))
				{
					this.OnImageUrlChanging(value);
					this.SendPropertyChanging();
					this._ImageUrl = value;
					this.SendPropertyChanged("ImageUrl");
					this.OnImageUrlChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(200)")]
		[DataMember(Order=4)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="Product_ProductImage", Storage="_Product", ThisKey="ProductId", OtherKey="ProductId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ProductImages.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ProductImages.Add(this);
						this._ProductId = value.ProductId;
					}
					else
					{
						this._ProductId = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.ProductManufacturer")]
	[DataContract()]
	public partial class ProductManufacturer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductManufacturerId;
		
		private string _Name;
		
		private int _ProductId;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<CompositeProduct> _CompositeProducts;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<PurchaseOrderItem> _PurchaseOrderItems;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<PurchaseRequestItem> _PurchaseRequestItems;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Product> _Product;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductManufacturerIdChanging(int value);
    partial void OnProductManufacturerIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    #endregion
		
		public ProductManufacturer()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ProductManufacturerId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int ProductManufacturerId
		{
			get
			{
				return this._ProductManufacturerId;
			}
			set
			{
				if ((this._ProductManufacturerId != value))
				{
					this.OnProductManufacturerIdChanging(value);
					this.SendPropertyChanging();
					this._ProductManufacturerId = value;
					this.SendPropertyChanged("ProductManufacturerId");
					this.OnProductManufacturerIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(1024) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_ProductId", DbType="Int NOT NULL")]
		[DataMember(Order=3)]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[Association(Name="ProductManufacturer_CompositeProduct", Storage="_CompositeProducts", ThisKey="ProductManufacturerId", OtherKey="ProductManufacturerId")]
		[DataMember(Order=4, EmitDefaultValue=false)]
		public EntitySet<CompositeProduct> CompositeProducts
		{
			get
			{
				if ((this.serializing 
							&& (this._CompositeProducts.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._CompositeProducts;
			}
			set
			{
				this._CompositeProducts.Assign(value);
			}
		}
		
		[Association(Name="ProductManufacturer_PurchaseOrderItem", Storage="_PurchaseOrderItems", ThisKey="ProductManufacturerId", OtherKey="ProductManufacturerId")]
		[DataMember(Order=5, EmitDefaultValue=false)]
		public EntitySet<PurchaseOrderItem> PurchaseOrderItems
		{
			get
			{
				if ((this.serializing 
							&& (this._PurchaseOrderItems.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._PurchaseOrderItems;
			}
			set
			{
				this._PurchaseOrderItems.Assign(value);
			}
		}
		
		[Association(Name="ProductManufacturer_PurchaseRequestItem", Storage="_PurchaseRequestItems", ThisKey="ProductManufacturerId", OtherKey="ProductManufacturerId")]
		[DataMember(Order=6, EmitDefaultValue=false)]
		public EntitySet<PurchaseRequestItem> PurchaseRequestItems
		{
			get
			{
				if ((this.serializing 
							&& (this._PurchaseRequestItems.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._PurchaseRequestItems;
			}
			set
			{
				this._PurchaseRequestItems.Assign(value);
			}
		}
		
		[Association(Name="Product_ProductManufacturer", Storage="_Product", ThisKey="ProductId", OtherKey="ProductId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ProductManufacturers.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ProductManufacturers.Add(this);
						this._ProductId = value.ProductId;
					}
					else
					{
						this._ProductId = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CompositeProducts(CompositeProduct entity)
		{
			this.SendPropertyChanging();
			entity.ProductManufacturer = this;
		}
		
		private void detach_CompositeProducts(CompositeProduct entity)
		{
			this.SendPropertyChanging();
			entity.ProductManufacturer = null;
		}
		
		private void attach_PurchaseOrderItems(PurchaseOrderItem entity)
		{
			this.SendPropertyChanging();
			entity.ProductManufacturer = this;
		}
		
		private void detach_PurchaseOrderItems(PurchaseOrderItem entity)
		{
			this.SendPropertyChanging();
			entity.ProductManufacturer = null;
		}
		
		private void attach_PurchaseRequestItems(PurchaseRequestItem entity)
		{
			this.SendPropertyChanging();
			entity.ProductManufacturer = this;
		}
		
		private void detach_PurchaseRequestItems(PurchaseRequestItem entity)
		{
			this.SendPropertyChanging();
			entity.ProductManufacturer = null;
		}
		
		private void Initialize()
		{
			this._CompositeProducts = new EntitySet<CompositeProduct>(new Action<CompositeProduct>(this.attach_CompositeProducts), new Action<CompositeProduct>(this.detach_CompositeProducts));
			this._PurchaseOrderItems = new EntitySet<PurchaseOrderItem>(new Action<PurchaseOrderItem>(this.attach_PurchaseOrderItems), new Action<PurchaseOrderItem>(this.detach_PurchaseOrderItems));
			this._PurchaseRequestItems = new EntitySet<PurchaseRequestItem>(new Action<PurchaseRequestItem>(this.attach_PurchaseRequestItems), new Action<PurchaseRequestItem>(this.detach_PurchaseRequestItems));
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.ProductPackage")]
	[DataContract()]
	public partial class ProductPackage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductPackageId;
		
		private string _Name;
		
		private int _ProductId;
		
		private bool _RequiresQuotationInPurchasing;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<CompositeProduct> _CompositeProducts;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Inventory> _Inventories;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<PurchaseOrderItem> _PurchaseOrderItems;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<PurchaseRequestItem> _PurchaseRequestItems;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Product> _Product;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductPackageIdChanging(int value);
    partial void OnProductPackageIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnRequiresQuotationInPurchasingChanging(bool value);
    partial void OnRequiresQuotationInPurchasingChanged();
    #endregion
		
		public ProductPackage()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ProductPackageId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int ProductPackageId
		{
			get
			{
				return this._ProductPackageId;
			}
			set
			{
				if ((this._ProductPackageId != value))
				{
					this.OnProductPackageIdChanging(value);
					this.SendPropertyChanging();
					this._ProductPackageId = value;
					this.SendPropertyChanged("ProductPackageId");
					this.OnProductPackageIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(1024) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_ProductId", DbType="Int NOT NULL")]
		[DataMember(Order=3)]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[Column(Storage="_RequiresQuotationInPurchasing", DbType="Bit NOT NULL")]
		[DataMember(Order=4)]
		public bool RequiresQuotationInPurchasing
		{
			get
			{
				return this._RequiresQuotationInPurchasing;
			}
			set
			{
				if ((this._RequiresQuotationInPurchasing != value))
				{
					this.OnRequiresQuotationInPurchasingChanging(value);
					this.SendPropertyChanging();
					this._RequiresQuotationInPurchasing = value;
					this.SendPropertyChanged("RequiresQuotationInPurchasing");
					this.OnRequiresQuotationInPurchasingChanged();
				}
			}
		}
		
		[Association(Name="ProductPackage_CompositeProduct", Storage="_CompositeProducts", ThisKey="ProductPackageId", OtherKey="ProductPackageId")]
		[DataMember(Order=5, EmitDefaultValue=false)]
		public EntitySet<CompositeProduct> CompositeProducts
		{
			get
			{
				if ((this.serializing 
							&& (this._CompositeProducts.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._CompositeProducts;
			}
			set
			{
				this._CompositeProducts.Assign(value);
			}
		}
		
		[Association(Name="ProductPackage_Inventory", Storage="_Inventories", ThisKey="ProductPackageId", OtherKey="ProductPackageId")]
		[DataMember(Order=6, EmitDefaultValue=false)]
		public EntitySet<Inventory> Inventories
		{
			get
			{
				if ((this.serializing 
							&& (this._Inventories.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Inventories;
			}
			set
			{
				this._Inventories.Assign(value);
			}
		}
		
		[Association(Name="ProductPackage_PurchaseOrderItem", Storage="_PurchaseOrderItems", ThisKey="ProductPackageId", OtherKey="ProductPackageId")]
		[DataMember(Order=7, EmitDefaultValue=false)]
		public EntitySet<PurchaseOrderItem> PurchaseOrderItems
		{
			get
			{
				if ((this.serializing 
							&& (this._PurchaseOrderItems.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._PurchaseOrderItems;
			}
			set
			{
				this._PurchaseOrderItems.Assign(value);
			}
		}
		
		[Association(Name="ProductPackage_PurchaseRequestItem", Storage="_PurchaseRequestItems", ThisKey="ProductPackageId", OtherKey="ProductPackageId")]
		[DataMember(Order=8, EmitDefaultValue=false)]
		public EntitySet<PurchaseRequestItem> PurchaseRequestItems
		{
			get
			{
				if ((this.serializing 
							&& (this._PurchaseRequestItems.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._PurchaseRequestItems;
			}
			set
			{
				this._PurchaseRequestItems.Assign(value);
			}
		}
		
		[Association(Name="Product_ProductPackage", Storage="_Product", ThisKey="ProductId", OtherKey="ProductId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ProductPackages.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ProductPackages.Add(this);
						this._ProductId = value.ProductId;
					}
					else
					{
						this._ProductId = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CompositeProducts(CompositeProduct entity)
		{
			this.SendPropertyChanging();
			entity.ProductPackage = this;
		}
		
		private void detach_CompositeProducts(CompositeProduct entity)
		{
			this.SendPropertyChanging();
			entity.ProductPackage = null;
		}
		
		private void attach_Inventories(Inventory entity)
		{
			this.SendPropertyChanging();
			entity.ProductPackage = this;
		}
		
		private void detach_Inventories(Inventory entity)
		{
			this.SendPropertyChanging();
			entity.ProductPackage = null;
		}
		
		private void attach_PurchaseOrderItems(PurchaseOrderItem entity)
		{
			this.SendPropertyChanging();
			entity.ProductPackage = this;
		}
		
		private void detach_PurchaseOrderItems(PurchaseOrderItem entity)
		{
			this.SendPropertyChanging();
			entity.ProductPackage = null;
		}
		
		private void attach_PurchaseRequestItems(PurchaseRequestItem entity)
		{
			this.SendPropertyChanging();
			entity.ProductPackage = this;
		}
		
		private void detach_PurchaseRequestItems(PurchaseRequestItem entity)
		{
			this.SendPropertyChanging();
			entity.ProductPackage = null;
		}
		
		private void Initialize()
		{
			this._CompositeProducts = new EntitySet<CompositeProduct>(new Action<CompositeProduct>(this.attach_CompositeProducts), new Action<CompositeProduct>(this.detach_CompositeProducts));
			this._Inventories = new EntitySet<Inventory>(new Action<Inventory>(this.attach_Inventories), new Action<Inventory>(this.detach_Inventories));
			this._PurchaseOrderItems = new EntitySet<PurchaseOrderItem>(new Action<PurchaseOrderItem>(this.attach_PurchaseOrderItems), new Action<PurchaseOrderItem>(this.detach_PurchaseOrderItems));
			this._PurchaseRequestItems = new EntitySet<PurchaseRequestItem>(new Action<PurchaseRequestItem>(this.attach_PurchaseRequestItems), new Action<PurchaseRequestItem>(this.detach_PurchaseRequestItems));
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.ProductPart")]
	[DataContract()]
	public partial class ProductPart : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductPartId;
		
		private System.Nullable<int> _ParentId;
		
		private string _Name;
		
		private System.DateTime _ModifiedDate;
		
		private int _Quantity;
		
		private System.Nullable<int> _ProductId;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<ProductPart> _ProductParts;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Product> _Product;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<ProductPart> _ProductPart1;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductPartIdChanging(int value);
    partial void OnProductPartIdChanged();
    partial void OnParentIdChanging(System.Nullable<int> value);
    partial void OnParentIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnProductIdChanging(System.Nullable<int> value);
    partial void OnProductIdChanged();
    #endregion
		
		public ProductPart()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ProductPartId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int ProductPartId
		{
			get
			{
				return this._ProductPartId;
			}
			set
			{
				if ((this._ProductPartId != value))
				{
					this.OnProductPartIdChanging(value);
					this.SendPropertyChanging();
					this._ProductPartId = value;
					this.SendPropertyChanged("ProductPartId");
					this.OnProductPartIdChanged();
				}
			}
		}
		
		[Column(Storage="_ParentId", DbType="Int")]
		[DataMember(Order=2)]
		public System.Nullable<int> ParentId
		{
			get
			{
				return this._ParentId;
			}
			set
			{
				if ((this._ParentId != value))
				{
					if (this._ProductPart1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIdChanging(value);
					this.SendPropertyChanging();
					this._ParentId = value;
					this.SendPropertyChanged("ParentId");
					this.OnParentIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		[DataMember(Order=3)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		[DataMember(Order=4)]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_Quantity", DbType="Int NOT NULL")]
		[DataMember(Order=5)]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_ProductId", DbType="Int")]
		[DataMember(Order=6)]
		public System.Nullable<int> ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[Association(Name="ProductPart_ProductPart", Storage="_ProductParts", ThisKey="ProductPartId", OtherKey="ParentId")]
		[DataMember(Order=7, EmitDefaultValue=false)]
		public EntitySet<ProductPart> ProductParts
		{
			get
			{
				if ((this.serializing 
							&& (this._ProductParts.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ProductParts;
			}
			set
			{
				this._ProductParts.Assign(value);
			}
		}
		
		[Association(Name="Product_ProductPart", Storage="_Product", ThisKey="ProductId", OtherKey="ProductId", IsForeignKey=true, DeleteRule="CASCADE")]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ProductParts.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ProductParts.Add(this);
						this._ProductId = value.ProductId;
					}
					else
					{
						this._ProductId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		[Association(Name="ProductPart_ProductPart", Storage="_ProductPart1", ThisKey="ParentId", OtherKey="ProductPartId", IsForeignKey=true)]
		public ProductPart ProductPart1
		{
			get
			{
				return this._ProductPart1.Entity;
			}
			set
			{
				ProductPart previousValue = this._ProductPart1.Entity;
				if (((previousValue != value) 
							|| (this._ProductPart1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductPart1.Entity = null;
						previousValue.ProductParts.Remove(this);
					}
					this._ProductPart1.Entity = value;
					if ((value != null))
					{
						value.ProductParts.Add(this);
						this._ParentId = value.ProductPartId;
					}
					else
					{
						this._ParentId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProductPart1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProductParts(ProductPart entity)
		{
			this.SendPropertyChanging();
			entity.ProductPart1 = this;
		}
		
		private void detach_ProductParts(ProductPart entity)
		{
			this.SendPropertyChanging();
			entity.ProductPart1 = null;
		}
		
		private void Initialize()
		{
			this._ProductParts = new EntitySet<ProductPart>(new Action<ProductPart>(this.attach_ProductParts), new Action<ProductPart>(this.detach_ProductParts));
			this._Product = default(EntityRef<Product>);
			this._ProductPart1 = default(EntityRef<ProductPart>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.Profile")]
	[DataContract()]
	public partial class Profile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProfileId;
		
		private string _Name;
		
		private string _AddressNumber;
		
		private string _CPF;
		
		private string _AddressComp;
		
		private string _PostalCode;
		
		private string _Phone;
		
		private System.Nullable<System.DateTime> _BirthDate;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private string _RG;
		
		private System.Nullable<int> _EducationLevelId;
		
		private string _Email;
		
		private string _HomePhone;
		
		private System.Nullable<int> _MaritalStatusId;
		
		private string _CellPhone;
		
		private System.Nullable<int> _SexId;
		
		private string _ProfessionalRegister;
		
		private string _VotingTitle;
		
		private string _Observations;
		
		private string _RecoveryAddressNumber;
		
		private string _RecoveryPostalCode;
		
		private string _RecoveryAddressComp;
		
		private System.Nullable<System.DateTime> _RgCreatedDate;
		
		private System.Nullable<System.DateTime> _CnhExpiresDate;
		
		private string _CnhNumber;
		
		private string _CnhClass;
		
		private string _IssueBureau;
		
		private string _Fax;
		
		private string _FatherName;
		
		private string _MotherName;
		
		private string _Profission;
		
		private System.Nullable<System.DateTime> _AdmissionDate;
		
		private System.Nullable<decimal> _Salary;
		
		private string _CompanyName;
		
		private string _Post;
		
		private string _CompanyAddressNumber;
		
		private string _CompanyAddressComp;
		
		private string _CompanyPostalCode;
		
		private string _CompanyPhone;
		
		private string _PersonalReferences1;
		
		private string _PersonalReferences2;
		
		private string _ComercialReferences1;
		
		private string _ComercialReferences2;
		
		private string _BornCity;
		
		private string _BornCountry;
		
		private System.Nullable<int> _DependentNumber;
		
		private System.Nullable<bool> _HasOwnHouse;
		
		private System.Nullable<decimal> _HouseRentValue;
		
		private System.Nullable<bool> _HasOwnCar;
		
		private System.Nullable<decimal> _CarLeasingValue;
		
		private System.Nullable<decimal> _CreditLimit;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Customer> _Customers;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Employee> _Employees;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<ProfileAddress> _ProfileAddresses;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Representant> _Representants;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Supplier> _Suppliers;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<User> _Users;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<EducationLevel> _EducationLevel;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<MaritalStatus> _MaritalStatus;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Address> _Address;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Sex> _Sex;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProfileIdChanging(int value);
    partial void OnProfileIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddressNumberChanging(string value);
    partial void OnAddressNumberChanged();
    partial void OnCPFChanging(string value);
    partial void OnCPFChanged();
    partial void OnAddressCompChanging(string value);
    partial void OnAddressCompChanged();
    partial void OnPostalCodeChanging(string value);
    partial void OnPostalCodeChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnBirthDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthDateChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    partial void OnRGChanging(string value);
    partial void OnRGChanged();
    partial void OnEducationLevelIdChanging(System.Nullable<int> value);
    partial void OnEducationLevelIdChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnHomePhoneChanging(string value);
    partial void OnHomePhoneChanged();
    partial void OnMaritalStatusIdChanging(System.Nullable<int> value);
    partial void OnMaritalStatusIdChanged();
    partial void OnCellPhoneChanging(string value);
    partial void OnCellPhoneChanged();
    partial void OnSexIdChanging(System.Nullable<int> value);
    partial void OnSexIdChanged();
    partial void OnProfessionalRegisterChanging(string value);
    partial void OnProfessionalRegisterChanged();
    partial void OnVotingTitleChanging(string value);
    partial void OnVotingTitleChanged();
    partial void OnObservationsChanging(string value);
    partial void OnObservationsChanged();
    partial void OnRecoveryAddressNumberChanging(string value);
    partial void OnRecoveryAddressNumberChanged();
    partial void OnRecoveryPostalCodeChanging(string value);
    partial void OnRecoveryPostalCodeChanged();
    partial void OnRecoveryAddressCompChanging(string value);
    partial void OnRecoveryAddressCompChanged();
    partial void OnRgCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRgCreatedDateChanged();
    partial void OnCnhExpiresDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCnhExpiresDateChanged();
    partial void OnCnhNumberChanging(string value);
    partial void OnCnhNumberChanged();
    partial void OnCnhClassChanging(string value);
    partial void OnCnhClassChanged();
    partial void OnIssueBureauChanging(string value);
    partial void OnIssueBureauChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnFatherNameChanging(string value);
    partial void OnFatherNameChanged();
    partial void OnMotherNameChanging(string value);
    partial void OnMotherNameChanged();
    partial void OnProfissionChanging(string value);
    partial void OnProfissionChanged();
    partial void OnAdmissionDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAdmissionDateChanged();
    partial void OnSalaryChanging(System.Nullable<decimal> value);
    partial void OnSalaryChanged();
    partial void OnCompanyNameChanging(string value);
    partial void OnCompanyNameChanged();
    partial void OnPostChanging(string value);
    partial void OnPostChanged();
    partial void OnCompanyAddressNumberChanging(string value);
    partial void OnCompanyAddressNumberChanged();
    partial void OnCompanyAddressCompChanging(string value);
    partial void OnCompanyAddressCompChanged();
    partial void OnCompanyPostalCodeChanging(string value);
    partial void OnCompanyPostalCodeChanged();
    partial void OnCompanyPhoneChanging(string value);
    partial void OnCompanyPhoneChanged();
    partial void OnPersonalReferences1Changing(string value);
    partial void OnPersonalReferences1Changed();
    partial void OnPersonalReferences2Changing(string value);
    partial void OnPersonalReferences2Changed();
    partial void OnComercialReferences1Changing(string value);
    partial void OnComercialReferences1Changed();
    partial void OnComercialReferences2Changing(string value);
    partial void OnComercialReferences2Changed();
    partial void OnBornCityChanging(string value);
    partial void OnBornCityChanged();
    partial void OnBornCountryChanging(string value);
    partial void OnBornCountryChanged();
    partial void OnDependentNumberChanging(System.Nullable<int> value);
    partial void OnDependentNumberChanged();
    partial void OnHasOwnHouseChanging(System.Nullable<bool> value);
    partial void OnHasOwnHouseChanged();
    partial void OnHouseRentValueChanging(System.Nullable<decimal> value);
    partial void OnHouseRentValueChanged();
    partial void OnHasOwnCarChanging(System.Nullable<bool> value);
    partial void OnHasOwnCarChanged();
    partial void OnCarLeasingValueChanging(System.Nullable<decimal> value);
    partial void OnCarLeasingValueChanged();
    partial void OnCreditLimitChanging(System.Nullable<decimal> value);
    partial void OnCreditLimitChanged();
    #endregion
		
		public Profile()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ProfileId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int ProfileId
		{
			get
			{
				return this._ProfileId;
			}
			set
			{
				if ((this._ProfileId != value))
				{
					this.OnProfileIdChanging(value);
					this.SendPropertyChanging();
					this._ProfileId = value;
					this.SendPropertyChanged("ProfileId");
					this.OnProfileIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(100)")]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_AddressNumber", DbType="VarChar(10)")]
		[DataMember(Order=3)]
		public string AddressNumber
		{
			get
			{
				return this._AddressNumber;
			}
			set
			{
				if ((this._AddressNumber != value))
				{
					this.OnAddressNumberChanging(value);
					this.SendPropertyChanging();
					this._AddressNumber = value;
					this.SendPropertyChanged("AddressNumber");
					this.OnAddressNumberChanged();
				}
			}
		}
		
		[Column(Storage="_CPF", DbType="VarChar(14) NOT NULL", CanBeNull=false)]
		[DataMember(Order=4)]
		public string CPF
		{
			get
			{
				return this._CPF;
			}
			set
			{
				if ((this._CPF != value))
				{
					this.OnCPFChanging(value);
					this.SendPropertyChanging();
					this._CPF = value;
					this.SendPropertyChanged("CPF");
					this.OnCPFChanged();
				}
			}
		}
		
		[Column(Storage="_AddressComp", DbType="VarChar(50)")]
		[DataMember(Order=5)]
		public string AddressComp
		{
			get
			{
				return this._AddressComp;
			}
			set
			{
				if ((this._AddressComp != value))
				{
					this.OnAddressCompChanging(value);
					this.SendPropertyChanging();
					this._AddressComp = value;
					this.SendPropertyChanged("AddressComp");
					this.OnAddressCompChanged();
				}
			}
		}
		
		[Column(Storage="_PostalCode", DbType="Char(8)")]
		[DataMember(Order=6)]
		public string PostalCode
		{
			get
			{
				return this._PostalCode;
			}
			set
			{
				if ((this._PostalCode != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPostalCodeChanging(value);
					this.SendPropertyChanging();
					this._PostalCode = value;
					this.SendPropertyChanged("PostalCode");
					this.OnPostalCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Phone", DbType="VarChar(64)")]
		[DataMember(Order=7)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_BirthDate", DbType="DateTime")]
		[DataMember(Order=8)]
		public System.Nullable<System.DateTime> BirthDate
		{
			get
			{
				return this._BirthDate;
			}
			set
			{
				if ((this._BirthDate != value))
				{
					this.OnBirthDateChanging(value);
					this.SendPropertyChanging();
					this._BirthDate = value;
					this.SendPropertyChanged("BirthDate");
					this.OnBirthDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime")]
		[DataMember(Order=9)]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_RG", DbType="VarChar(20)")]
		[DataMember(Order=10)]
		public string RG
		{
			get
			{
				return this._RG;
			}
			set
			{
				if ((this._RG != value))
				{
					this.OnRGChanging(value);
					this.SendPropertyChanging();
					this._RG = value;
					this.SendPropertyChanged("RG");
					this.OnRGChanged();
				}
			}
		}
		
		[Column(Storage="_EducationLevelId", DbType="Int")]
		[DataMember(Order=11)]
		public System.Nullable<int> EducationLevelId
		{
			get
			{
				return this._EducationLevelId;
			}
			set
			{
				if ((this._EducationLevelId != value))
				{
					if (this._EducationLevel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEducationLevelIdChanging(value);
					this.SendPropertyChanging();
					this._EducationLevelId = value;
					this.SendPropertyChanged("EducationLevelId");
					this.OnEducationLevelIdChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="VarChar(50)")]
		[DataMember(Order=12)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_HomePhone", DbType="VarChar(50)")]
		[DataMember(Order=13)]
		public string HomePhone
		{
			get
			{
				return this._HomePhone;
			}
			set
			{
				if ((this._HomePhone != value))
				{
					this.OnHomePhoneChanging(value);
					this.SendPropertyChanging();
					this._HomePhone = value;
					this.SendPropertyChanged("HomePhone");
					this.OnHomePhoneChanged();
				}
			}
		}
		
		[Column(Storage="_MaritalStatusId", DbType="Int")]
		[DataMember(Order=14)]
		public System.Nullable<int> MaritalStatusId
		{
			get
			{
				return this._MaritalStatusId;
			}
			set
			{
				if ((this._MaritalStatusId != value))
				{
					if (this._MaritalStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaritalStatusIdChanging(value);
					this.SendPropertyChanging();
					this._MaritalStatusId = value;
					this.SendPropertyChanged("MaritalStatusId");
					this.OnMaritalStatusIdChanged();
				}
			}
		}
		
		[Column(Storage="_CellPhone", DbType="VarChar(50)")]
		[DataMember(Order=15)]
		public string CellPhone
		{
			get
			{
				return this._CellPhone;
			}
			set
			{
				if ((this._CellPhone != value))
				{
					this.OnCellPhoneChanging(value);
					this.SendPropertyChanging();
					this._CellPhone = value;
					this.SendPropertyChanged("CellPhone");
					this.OnCellPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_SexId", DbType="Int")]
		[DataMember(Order=16)]
		public System.Nullable<int> SexId
		{
			get
			{
				return this._SexId;
			}
			set
			{
				if ((this._SexId != value))
				{
					if (this._Sex.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSexIdChanging(value);
					this.SendPropertyChanging();
					this._SexId = value;
					this.SendPropertyChanged("SexId");
					this.OnSexIdChanged();
				}
			}
		}
		
		[Column(Storage="_ProfessionalRegister", DbType="VarChar(50)")]
		[DataMember(Order=17)]
		public string ProfessionalRegister
		{
			get
			{
				return this._ProfessionalRegister;
			}
			set
			{
				if ((this._ProfessionalRegister != value))
				{
					this.OnProfessionalRegisterChanging(value);
					this.SendPropertyChanging();
					this._ProfessionalRegister = value;
					this.SendPropertyChanged("ProfessionalRegister");
					this.OnProfessionalRegisterChanged();
				}
			}
		}
		
		[Column(Storage="_VotingTitle", DbType="VarChar(50)")]
		[DataMember(Order=18)]
		public string VotingTitle
		{
			get
			{
				return this._VotingTitle;
			}
			set
			{
				if ((this._VotingTitle != value))
				{
					this.OnVotingTitleChanging(value);
					this.SendPropertyChanging();
					this._VotingTitle = value;
					this.SendPropertyChanged("VotingTitle");
					this.OnVotingTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Observations", DbType="VarChar(200)")]
		[DataMember(Order=19)]
		public string Observations
		{
			get
			{
				return this._Observations;
			}
			set
			{
				if ((this._Observations != value))
				{
					this.OnObservationsChanging(value);
					this.SendPropertyChanging();
					this._Observations = value;
					this.SendPropertyChanged("Observations");
					this.OnObservationsChanged();
				}
			}
		}
		
		[Column(Storage="_RecoveryAddressNumber", DbType="VarChar(50)")]
		[DataMember(Order=20)]
		public string RecoveryAddressNumber
		{
			get
			{
				return this._RecoveryAddressNumber;
			}
			set
			{
				if ((this._RecoveryAddressNumber != value))
				{
					this.OnRecoveryAddressNumberChanging(value);
					this.SendPropertyChanging();
					this._RecoveryAddressNumber = value;
					this.SendPropertyChanged("RecoveryAddressNumber");
					this.OnRecoveryAddressNumberChanged();
				}
			}
		}
		
		[Column(Storage="_RecoveryPostalCode", DbType="Char(8)")]
		[DataMember(Order=21)]
		public string RecoveryPostalCode
		{
			get
			{
				return this._RecoveryPostalCode;
			}
			set
			{
				if ((this._RecoveryPostalCode != value))
				{
					this.OnRecoveryPostalCodeChanging(value);
					this.SendPropertyChanging();
					this._RecoveryPostalCode = value;
					this.SendPropertyChanged("RecoveryPostalCode");
					this.OnRecoveryPostalCodeChanged();
				}
			}
		}
		
		[Column(Storage="_RecoveryAddressComp", DbType="VarChar(50)")]
		[DataMember(Order=22)]
		public string RecoveryAddressComp
		{
			get
			{
				return this._RecoveryAddressComp;
			}
			set
			{
				if ((this._RecoveryAddressComp != value))
				{
					this.OnRecoveryAddressCompChanging(value);
					this.SendPropertyChanging();
					this._RecoveryAddressComp = value;
					this.SendPropertyChanged("RecoveryAddressComp");
					this.OnRecoveryAddressCompChanged();
				}
			}
		}
		
		[Column(Storage="_RgCreatedDate", DbType="DateTime")]
		[DataMember(Order=23)]
		public System.Nullable<System.DateTime> RgCreatedDate
		{
			get
			{
				return this._RgCreatedDate;
			}
			set
			{
				if ((this._RgCreatedDate != value))
				{
					this.OnRgCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._RgCreatedDate = value;
					this.SendPropertyChanged("RgCreatedDate");
					this.OnRgCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_CnhExpiresDate", DbType="DateTime")]
		[DataMember(Order=24)]
		public System.Nullable<System.DateTime> CnhExpiresDate
		{
			get
			{
				return this._CnhExpiresDate;
			}
			set
			{
				if ((this._CnhExpiresDate != value))
				{
					this.OnCnhExpiresDateChanging(value);
					this.SendPropertyChanging();
					this._CnhExpiresDate = value;
					this.SendPropertyChanged("CnhExpiresDate");
					this.OnCnhExpiresDateChanged();
				}
			}
		}
		
		[Column(Storage="_CnhNumber", DbType="VarChar(50)")]
		[DataMember(Order=25)]
		public string CnhNumber
		{
			get
			{
				return this._CnhNumber;
			}
			set
			{
				if ((this._CnhNumber != value))
				{
					this.OnCnhNumberChanging(value);
					this.SendPropertyChanging();
					this._CnhNumber = value;
					this.SendPropertyChanged("CnhNumber");
					this.OnCnhNumberChanged();
				}
			}
		}
		
		[Column(Storage="_CnhClass", DbType="VarChar(50)")]
		[DataMember(Order=26)]
		public string CnhClass
		{
			get
			{
				return this._CnhClass;
			}
			set
			{
				if ((this._CnhClass != value))
				{
					this.OnCnhClassChanging(value);
					this.SendPropertyChanging();
					this._CnhClass = value;
					this.SendPropertyChanged("CnhClass");
					this.OnCnhClassChanged();
				}
			}
		}
		
		[Column(Storage="_IssueBureau", DbType="VarChar(50)")]
		[DataMember(Order=27)]
		public string IssueBureau
		{
			get
			{
				return this._IssueBureau;
			}
			set
			{
				if ((this._IssueBureau != value))
				{
					this.OnIssueBureauChanging(value);
					this.SendPropertyChanging();
					this._IssueBureau = value;
					this.SendPropertyChanged("IssueBureau");
					this.OnIssueBureauChanged();
				}
			}
		}
		
		[Column(Storage="_Fax", DbType="VarChar(50)")]
		[DataMember(Order=28)]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}
		
		[Column(Storage="_FatherName", DbType="VarChar(100)")]
		[DataMember(Order=29)]
		public string FatherName
		{
			get
			{
				return this._FatherName;
			}
			set
			{
				if ((this._FatherName != value))
				{
					this.OnFatherNameChanging(value);
					this.SendPropertyChanging();
					this._FatherName = value;
					this.SendPropertyChanged("FatherName");
					this.OnFatherNameChanged();
				}
			}
		}
		
		[Column(Storage="_MotherName", DbType="VarChar(100)")]
		[DataMember(Order=30)]
		public string MotherName
		{
			get
			{
				return this._MotherName;
			}
			set
			{
				if ((this._MotherName != value))
				{
					this.OnMotherNameChanging(value);
					this.SendPropertyChanging();
					this._MotherName = value;
					this.SendPropertyChanged("MotherName");
					this.OnMotherNameChanged();
				}
			}
		}
		
		[Column(Storage="_Profission", DbType="VarChar(50)")]
		[DataMember(Order=31)]
		public string Profission
		{
			get
			{
				return this._Profission;
			}
			set
			{
				if ((this._Profission != value))
				{
					this.OnProfissionChanging(value);
					this.SendPropertyChanging();
					this._Profission = value;
					this.SendPropertyChanged("Profission");
					this.OnProfissionChanged();
				}
			}
		}
		
		[Column(Storage="_AdmissionDate", DbType="DateTime")]
		[DataMember(Order=32)]
		public System.Nullable<System.DateTime> AdmissionDate
		{
			get
			{
				return this._AdmissionDate;
			}
			set
			{
				if ((this._AdmissionDate != value))
				{
					this.OnAdmissionDateChanging(value);
					this.SendPropertyChanging();
					this._AdmissionDate = value;
					this.SendPropertyChanged("AdmissionDate");
					this.OnAdmissionDateChanged();
				}
			}
		}
		
		[Column(Storage="_Salary", DbType="Decimal(18,2)")]
		[DataMember(Order=33)]
		public System.Nullable<decimal> Salary
		{
			get
			{
				return this._Salary;
			}
			set
			{
				if ((this._Salary != value))
				{
					this.OnSalaryChanging(value);
					this.SendPropertyChanging();
					this._Salary = value;
					this.SendPropertyChanged("Salary");
					this.OnSalaryChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyName", DbType="VarChar(50)")]
		[DataMember(Order=34)]
		public string CompanyName
		{
			get
			{
				return this._CompanyName;
			}
			set
			{
				if ((this._CompanyName != value))
				{
					this.OnCompanyNameChanging(value);
					this.SendPropertyChanging();
					this._CompanyName = value;
					this.SendPropertyChanged("CompanyName");
					this.OnCompanyNameChanged();
				}
			}
		}
		
		[Column(Storage="_Post", DbType="VarChar(50)")]
		[DataMember(Order=35)]
		public string Post
		{
			get
			{
				return this._Post;
			}
			set
			{
				if ((this._Post != value))
				{
					this.OnPostChanging(value);
					this.SendPropertyChanging();
					this._Post = value;
					this.SendPropertyChanged("Post");
					this.OnPostChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyAddressNumber", DbType="VarChar(10)")]
		[DataMember(Order=36)]
		public string CompanyAddressNumber
		{
			get
			{
				return this._CompanyAddressNumber;
			}
			set
			{
				if ((this._CompanyAddressNumber != value))
				{
					this.OnCompanyAddressNumberChanging(value);
					this.SendPropertyChanging();
					this._CompanyAddressNumber = value;
					this.SendPropertyChanged("CompanyAddressNumber");
					this.OnCompanyAddressNumberChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyAddressComp", DbType="VarChar(50)")]
		[DataMember(Order=37)]
		public string CompanyAddressComp
		{
			get
			{
				return this._CompanyAddressComp;
			}
			set
			{
				if ((this._CompanyAddressComp != value))
				{
					this.OnCompanyAddressCompChanging(value);
					this.SendPropertyChanging();
					this._CompanyAddressComp = value;
					this.SendPropertyChanged("CompanyAddressComp");
					this.OnCompanyAddressCompChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyPostalCode", DbType="Char(8)")]
		[DataMember(Order=38)]
		public string CompanyPostalCode
		{
			get
			{
				return this._CompanyPostalCode;
			}
			set
			{
				if ((this._CompanyPostalCode != value))
				{
					this.OnCompanyPostalCodeChanging(value);
					this.SendPropertyChanging();
					this._CompanyPostalCode = value;
					this.SendPropertyChanged("CompanyPostalCode");
					this.OnCompanyPostalCodeChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyPhone", DbType="VarChar(50)")]
		[DataMember(Order=39)]
		public string CompanyPhone
		{
			get
			{
				return this._CompanyPhone;
			}
			set
			{
				if ((this._CompanyPhone != value))
				{
					this.OnCompanyPhoneChanging(value);
					this.SendPropertyChanging();
					this._CompanyPhone = value;
					this.SendPropertyChanged("CompanyPhone");
					this.OnCompanyPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_PersonalReferences1", DbType="VarChar(100)")]
		[DataMember(Order=40)]
		public string PersonalReferences1
		{
			get
			{
				return this._PersonalReferences1;
			}
			set
			{
				if ((this._PersonalReferences1 != value))
				{
					this.OnPersonalReferences1Changing(value);
					this.SendPropertyChanging();
					this._PersonalReferences1 = value;
					this.SendPropertyChanged("PersonalReferences1");
					this.OnPersonalReferences1Changed();
				}
			}
		}
		
		[Column(Storage="_PersonalReferences2", DbType="VarChar(100)")]
		[DataMember(Order=41)]
		public string PersonalReferences2
		{
			get
			{
				return this._PersonalReferences2;
			}
			set
			{
				if ((this._PersonalReferences2 != value))
				{
					this.OnPersonalReferences2Changing(value);
					this.SendPropertyChanging();
					this._PersonalReferences2 = value;
					this.SendPropertyChanged("PersonalReferences2");
					this.OnPersonalReferences2Changed();
				}
			}
		}
		
		[Column(Storage="_ComercialReferences1", DbType="VarChar(100)")]
		[DataMember(Order=42)]
		public string ComercialReferences1
		{
			get
			{
				return this._ComercialReferences1;
			}
			set
			{
				if ((this._ComercialReferences1 != value))
				{
					this.OnComercialReferences1Changing(value);
					this.SendPropertyChanging();
					this._ComercialReferences1 = value;
					this.SendPropertyChanged("ComercialReferences1");
					this.OnComercialReferences1Changed();
				}
			}
		}
		
		[Column(Storage="_ComercialReferences2", DbType="VarChar(100)")]
		[DataMember(Order=43)]
		public string ComercialReferences2
		{
			get
			{
				return this._ComercialReferences2;
			}
			set
			{
				if ((this._ComercialReferences2 != value))
				{
					this.OnComercialReferences2Changing(value);
					this.SendPropertyChanging();
					this._ComercialReferences2 = value;
					this.SendPropertyChanged("ComercialReferences2");
					this.OnComercialReferences2Changed();
				}
			}
		}
		
		[Column(Storage="_BornCity", DbType="VarChar(100)")]
		[DataMember(Order=44)]
		public string BornCity
		{
			get
			{
				return this._BornCity;
			}
			set
			{
				if ((this._BornCity != value))
				{
					this.OnBornCityChanging(value);
					this.SendPropertyChanging();
					this._BornCity = value;
					this.SendPropertyChanged("BornCity");
					this.OnBornCityChanged();
				}
			}
		}
		
		[Column(Storage="_BornCountry", DbType="VarChar(100)")]
		[DataMember(Order=45)]
		public string BornCountry
		{
			get
			{
				return this._BornCountry;
			}
			set
			{
				if ((this._BornCountry != value))
				{
					this.OnBornCountryChanging(value);
					this.SendPropertyChanging();
					this._BornCountry = value;
					this.SendPropertyChanged("BornCountry");
					this.OnBornCountryChanged();
				}
			}
		}
		
		[Column(Storage="_DependentNumber", DbType="Int")]
		[DataMember(Order=46)]
		public System.Nullable<int> DependentNumber
		{
			get
			{
				return this._DependentNumber;
			}
			set
			{
				if ((this._DependentNumber != value))
				{
					this.OnDependentNumberChanging(value);
					this.SendPropertyChanging();
					this._DependentNumber = value;
					this.SendPropertyChanged("DependentNumber");
					this.OnDependentNumberChanged();
				}
			}
		}
		
		[Column(Storage="_HasOwnHouse", DbType="Bit")]
		[DataMember(Order=47)]
		public System.Nullable<bool> HasOwnHouse
		{
			get
			{
				return this._HasOwnHouse;
			}
			set
			{
				if ((this._HasOwnHouse != value))
				{
					this.OnHasOwnHouseChanging(value);
					this.SendPropertyChanging();
					this._HasOwnHouse = value;
					this.SendPropertyChanged("HasOwnHouse");
					this.OnHasOwnHouseChanged();
				}
			}
		}
		
		[Column(Storage="_HouseRentValue", DbType="Decimal(18,2)")]
		[DataMember(Order=48)]
		public System.Nullable<decimal> HouseRentValue
		{
			get
			{
				return this._HouseRentValue;
			}
			set
			{
				if ((this._HouseRentValue != value))
				{
					this.OnHouseRentValueChanging(value);
					this.SendPropertyChanging();
					this._HouseRentValue = value;
					this.SendPropertyChanged("HouseRentValue");
					this.OnHouseRentValueChanged();
				}
			}
		}
		
		[Column(Storage="_HasOwnCar", DbType="Bit")]
		[DataMember(Order=49)]
		public System.Nullable<bool> HasOwnCar
		{
			get
			{
				return this._HasOwnCar;
			}
			set
			{
				if ((this._HasOwnCar != value))
				{
					this.OnHasOwnCarChanging(value);
					this.SendPropertyChanging();
					this._HasOwnCar = value;
					this.SendPropertyChanged("HasOwnCar");
					this.OnHasOwnCarChanged();
				}
			}
		}
		
		[Column(Storage="_CarLeasingValue", DbType="Decimal(18,2)")]
		[DataMember(Order=50)]
		public System.Nullable<decimal> CarLeasingValue
		{
			get
			{
				return this._CarLeasingValue;
			}
			set
			{
				if ((this._CarLeasingValue != value))
				{
					this.OnCarLeasingValueChanging(value);
					this.SendPropertyChanging();
					this._CarLeasingValue = value;
					this.SendPropertyChanged("CarLeasingValue");
					this.OnCarLeasingValueChanged();
				}
			}
		}
		
		[Column(Storage="_CreditLimit", DbType="Decimal(18,2)")]
		[DataMember(Order=51)]
		public System.Nullable<decimal> CreditLimit
		{
			get
			{
				return this._CreditLimit;
			}
			set
			{
				if ((this._CreditLimit != value))
				{
					this.OnCreditLimitChanging(value);
					this.SendPropertyChanging();
					this._CreditLimit = value;
					this.SendPropertyChanged("CreditLimit");
					this.OnCreditLimitChanged();
				}
			}
		}
		
		[Association(Name="Profile_Customer", Storage="_Customers", ThisKey="ProfileId", OtherKey="ProfileId")]
		[DataMember(Order=52, EmitDefaultValue=false)]
		public EntitySet<Customer> Customers
		{
			get
			{
				if ((this.serializing 
							&& (this._Customers.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Customers;
			}
			set
			{
				this._Customers.Assign(value);
			}
		}
		
		[Association(Name="Profile_Employee", Storage="_Employees", ThisKey="ProfileId", OtherKey="ProfileId")]
		[DataMember(Order=53, EmitDefaultValue=false)]
		public EntitySet<Employee> Employees
		{
			get
			{
				if ((this.serializing 
							&& (this._Employees.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		[Association(Name="Profile_ProfileAddress", Storage="_ProfileAddresses", ThisKey="ProfileId", OtherKey="ProfileId")]
		[DataMember(Order=54, EmitDefaultValue=false)]
		public EntitySet<ProfileAddress> ProfileAddresses
		{
			get
			{
				if ((this.serializing 
							&& (this._ProfileAddresses.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ProfileAddresses;
			}
			set
			{
				this._ProfileAddresses.Assign(value);
			}
		}
		
		[Association(Name="Profile_Representant", Storage="_Representants", ThisKey="ProfileId", OtherKey="ProfileId")]
		[DataMember(Order=55, EmitDefaultValue=false)]
		public EntitySet<Representant> Representants
		{
			get
			{
				if ((this.serializing 
							&& (this._Representants.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Representants;
			}
			set
			{
				this._Representants.Assign(value);
			}
		}
		
		[Association(Name="Profile_Supplier", Storage="_Suppliers", ThisKey="ProfileId", OtherKey="ProfileId")]
		[DataMember(Order=56, EmitDefaultValue=false)]
		public EntitySet<Supplier> Suppliers
		{
			get
			{
				if ((this.serializing 
							&& (this._Suppliers.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Suppliers;
			}
			set
			{
				this._Suppliers.Assign(value);
			}
		}
		
		[Association(Name="Profile_User", Storage="_Users", ThisKey="ProfileId", OtherKey="ProfileId")]
		[DataMember(Order=57, EmitDefaultValue=false)]
		public EntitySet<User> Users
		{
			get
			{
				if ((this.serializing 
							&& (this._Users.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[Association(Name="EducationLevel_Profile", Storage="_EducationLevel", ThisKey="EducationLevelId", OtherKey="EducationLevelId", IsForeignKey=true)]
		public EducationLevel EducationLevel
		{
			get
			{
				return this._EducationLevel.Entity;
			}
			set
			{
				EducationLevel previousValue = this._EducationLevel.Entity;
				if (((previousValue != value) 
							|| (this._EducationLevel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EducationLevel.Entity = null;
						previousValue.Profiles.Remove(this);
					}
					this._EducationLevel.Entity = value;
					if ((value != null))
					{
						value.Profiles.Add(this);
						this._EducationLevelId = value.EducationLevelId;
					}
					else
					{
						this._EducationLevelId = default(Nullable<int>);
					}
					this.SendPropertyChanged("EducationLevel");
				}
			}
		}
		
		[Association(Name="MaritalStatus_Profile", Storage="_MaritalStatus", ThisKey="MaritalStatusId", OtherKey="MaritalStatusId", IsForeignKey=true)]
		public MaritalStatus MaritalStatus
		{
			get
			{
				return this._MaritalStatus.Entity;
			}
			set
			{
				MaritalStatus previousValue = this._MaritalStatus.Entity;
				if (((previousValue != value) 
							|| (this._MaritalStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MaritalStatus.Entity = null;
						previousValue.Profiles.Remove(this);
					}
					this._MaritalStatus.Entity = value;
					if ((value != null))
					{
						value.Profiles.Add(this);
						this._MaritalStatusId = value.MaritalStatusId;
					}
					else
					{
						this._MaritalStatusId = default(Nullable<int>);
					}
					this.SendPropertyChanged("MaritalStatus");
				}
			}
		}
		
		[Association(Name="Address_Profile", Storage="_Address", ThisKey="PostalCode", OtherKey="PostalCode", IsForeignKey=true)]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.Profiles.Remove(this);
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.Profiles.Add(this);
						this._PostalCode = value.PostalCode;
					}
					else
					{
						this._PostalCode = default(string);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		[Association(Name="Sex_Profile", Storage="_Sex", ThisKey="SexId", OtherKey="SexId", IsForeignKey=true)]
		public Sex Sex
		{
			get
			{
				return this._Sex.Entity;
			}
			set
			{
				Sex previousValue = this._Sex.Entity;
				if (((previousValue != value) 
							|| (this._Sex.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sex.Entity = null;
						previousValue.Profiles.Remove(this);
					}
					this._Sex.Entity = value;
					if ((value != null))
					{
						value.Profiles.Add(this);
						this._SexId = value.SexId;
					}
					else
					{
						this._SexId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Sex");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.Profile = this;
		}
		
		private void detach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.Profile = null;
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Profile = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Profile = null;
		}
		
		private void attach_ProfileAddresses(ProfileAddress entity)
		{
			this.SendPropertyChanging();
			entity.Profile = this;
		}
		
		private void detach_ProfileAddresses(ProfileAddress entity)
		{
			this.SendPropertyChanging();
			entity.Profile = null;
		}
		
		private void attach_Representants(Representant entity)
		{
			this.SendPropertyChanging();
			entity.Profile = this;
		}
		
		private void detach_Representants(Representant entity)
		{
			this.SendPropertyChanging();
			entity.Profile = null;
		}
		
		private void attach_Suppliers(Supplier entity)
		{
			this.SendPropertyChanging();
			entity.Profile = this;
		}
		
		private void detach_Suppliers(Supplier entity)
		{
			this.SendPropertyChanging();
			entity.Profile = null;
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Profile = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Profile = null;
		}
		
		private void Initialize()
		{
			this._Customers = new EntitySet<Customer>(new Action<Customer>(this.attach_Customers), new Action<Customer>(this.detach_Customers));
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			this._ProfileAddresses = new EntitySet<ProfileAddress>(new Action<ProfileAddress>(this.attach_ProfileAddresses), new Action<ProfileAddress>(this.detach_ProfileAddresses));
			this._Representants = new EntitySet<Representant>(new Action<Representant>(this.attach_Representants), new Action<Representant>(this.detach_Representants));
			this._Suppliers = new EntitySet<Supplier>(new Action<Supplier>(this.attach_Suppliers), new Action<Supplier>(this.detach_Suppliers));
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._EducationLevel = default(EntityRef<EducationLevel>);
			this._MaritalStatus = default(EntityRef<MaritalStatus>);
			this._Address = default(EntityRef<Address>);
			this._Sex = default(EntityRef<Sex>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.ProfileAddress")]
	[DataContract()]
	public partial class ProfileAddress : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ProfileAddressId;
		
		private System.Nullable<int> _ProfileId;
		
		private string _PostalCode;
		
		private System.Nullable<int> _LegalEntityProfileId;
		
		private string _AddressComp;
		
		private string _AddressNumber;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<LegalEntityProfile> _LegalEntityProfile;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Profile> _Profile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProfileAddressIdChanging(string value);
    partial void OnProfileAddressIdChanged();
    partial void OnProfileIdChanging(System.Nullable<int> value);
    partial void OnProfileIdChanged();
    partial void OnPostalCodeChanging(string value);
    partial void OnPostalCodeChanged();
    partial void OnLegalEntityProfileIdChanging(System.Nullable<int> value);
    partial void OnLegalEntityProfileIdChanged();
    partial void OnAddressCompChanging(string value);
    partial void OnAddressCompChanged();
    partial void OnAddressNumberChanging(string value);
    partial void OnAddressNumberChanged();
    #endregion
		
		public ProfileAddress()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ProfileAddressId", DbType="Char(18) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		[DataMember(Order=1)]
		public string ProfileAddressId
		{
			get
			{
				return this._ProfileAddressId;
			}
			set
			{
				if ((this._ProfileAddressId != value))
				{
					this.OnProfileAddressIdChanging(value);
					this.SendPropertyChanging();
					this._ProfileAddressId = value;
					this.SendPropertyChanged("ProfileAddressId");
					this.OnProfileAddressIdChanged();
				}
			}
		}
		
		[Column(Storage="_ProfileId", DbType="Int")]
		[DataMember(Order=2)]
		public System.Nullable<int> ProfileId
		{
			get
			{
				return this._ProfileId;
			}
			set
			{
				if ((this._ProfileId != value))
				{
					if (this._Profile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProfileIdChanging(value);
					this.SendPropertyChanging();
					this._ProfileId = value;
					this.SendPropertyChanged("ProfileId");
					this.OnProfileIdChanged();
				}
			}
		}
		
		[Column(Storage="_PostalCode", DbType="Char(8) NOT NULL", CanBeNull=false)]
		[DataMember(Order=3)]
		public string PostalCode
		{
			get
			{
				return this._PostalCode;
			}
			set
			{
				if ((this._PostalCode != value))
				{
					this.OnPostalCodeChanging(value);
					this.SendPropertyChanging();
					this._PostalCode = value;
					this.SendPropertyChanged("PostalCode");
					this.OnPostalCodeChanged();
				}
			}
		}
		
		[Column(Storage="_LegalEntityProfileId", DbType="Int")]
		[DataMember(Order=4)]
		public System.Nullable<int> LegalEntityProfileId
		{
			get
			{
				return this._LegalEntityProfileId;
			}
			set
			{
				if ((this._LegalEntityProfileId != value))
				{
					if (this._LegalEntityProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLegalEntityProfileIdChanging(value);
					this.SendPropertyChanging();
					this._LegalEntityProfileId = value;
					this.SendPropertyChanged("LegalEntityProfileId");
					this.OnLegalEntityProfileIdChanged();
				}
			}
		}
		
		[Column(Storage="_AddressComp", DbType="VarChar(50)")]
		[DataMember(Order=5)]
		public string AddressComp
		{
			get
			{
				return this._AddressComp;
			}
			set
			{
				if ((this._AddressComp != value))
				{
					this.OnAddressCompChanging(value);
					this.SendPropertyChanging();
					this._AddressComp = value;
					this.SendPropertyChanged("AddressComp");
					this.OnAddressCompChanged();
				}
			}
		}
		
		[Column(Storage="_AddressNumber", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		[DataMember(Order=6)]
		public string AddressNumber
		{
			get
			{
				return this._AddressNumber;
			}
			set
			{
				if ((this._AddressNumber != value))
				{
					this.OnAddressNumberChanging(value);
					this.SendPropertyChanging();
					this._AddressNumber = value;
					this.SendPropertyChanged("AddressNumber");
					this.OnAddressNumberChanged();
				}
			}
		}
		
		[Association(Name="LegalEntityProfile_ProfileAddress", Storage="_LegalEntityProfile", ThisKey="LegalEntityProfileId", OtherKey="LegalEntityProfileId", IsForeignKey=true, DeleteRule="CASCADE")]
		public LegalEntityProfile LegalEntityProfile
		{
			get
			{
				return this._LegalEntityProfile.Entity;
			}
			set
			{
				LegalEntityProfile previousValue = this._LegalEntityProfile.Entity;
				if (((previousValue != value) 
							|| (this._LegalEntityProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LegalEntityProfile.Entity = null;
						previousValue.ProfileAddresses.Remove(this);
					}
					this._LegalEntityProfile.Entity = value;
					if ((value != null))
					{
						value.ProfileAddresses.Add(this);
						this._LegalEntityProfileId = value.LegalEntityProfileId;
					}
					else
					{
						this._LegalEntityProfileId = default(Nullable<int>);
					}
					this.SendPropertyChanged("LegalEntityProfile");
				}
			}
		}
		
		[Association(Name="Profile_ProfileAddress", Storage="_Profile", ThisKey="ProfileId", OtherKey="ProfileId", IsForeignKey=true, DeleteRule="CASCADE")]
		public Profile Profile
		{
			get
			{
				return this._Profile.Entity;
			}
			set
			{
				Profile previousValue = this._Profile.Entity;
				if (((previousValue != value) 
							|| (this._Profile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Profile.Entity = null;
						previousValue.ProfileAddresses.Remove(this);
					}
					this._Profile.Entity = value;
					if ((value != null))
					{
						value.ProfileAddresses.Add(this);
						this._ProfileId = value.ProfileId;
					}
					else
					{
						this._ProfileId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Profile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._LegalEntityProfile = default(EntityRef<LegalEntityProfile>);
			this._Profile = default(EntityRef<Profile>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.ProfitAssessment")]
	[DataContract()]
	public partial class ProfitAssessment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProfitAssessmentId;
		
		private string _Name;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Company> _Companies;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProfitAssessmentIdChanging(int value);
    partial void OnProfitAssessmentIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public ProfitAssessment()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ProfitAssessmentId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int ProfitAssessmentId
		{
			get
			{
				return this._ProfitAssessmentId;
			}
			set
			{
				if ((this._ProfitAssessmentId != value))
				{
					this.OnProfitAssessmentIdChanging(value);
					this.SendPropertyChanging();
					this._ProfitAssessmentId = value;
					this.SendPropertyChanged("ProfitAssessmentId");
					this.OnProfitAssessmentIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(120)")]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="ProfitAssessment_Company", Storage="_Companies", ThisKey="ProfitAssessmentId", OtherKey="ProfitAssessmentId")]
		[DataMember(Order=3, EmitDefaultValue=false)]
		public EntitySet<Company> Companies
		{
			get
			{
				if ((this.serializing 
							&& (this._Companies.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Companies;
			}
			set
			{
				this._Companies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Companies(Company entity)
		{
			this.SendPropertyChanging();
			entity.ProfitAssessment = this;
		}
		
		private void detach_Companies(Company entity)
		{
			this.SendPropertyChanging();
			entity.ProfitAssessment = null;
		}
		
		private void Initialize()
		{
			this._Companies = new EntitySet<Company>(new Action<Company>(this.attach_Companies), new Action<Company>(this.detach_Companies));
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.PurchaseOrder")]
	[DataContract()]
	public partial class PurchaseOrder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PurchaseOrderId;
		
		private int _CompanyId;
		
		private System.DateTime _ModifiedDate;
		
		private string _PurchaseOrderCode;
		
		private System.Nullable<int> _BillId;
		
		private int _PurchaseOrderStatusId;
		
		private int _PurchaseOrderDecision;
		
		private System.Nullable<int> _SupplierId;
		
		private System.Nullable<int> _EmployeeId;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<System.DateTime> _ApprovedDate;
		
		private System.Nullable<System.DateTime> _BoughtDate;
		
		private System.Nullable<System.DateTime> _ReceivedDate;
		
		private System.Nullable<System.DateTime> _DeliveryDate;
		
		private System.Nullable<int> _ApproverUserId;
		
		private System.Nullable<int> _ReceiverUserId;
		
		private System.Nullable<int> _BuyerUserId;
		
		private System.Nullable<int> _CreatorUserId;
		
		private string _ReceiptNumber;
		
		private System.Nullable<decimal> _ReceiptTotalValue;
		
		private System.Nullable<System.DateTime> _ReceiptDate;
		
		private System.Nullable<int> _ReceiptEmployeeId;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<PurchaseOrderItem> _PurchaseOrderItems;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Quotation> _Quotations;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Company> _Company;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Bill> _Bill;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Employee> _Employee;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<PurchaseOrderStatus> _PurchaseOrderStatus;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Supplier> _Supplier;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<User> _User;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<User> _User1;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<User> _User2;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<User> _User3;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPurchaseOrderIdChanging(int value);
    partial void OnPurchaseOrderIdChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnPurchaseOrderCodeChanging(string value);
    partial void OnPurchaseOrderCodeChanged();
    partial void OnBillIdChanging(System.Nullable<int> value);
    partial void OnBillIdChanged();
    partial void OnPurchaseOrderStatusIdChanging(int value);
    partial void OnPurchaseOrderStatusIdChanged();
    partial void OnPurchaseOrderDecisionChanging(int value);
    partial void OnPurchaseOrderDecisionChanged();
    partial void OnSupplierIdChanging(System.Nullable<int> value);
    partial void OnSupplierIdChanged();
    partial void OnEmployeeIdChanging(System.Nullable<int> value);
    partial void OnEmployeeIdChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnApprovedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnApprovedDateChanged();
    partial void OnBoughtDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBoughtDateChanged();
    partial void OnReceivedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnReceivedDateChanged();
    partial void OnDeliveryDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeliveryDateChanged();
    partial void OnApproverUserIdChanging(System.Nullable<int> value);
    partial void OnApproverUserIdChanged();
    partial void OnReceiverUserIdChanging(System.Nullable<int> value);
    partial void OnReceiverUserIdChanged();
    partial void OnBuyerUserIdChanging(System.Nullable<int> value);
    partial void OnBuyerUserIdChanged();
    partial void OnCreatorUserIdChanging(System.Nullable<int> value);
    partial void OnCreatorUserIdChanged();
    partial void OnReceiptNumberChanging(string value);
    partial void OnReceiptNumberChanged();
    partial void OnReceiptTotalValueChanging(System.Nullable<decimal> value);
    partial void OnReceiptTotalValueChanged();
    partial void OnReceiptDateChanging(System.Nullable<System.DateTime> value);
    partial void OnReceiptDateChanged();
    partial void OnReceiptEmployeeIdChanging(System.Nullable<int> value);
    partial void OnReceiptEmployeeIdChanged();
    #endregion
		
		public PurchaseOrder()
		{
			this.Initialize();
		}
		
		[Column(Storage="_PurchaseOrderId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int PurchaseOrderId
		{
			get
			{
				return this._PurchaseOrderId;
			}
			set
			{
				if ((this._PurchaseOrderId != value))
				{
					this.OnPurchaseOrderIdChanging(value);
					this.SendPropertyChanging();
					this._PurchaseOrderId = value;
					this.SendPropertyChanged("PurchaseOrderId");
					this.OnPurchaseOrderIdChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=2)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		[DataMember(Order=3)]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_PurchaseOrderCode", DbType="VarChar(20)")]
		[DataMember(Order=4)]
		public string PurchaseOrderCode
		{
			get
			{
				return this._PurchaseOrderCode;
			}
			set
			{
				if ((this._PurchaseOrderCode != value))
				{
					this.OnPurchaseOrderCodeChanging(value);
					this.SendPropertyChanging();
					this._PurchaseOrderCode = value;
					this.SendPropertyChanged("PurchaseOrderCode");
					this.OnPurchaseOrderCodeChanged();
				}
			}
		}
		
		[Column(Storage="_BillId", DbType="Int")]
		[DataMember(Order=5)]
		public System.Nullable<int> BillId
		{
			get
			{
				return this._BillId;
			}
			set
			{
				if ((this._BillId != value))
				{
					if (this._Bill.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBillIdChanging(value);
					this.SendPropertyChanging();
					this._BillId = value;
					this.SendPropertyChanged("BillId");
					this.OnBillIdChanged();
				}
			}
		}
		
		[Column(Storage="_PurchaseOrderStatusId", DbType="Int NOT NULL")]
		[DataMember(Order=6)]
		public int PurchaseOrderStatusId
		{
			get
			{
				return this._PurchaseOrderStatusId;
			}
			set
			{
				if ((this._PurchaseOrderStatusId != value))
				{
					if (this._PurchaseOrderStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPurchaseOrderStatusIdChanging(value);
					this.SendPropertyChanging();
					this._PurchaseOrderStatusId = value;
					this.SendPropertyChanged("PurchaseOrderStatusId");
					this.OnPurchaseOrderStatusIdChanged();
				}
			}
		}
		
		[Column(Storage="_PurchaseOrderDecision", DbType="Int NOT NULL")]
		[DataMember(Order=7)]
		public int PurchaseOrderDecision
		{
			get
			{
				return this._PurchaseOrderDecision;
			}
			set
			{
				if ((this._PurchaseOrderDecision != value))
				{
					this.OnPurchaseOrderDecisionChanging(value);
					this.SendPropertyChanging();
					this._PurchaseOrderDecision = value;
					this.SendPropertyChanged("PurchaseOrderDecision");
					this.OnPurchaseOrderDecisionChanged();
				}
			}
		}
		
		[Column(Storage="_SupplierId", DbType="Int")]
		[DataMember(Order=8)]
		public System.Nullable<int> SupplierId
		{
			get
			{
				return this._SupplierId;
			}
			set
			{
				if ((this._SupplierId != value))
				{
					if (this._Supplier.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSupplierIdChanging(value);
					this.SendPropertyChanging();
					this._SupplierId = value;
					this.SendPropertyChanged("SupplierId");
					this.OnSupplierIdChanged();
				}
			}
		}
		
		[Column(Storage="_EmployeeId", DbType="Int")]
		[DataMember(Order=9)]
		public System.Nullable<int> EmployeeId
		{
			get
			{
				return this._EmployeeId;
			}
			set
			{
				if ((this._EmployeeId != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeId = value;
					this.SendPropertyChanged("EmployeeId");
					this.OnEmployeeIdChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime")]
		[DataMember(Order=10)]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_ApprovedDate", DbType="DateTime")]
		[DataMember(Order=11)]
		public System.Nullable<System.DateTime> ApprovedDate
		{
			get
			{
				return this._ApprovedDate;
			}
			set
			{
				if ((this._ApprovedDate != value))
				{
					this.OnApprovedDateChanging(value);
					this.SendPropertyChanging();
					this._ApprovedDate = value;
					this.SendPropertyChanged("ApprovedDate");
					this.OnApprovedDateChanged();
				}
			}
		}
		
		[Column(Storage="_BoughtDate", DbType="DateTime")]
		[DataMember(Order=12)]
		public System.Nullable<System.DateTime> BoughtDate
		{
			get
			{
				return this._BoughtDate;
			}
			set
			{
				if ((this._BoughtDate != value))
				{
					this.OnBoughtDateChanging(value);
					this.SendPropertyChanging();
					this._BoughtDate = value;
					this.SendPropertyChanged("BoughtDate");
					this.OnBoughtDateChanged();
				}
			}
		}
		
		[Column(Storage="_ReceivedDate", DbType="DateTime")]
		[DataMember(Order=13)]
		public System.Nullable<System.DateTime> ReceivedDate
		{
			get
			{
				return this._ReceivedDate;
			}
			set
			{
				if ((this._ReceivedDate != value))
				{
					this.OnReceivedDateChanging(value);
					this.SendPropertyChanging();
					this._ReceivedDate = value;
					this.SendPropertyChanged("ReceivedDate");
					this.OnReceivedDateChanged();
				}
			}
		}
		
		[Column(Storage="_DeliveryDate", DbType="DateTime")]
		[DataMember(Order=14)]
		public System.Nullable<System.DateTime> DeliveryDate
		{
			get
			{
				return this._DeliveryDate;
			}
			set
			{
				if ((this._DeliveryDate != value))
				{
					this.OnDeliveryDateChanging(value);
					this.SendPropertyChanging();
					this._DeliveryDate = value;
					this.SendPropertyChanged("DeliveryDate");
					this.OnDeliveryDateChanged();
				}
			}
		}
		
		[Column(Storage="_ApproverUserId", DbType="Int")]
		[DataMember(Order=15)]
		public System.Nullable<int> ApproverUserId
		{
			get
			{
				return this._ApproverUserId;
			}
			set
			{
				if ((this._ApproverUserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApproverUserIdChanging(value);
					this.SendPropertyChanging();
					this._ApproverUserId = value;
					this.SendPropertyChanged("ApproverUserId");
					this.OnApproverUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_ReceiverUserId", DbType="Int")]
		[DataMember(Order=16)]
		public System.Nullable<int> ReceiverUserId
		{
			get
			{
				return this._ReceiverUserId;
			}
			set
			{
				if ((this._ReceiverUserId != value))
				{
					if (this._User3.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReceiverUserIdChanging(value);
					this.SendPropertyChanging();
					this._ReceiverUserId = value;
					this.SendPropertyChanged("ReceiverUserId");
					this.OnReceiverUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_BuyerUserId", DbType="Int")]
		[DataMember(Order=17)]
		public System.Nullable<int> BuyerUserId
		{
			get
			{
				return this._BuyerUserId;
			}
			set
			{
				if ((this._BuyerUserId != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBuyerUserIdChanging(value);
					this.SendPropertyChanging();
					this._BuyerUserId = value;
					this.SendPropertyChanged("BuyerUserId");
					this.OnBuyerUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_CreatorUserId", DbType="Int")]
		[DataMember(Order=18)]
		public System.Nullable<int> CreatorUserId
		{
			get
			{
				return this._CreatorUserId;
			}
			set
			{
				if ((this._CreatorUserId != value))
				{
					if (this._User2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorUserIdChanging(value);
					this.SendPropertyChanging();
					this._CreatorUserId = value;
					this.SendPropertyChanged("CreatorUserId");
					this.OnCreatorUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_ReceiptNumber", DbType="VarChar(255)")]
		[DataMember(Order=19)]
		public string ReceiptNumber
		{
			get
			{
				return this._ReceiptNumber;
			}
			set
			{
				if ((this._ReceiptNumber != value))
				{
					this.OnReceiptNumberChanging(value);
					this.SendPropertyChanging();
					this._ReceiptNumber = value;
					this.SendPropertyChanged("ReceiptNumber");
					this.OnReceiptNumberChanged();
				}
			}
		}
		
		[Column(Storage="_ReceiptTotalValue", DbType="Decimal(18,2)")]
		[DataMember(Order=20)]
		public System.Nullable<decimal> ReceiptTotalValue
		{
			get
			{
				return this._ReceiptTotalValue;
			}
			set
			{
				if ((this._ReceiptTotalValue != value))
				{
					this.OnReceiptTotalValueChanging(value);
					this.SendPropertyChanging();
					this._ReceiptTotalValue = value;
					this.SendPropertyChanged("ReceiptTotalValue");
					this.OnReceiptTotalValueChanged();
				}
			}
		}
		
		[Column(Storage="_ReceiptDate", DbType="DateTime")]
		[DataMember(Order=21)]
		public System.Nullable<System.DateTime> ReceiptDate
		{
			get
			{
				return this._ReceiptDate;
			}
			set
			{
				if ((this._ReceiptDate != value))
				{
					this.OnReceiptDateChanging(value);
					this.SendPropertyChanging();
					this._ReceiptDate = value;
					this.SendPropertyChanged("ReceiptDate");
					this.OnReceiptDateChanged();
				}
			}
		}
		
		[Column(Storage="_ReceiptEmployeeId", DbType="Int")]
		[DataMember(Order=22)]
		public System.Nullable<int> ReceiptEmployeeId
		{
			get
			{
				return this._ReceiptEmployeeId;
			}
			set
			{
				if ((this._ReceiptEmployeeId != value))
				{
					this.OnReceiptEmployeeIdChanging(value);
					this.SendPropertyChanging();
					this._ReceiptEmployeeId = value;
					this.SendPropertyChanged("ReceiptEmployeeId");
					this.OnReceiptEmployeeIdChanged();
				}
			}
		}
		
		[Association(Name="PurchaseOrder_PurchaseOrderItem", Storage="_PurchaseOrderItems", ThisKey="PurchaseOrderId,CompanyId", OtherKey="PurchaseOrderId,CompanyId")]
		[DataMember(Order=23, EmitDefaultValue=false)]
		public EntitySet<PurchaseOrderItem> PurchaseOrderItems
		{
			get
			{
				if ((this.serializing 
							&& (this._PurchaseOrderItems.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._PurchaseOrderItems;
			}
			set
			{
				this._PurchaseOrderItems.Assign(value);
			}
		}
		
		[Association(Name="PurchaseOrder_Quotation", Storage="_Quotations", ThisKey="PurchaseOrderId,CompanyId", OtherKey="PurchaseOrderId,CompanyId")]
		[DataMember(Order=24, EmitDefaultValue=false)]
		public EntitySet<Quotation> Quotations
		{
			get
			{
				if ((this.serializing 
							&& (this._Quotations.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Quotations;
			}
			set
			{
				this._Quotations.Assign(value);
			}
		}
		
		[Association(Name="Company_PurchaseOrder", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.PurchaseOrders.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.PurchaseOrders.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[Association(Name="Bill_PurchaseOrder", Storage="_Bill", ThisKey="BillId,CompanyId", OtherKey="BillId,CompanyId", IsForeignKey=true)]
		public Bill Bill
		{
			get
			{
				return this._Bill.Entity;
			}
			set
			{
				Bill previousValue = this._Bill.Entity;
				if (((previousValue != value) 
							|| (this._Bill.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bill.Entity = null;
						previousValue.PurchaseOrders.Remove(this);
					}
					this._Bill.Entity = value;
					if ((value != null))
					{
						value.PurchaseOrders.Add(this);
						this._BillId = value.BillId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._BillId = default(Nullable<int>);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Bill");
				}
			}
		}
		
		[Association(Name="Employee_PurchaseOrder", Storage="_Employee", ThisKey="EmployeeId,CompanyId", OtherKey="EmployeeId,CompanyId", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.PurchaseOrders.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.PurchaseOrders.Add(this);
						this._EmployeeId = value.EmployeeId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._EmployeeId = default(Nullable<int>);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[Association(Name="PurchaseOrderStatus_PurchaseOrder", Storage="_PurchaseOrderStatus", ThisKey="PurchaseOrderStatusId", OtherKey="PurchaseOrderStatusId", IsForeignKey=true)]
		public PurchaseOrderStatus PurchaseOrderStatus
		{
			get
			{
				return this._PurchaseOrderStatus.Entity;
			}
			set
			{
				PurchaseOrderStatus previousValue = this._PurchaseOrderStatus.Entity;
				if (((previousValue != value) 
							|| (this._PurchaseOrderStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PurchaseOrderStatus.Entity = null;
						previousValue.PurchaseOrders.Remove(this);
					}
					this._PurchaseOrderStatus.Entity = value;
					if ((value != null))
					{
						value.PurchaseOrders.Add(this);
						this._PurchaseOrderStatusId = value.PurchaseOrderStatusId;
					}
					else
					{
						this._PurchaseOrderStatusId = default(int);
					}
					this.SendPropertyChanged("PurchaseOrderStatus");
				}
			}
		}
		
		[Association(Name="Supplier_PurchaseOrder", Storage="_Supplier", ThisKey="SupplierId", OtherKey="SupplierId", IsForeignKey=true)]
		public Supplier Supplier
		{
			get
			{
				return this._Supplier.Entity;
			}
			set
			{
				Supplier previousValue = this._Supplier.Entity;
				if (((previousValue != value) 
							|| (this._Supplier.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Supplier.Entity = null;
						previousValue.PurchaseOrders.Remove(this);
					}
					this._Supplier.Entity = value;
					if ((value != null))
					{
						value.PurchaseOrders.Add(this);
						this._SupplierId = value.SupplierId;
					}
					else
					{
						this._SupplierId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Supplier");
				}
			}
		}
		
		[Association(Name="User_PurchaseOrder", Storage="_User", ThisKey="ApproverUserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.PurchaseOrders.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.PurchaseOrders.Add(this);
						this._ApproverUserId = value.UserId;
					}
					else
					{
						this._ApproverUserId = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[Association(Name="User_PurchaseOrder1", Storage="_User1", ThisKey="BuyerUserId", OtherKey="UserId", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.PurchaseOrders1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.PurchaseOrders1.Add(this);
						this._BuyerUserId = value.UserId;
					}
					else
					{
						this._BuyerUserId = default(Nullable<int>);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		[Association(Name="User_PurchaseOrder2", Storage="_User2", ThisKey="CreatorUserId", OtherKey="UserId", IsForeignKey=true)]
		public User User2
		{
			get
			{
				return this._User2.Entity;
			}
			set
			{
				User previousValue = this._User2.Entity;
				if (((previousValue != value) 
							|| (this._User2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User2.Entity = null;
						previousValue.PurchaseOrders2.Remove(this);
					}
					this._User2.Entity = value;
					if ((value != null))
					{
						value.PurchaseOrders2.Add(this);
						this._CreatorUserId = value.UserId;
					}
					else
					{
						this._CreatorUserId = default(Nullable<int>);
					}
					this.SendPropertyChanged("User2");
				}
			}
		}
		
		[Association(Name="User_PurchaseOrder3", Storage="_User3", ThisKey="ReceiverUserId", OtherKey="UserId", IsForeignKey=true)]
		public User User3
		{
			get
			{
				return this._User3.Entity;
			}
			set
			{
				User previousValue = this._User3.Entity;
				if (((previousValue != value) 
							|| (this._User3.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User3.Entity = null;
						previousValue.PurchaseOrders3.Remove(this);
					}
					this._User3.Entity = value;
					if ((value != null))
					{
						value.PurchaseOrders3.Add(this);
						this._ReceiverUserId = value.UserId;
					}
					else
					{
						this._ReceiverUserId = default(Nullable<int>);
					}
					this.SendPropertyChanged("User3");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PurchaseOrderItems(PurchaseOrderItem entity)
		{
			this.SendPropertyChanging();
			entity.PurchaseOrder = this;
		}
		
		private void detach_PurchaseOrderItems(PurchaseOrderItem entity)
		{
			this.SendPropertyChanging();
			entity.PurchaseOrder = null;
		}
		
		private void attach_Quotations(Quotation entity)
		{
			this.SendPropertyChanging();
			entity.PurchaseOrder = this;
		}
		
		private void detach_Quotations(Quotation entity)
		{
			this.SendPropertyChanging();
			entity.PurchaseOrder = null;
		}
		
		private void Initialize()
		{
			this._PurchaseOrderItems = new EntitySet<PurchaseOrderItem>(new Action<PurchaseOrderItem>(this.attach_PurchaseOrderItems), new Action<PurchaseOrderItem>(this.detach_PurchaseOrderItems));
			this._Quotations = new EntitySet<Quotation>(new Action<Quotation>(this.attach_Quotations), new Action<Quotation>(this.detach_Quotations));
			this._Company = default(EntityRef<Company>);
			this._Bill = default(EntityRef<Bill>);
			this._Employee = default(EntityRef<Employee>);
			this._PurchaseOrderStatus = default(EntityRef<PurchaseOrderStatus>);
			this._Supplier = default(EntityRef<Supplier>);
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			this._User2 = default(EntityRef<User>);
			this._User3 = default(EntityRef<User>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.PurchaseOrderItem")]
	[DataContract()]
	public partial class PurchaseOrderItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PurchaseOrderItemId;
		
		private string _Description;
		
		private int _QuantityOrdered;
		
		private System.Nullable<int> _QuantityReceived;
		
		private System.DateTime _ModifiedDate;
		
		private System.Nullable<decimal> _PricePaid;
		
		private int _PurchaseOrderId;
		
		private int _CompanyId;
		
		private int _ProductId;
		
		private System.Nullable<int> _ProductPackageId;
		
		private System.Nullable<int> _ProductManufacturerId;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<PurchaseRequestItem> _PurchaseRequestItems;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<QuotationItem> _QuotationItems;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<PurchaseOrder> _PurchaseOrder;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Product> _Product;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<ProductPackage> _ProductPackage;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<ProductManufacturer> _ProductManufacturer;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPurchaseOrderItemIdChanging(int value);
    partial void OnPurchaseOrderItemIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnQuantityOrderedChanging(int value);
    partial void OnQuantityOrderedChanged();
    partial void OnQuantityReceivedChanging(System.Nullable<int> value);
    partial void OnQuantityReceivedChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnPricePaidChanging(System.Nullable<decimal> value);
    partial void OnPricePaidChanged();
    partial void OnPurchaseOrderIdChanging(int value);
    partial void OnPurchaseOrderIdChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnProductPackageIdChanging(System.Nullable<int> value);
    partial void OnProductPackageIdChanged();
    partial void OnProductManufacturerIdChanging(System.Nullable<int> value);
    partial void OnProductManufacturerIdChanged();
    #endregion
		
		public PurchaseOrderItem()
		{
			this.Initialize();
		}
		
		[Column(Storage="_PurchaseOrderItemId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int PurchaseOrderItemId
		{
			get
			{
				return this._PurchaseOrderItemId;
			}
			set
			{
				if ((this._PurchaseOrderItemId != value))
				{
					this.OnPurchaseOrderItemIdChanging(value);
					this.SendPropertyChanging();
					this._PurchaseOrderItemId = value;
					this.SendPropertyChanged("PurchaseOrderItemId");
					this.OnPurchaseOrderItemIdChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_QuantityOrdered", DbType="Int NOT NULL")]
		[DataMember(Order=3)]
		public int QuantityOrdered
		{
			get
			{
				return this._QuantityOrdered;
			}
			set
			{
				if ((this._QuantityOrdered != value))
				{
					this.OnQuantityOrderedChanging(value);
					this.SendPropertyChanging();
					this._QuantityOrdered = value;
					this.SendPropertyChanged("QuantityOrdered");
					this.OnQuantityOrderedChanged();
				}
			}
		}
		
		[Column(Storage="_QuantityReceived", DbType="Int")]
		[DataMember(Order=4)]
		public System.Nullable<int> QuantityReceived
		{
			get
			{
				return this._QuantityReceived;
			}
			set
			{
				if ((this._QuantityReceived != value))
				{
					this.OnQuantityReceivedChanging(value);
					this.SendPropertyChanging();
					this._QuantityReceived = value;
					this.SendPropertyChanged("QuantityReceived");
					this.OnQuantityReceivedChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		[DataMember(Order=5)]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_PricePaid", DbType="Decimal(18,2)")]
		[DataMember(Order=6)]
		public System.Nullable<decimal> PricePaid
		{
			get
			{
				return this._PricePaid;
			}
			set
			{
				if ((this._PricePaid != value))
				{
					this.OnPricePaidChanging(value);
					this.SendPropertyChanging();
					this._PricePaid = value;
					this.SendPropertyChanged("PricePaid");
					this.OnPricePaidChanged();
				}
			}
		}
		
		[Column(Storage="_PurchaseOrderId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=7)]
		public int PurchaseOrderId
		{
			get
			{
				return this._PurchaseOrderId;
			}
			set
			{
				if ((this._PurchaseOrderId != value))
				{
					if (this._PurchaseOrder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPurchaseOrderIdChanging(value);
					this.SendPropertyChanging();
					this._PurchaseOrderId = value;
					this.SendPropertyChanged("PurchaseOrderId");
					this.OnPurchaseOrderIdChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=8)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._PurchaseOrder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Column(Storage="_ProductId", DbType="Int NOT NULL")]
		[DataMember(Order=9)]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[Column(Storage="_ProductPackageId", DbType="Int")]
		[DataMember(Order=10)]
		public System.Nullable<int> ProductPackageId
		{
			get
			{
				return this._ProductPackageId;
			}
			set
			{
				if ((this._ProductPackageId != value))
				{
					if (this._ProductPackage.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductPackageIdChanging(value);
					this.SendPropertyChanging();
					this._ProductPackageId = value;
					this.SendPropertyChanged("ProductPackageId");
					this.OnProductPackageIdChanged();
				}
			}
		}
		
		[Column(Storage="_ProductManufacturerId", DbType="Int")]
		[DataMember(Order=11)]
		public System.Nullable<int> ProductManufacturerId
		{
			get
			{
				return this._ProductManufacturerId;
			}
			set
			{
				if ((this._ProductManufacturerId != value))
				{
					if (this._ProductManufacturer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductManufacturerIdChanging(value);
					this.SendPropertyChanging();
					this._ProductManufacturerId = value;
					this.SendPropertyChanged("ProductManufacturerId");
					this.OnProductManufacturerIdChanged();
				}
			}
		}
		
		[Association(Name="PurchaseOrderItem_PurchaseRequestItem", Storage="_PurchaseRequestItems", ThisKey="PurchaseOrderItemId,PurchaseOrderId,CompanyId", OtherKey="PurchaseOrderItemId,PurchaseOrderId,CompanyId")]
		[DataMember(Order=12, EmitDefaultValue=false)]
		public EntitySet<PurchaseRequestItem> PurchaseRequestItems
		{
			get
			{
				if ((this.serializing 
							&& (this._PurchaseRequestItems.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._PurchaseRequestItems;
			}
			set
			{
				this._PurchaseRequestItems.Assign(value);
			}
		}
		
		[Association(Name="PurchaseOrderItem_QuotationItem", Storage="_QuotationItems", ThisKey="PurchaseOrderItemId,PurchaseOrderId,CompanyId", OtherKey="PurchaseOrderItemId,PurchaseOrderId,CompanyId")]
		[DataMember(Order=13, EmitDefaultValue=false)]
		public EntitySet<QuotationItem> QuotationItems
		{
			get
			{
				if ((this.serializing 
							&& (this._QuotationItems.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._QuotationItems;
			}
			set
			{
				this._QuotationItems.Assign(value);
			}
		}
		
		[Association(Name="PurchaseOrder_PurchaseOrderItem", Storage="_PurchaseOrder", ThisKey="PurchaseOrderId,CompanyId", OtherKey="PurchaseOrderId,CompanyId", IsForeignKey=true)]
		public PurchaseOrder PurchaseOrder
		{
			get
			{
				return this._PurchaseOrder.Entity;
			}
			set
			{
				PurchaseOrder previousValue = this._PurchaseOrder.Entity;
				if (((previousValue != value) 
							|| (this._PurchaseOrder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PurchaseOrder.Entity = null;
						previousValue.PurchaseOrderItems.Remove(this);
					}
					this._PurchaseOrder.Entity = value;
					if ((value != null))
					{
						value.PurchaseOrderItems.Add(this);
						this._PurchaseOrderId = value.PurchaseOrderId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._PurchaseOrderId = default(int);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("PurchaseOrder");
				}
			}
		}
		
		[Association(Name="Product_PurchaseOrderItem", Storage="_Product", ThisKey="ProductId", OtherKey="ProductId", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.PurchaseOrderItems.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.PurchaseOrderItems.Add(this);
						this._ProductId = value.ProductId;
					}
					else
					{
						this._ProductId = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		[Association(Name="ProductPackage_PurchaseOrderItem", Storage="_ProductPackage", ThisKey="ProductPackageId", OtherKey="ProductPackageId", IsForeignKey=true)]
		public ProductPackage ProductPackage
		{
			get
			{
				return this._ProductPackage.Entity;
			}
			set
			{
				ProductPackage previousValue = this._ProductPackage.Entity;
				if (((previousValue != value) 
							|| (this._ProductPackage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductPackage.Entity = null;
						previousValue.PurchaseOrderItems.Remove(this);
					}
					this._ProductPackage.Entity = value;
					if ((value != null))
					{
						value.PurchaseOrderItems.Add(this);
						this._ProductPackageId = value.ProductPackageId;
					}
					else
					{
						this._ProductPackageId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProductPackage");
				}
			}
		}
		
		[Association(Name="ProductManufacturer_PurchaseOrderItem", Storage="_ProductManufacturer", ThisKey="ProductManufacturerId", OtherKey="ProductManufacturerId", IsForeignKey=true)]
		public ProductManufacturer ProductManufacturer
		{
			get
			{
				return this._ProductManufacturer.Entity;
			}
			set
			{
				ProductManufacturer previousValue = this._ProductManufacturer.Entity;
				if (((previousValue != value) 
							|| (this._ProductManufacturer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductManufacturer.Entity = null;
						previousValue.PurchaseOrderItems.Remove(this);
					}
					this._ProductManufacturer.Entity = value;
					if ((value != null))
					{
						value.PurchaseOrderItems.Add(this);
						this._ProductManufacturerId = value.ProductManufacturerId;
					}
					else
					{
						this._ProductManufacturerId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProductManufacturer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PurchaseRequestItems(PurchaseRequestItem entity)
		{
			this.SendPropertyChanging();
			entity.PurchaseOrderItem = this;
		}
		
		private void detach_PurchaseRequestItems(PurchaseRequestItem entity)
		{
			this.SendPropertyChanging();
			entity.PurchaseOrderItem = null;
		}
		
		private void attach_QuotationItems(QuotationItem entity)
		{
			this.SendPropertyChanging();
			entity.PurchaseOrderItem = this;
		}
		
		private void detach_QuotationItems(QuotationItem entity)
		{
			this.SendPropertyChanging();
			entity.PurchaseOrderItem = null;
		}
		
		private void Initialize()
		{
			this._PurchaseRequestItems = new EntitySet<PurchaseRequestItem>(new Action<PurchaseRequestItem>(this.attach_PurchaseRequestItems), new Action<PurchaseRequestItem>(this.detach_PurchaseRequestItems));
			this._QuotationItems = new EntitySet<QuotationItem>(new Action<QuotationItem>(this.attach_QuotationItems), new Action<QuotationItem>(this.detach_QuotationItems));
			this._PurchaseOrder = default(EntityRef<PurchaseOrder>);
			this._Product = default(EntityRef<Product>);
			this._ProductPackage = default(EntityRef<ProductPackage>);
			this._ProductManufacturer = default(EntityRef<ProductManufacturer>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.PurchaseOrderStatus")]
	[DataContract()]
	public partial class PurchaseOrderStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PurchaseOrderStatusId;
		
		private string _Name;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<PurchaseOrder> _PurchaseOrders;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPurchaseOrderStatusIdChanging(int value);
    partial void OnPurchaseOrderStatusIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public PurchaseOrderStatus()
		{
			this.Initialize();
		}
		
		[Column(Storage="_PurchaseOrderStatusId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int PurchaseOrderStatusId
		{
			get
			{
				return this._PurchaseOrderStatusId;
			}
			set
			{
				if ((this._PurchaseOrderStatusId != value))
				{
					this.OnPurchaseOrderStatusIdChanging(value);
					this.SendPropertyChanging();
					this._PurchaseOrderStatusId = value;
					this.SendPropertyChanged("PurchaseOrderStatusId");
					this.OnPurchaseOrderStatusIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="PurchaseOrderStatus_PurchaseOrder", Storage="_PurchaseOrders", ThisKey="PurchaseOrderStatusId", OtherKey="PurchaseOrderStatusId")]
		[DataMember(Order=3, EmitDefaultValue=false)]
		public EntitySet<PurchaseOrder> PurchaseOrders
		{
			get
			{
				if ((this.serializing 
							&& (this._PurchaseOrders.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._PurchaseOrders;
			}
			set
			{
				this._PurchaseOrders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PurchaseOrders(PurchaseOrder entity)
		{
			this.SendPropertyChanging();
			entity.PurchaseOrderStatus = this;
		}
		
		private void detach_PurchaseOrders(PurchaseOrder entity)
		{
			this.SendPropertyChanging();
			entity.PurchaseOrderStatus = null;
		}
		
		private void Initialize()
		{
			this._PurchaseOrders = new EntitySet<PurchaseOrder>(new Action<PurchaseOrder>(this.attach_PurchaseOrders), new Action<PurchaseOrder>(this.detach_PurchaseOrders));
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.PurchaseRequest")]
	[DataContract()]
	public partial class PurchaseRequest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PurchaseRequestId;
		
		private int _CompanyId;
		
		private System.Nullable<System.DateTime> _ClosedDate;
		
		private System.DateTime _ModifiedDate;
		
		private int _EmployeeId;
		
		private int _CostCenterId;
		
		private System.Nullable<int> _DepositId;
		
		private string _PostalCode;
		
		private string _AddressNumber;
		
		private string _AddressComp;
		
		private System.Nullable<int> _ProductId;
		
		private System.Nullable<int> _Amount;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<PurchaseRequestItem> _PurchaseRequestItems;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Employee> _Employee;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<CostCenter> _CostCenter;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Deposit> _Deposit;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Address> _Address;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Product> _Product;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Company> _Company;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPurchaseRequestIdChanging(int value);
    partial void OnPurchaseRequestIdChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnClosedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnClosedDateChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnEmployeeIdChanging(int value);
    partial void OnEmployeeIdChanged();
    partial void OnCostCenterIdChanging(int value);
    partial void OnCostCenterIdChanged();
    partial void OnDepositIdChanging(System.Nullable<int> value);
    partial void OnDepositIdChanged();
    partial void OnPostalCodeChanging(string value);
    partial void OnPostalCodeChanged();
    partial void OnAddressNumberChanging(string value);
    partial void OnAddressNumberChanged();
    partial void OnAddressCompChanging(string value);
    partial void OnAddressCompChanged();
    partial void OnProductIdChanging(System.Nullable<int> value);
    partial void OnProductIdChanged();
    partial void OnAmountChanging(System.Nullable<int> value);
    partial void OnAmountChanged();
    #endregion
		
		public PurchaseRequest()
		{
			this.Initialize();
		}
		
		[Column(Storage="_PurchaseRequestId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int PurchaseRequestId
		{
			get
			{
				return this._PurchaseRequestId;
			}
			set
			{
				if ((this._PurchaseRequestId != value))
				{
					this.OnPurchaseRequestIdChanging(value);
					this.SendPropertyChanging();
					this._PurchaseRequestId = value;
					this.SendPropertyChanged("PurchaseRequestId");
					this.OnPurchaseRequestIdChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL")]
		[DataMember(Order=2)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Column(Storage="_ClosedDate", DbType="DateTime")]
		[DataMember(Order=3)]
		public System.Nullable<System.DateTime> ClosedDate
		{
			get
			{
				return this._ClosedDate;
			}
			set
			{
				if ((this._ClosedDate != value))
				{
					this.OnClosedDateChanging(value);
					this.SendPropertyChanging();
					this._ClosedDate = value;
					this.SendPropertyChanged("ClosedDate");
					this.OnClosedDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		[DataMember(Order=4)]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_EmployeeId", DbType="Int NOT NULL")]
		[DataMember(Order=5)]
		public int EmployeeId
		{
			get
			{
				return this._EmployeeId;
			}
			set
			{
				if ((this._EmployeeId != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeId = value;
					this.SendPropertyChanged("EmployeeId");
					this.OnEmployeeIdChanged();
				}
			}
		}
		
		[Column(Storage="_CostCenterId", DbType="Int NOT NULL")]
		[DataMember(Order=6)]
		public int CostCenterId
		{
			get
			{
				return this._CostCenterId;
			}
			set
			{
				if ((this._CostCenterId != value))
				{
					if (this._CostCenter.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCostCenterIdChanging(value);
					this.SendPropertyChanging();
					this._CostCenterId = value;
					this.SendPropertyChanged("CostCenterId");
					this.OnCostCenterIdChanged();
				}
			}
		}
		
		[Column(Storage="_DepositId", DbType="Int")]
		[DataMember(Order=7)]
		public System.Nullable<int> DepositId
		{
			get
			{
				return this._DepositId;
			}
			set
			{
				if ((this._DepositId != value))
				{
					if (this._Deposit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepositIdChanging(value);
					this.SendPropertyChanging();
					this._DepositId = value;
					this.SendPropertyChanged("DepositId");
					this.OnDepositIdChanged();
				}
			}
		}
		
		[Column(Storage="_PostalCode", DbType="Char(8)")]
		[DataMember(Order=8)]
		public string PostalCode
		{
			get
			{
				return this._PostalCode;
			}
			set
			{
				if ((this._PostalCode != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPostalCodeChanging(value);
					this.SendPropertyChanging();
					this._PostalCode = value;
					this.SendPropertyChanged("PostalCode");
					this.OnPostalCodeChanged();
				}
			}
		}
		
		[Column(Storage="_AddressNumber", DbType="VarChar(50)")]
		[DataMember(Order=9)]
		public string AddressNumber
		{
			get
			{
				return this._AddressNumber;
			}
			set
			{
				if ((this._AddressNumber != value))
				{
					this.OnAddressNumberChanging(value);
					this.SendPropertyChanging();
					this._AddressNumber = value;
					this.SendPropertyChanged("AddressNumber");
					this.OnAddressNumberChanged();
				}
			}
		}
		
		[Column(Storage="_AddressComp", DbType="VarChar(50)")]
		[DataMember(Order=10)]
		public string AddressComp
		{
			get
			{
				return this._AddressComp;
			}
			set
			{
				if ((this._AddressComp != value))
				{
					this.OnAddressCompChanging(value);
					this.SendPropertyChanging();
					this._AddressComp = value;
					this.SendPropertyChanged("AddressComp");
					this.OnAddressCompChanged();
				}
			}
		}
		
		[Column(Storage="_ProductId", DbType="Int")]
		[DataMember(Order=11)]
		public System.Nullable<int> ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[Column(Storage="_Amount", DbType="Int")]
		[DataMember(Order=12)]
		public System.Nullable<int> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[Association(Name="PurchaseRequest_PurchaseRequestItem", Storage="_PurchaseRequestItems", ThisKey="PurchaseRequestId", OtherKey="PurchaseRequestId")]
		[DataMember(Order=13, EmitDefaultValue=false)]
		public EntitySet<PurchaseRequestItem> PurchaseRequestItems
		{
			get
			{
				if ((this.serializing 
							&& (this._PurchaseRequestItems.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._PurchaseRequestItems;
			}
			set
			{
				this._PurchaseRequestItems.Assign(value);
			}
		}
		
		[Association(Name="Employee_PurchaseRequest", Storage="_Employee", ThisKey="EmployeeId,CompanyId", OtherKey="EmployeeId,CompanyId", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.PurchaseRequests.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.PurchaseRequests.Add(this);
						this._EmployeeId = value.EmployeeId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._EmployeeId = default(int);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[Association(Name="CostCenter_PurchaseRequest", Storage="_CostCenter", ThisKey="CostCenterId,CompanyId", OtherKey="CostCenterId,CompanyId", IsForeignKey=true)]
		public CostCenter CostCenter
		{
			get
			{
				return this._CostCenter.Entity;
			}
			set
			{
				CostCenter previousValue = this._CostCenter.Entity;
				if (((previousValue != value) 
							|| (this._CostCenter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CostCenter.Entity = null;
						previousValue.PurchaseRequests.Remove(this);
					}
					this._CostCenter.Entity = value;
					if ((value != null))
					{
						value.PurchaseRequests.Add(this);
						this._CostCenterId = value.CostCenterId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CostCenterId = default(int);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("CostCenter");
				}
			}
		}
		
		[Association(Name="Deposit_PurchaseRequest", Storage="_Deposit", ThisKey="DepositId,CompanyId", OtherKey="DepositId,CompanyId", IsForeignKey=true)]
		public Deposit Deposit
		{
			get
			{
				return this._Deposit.Entity;
			}
			set
			{
				Deposit previousValue = this._Deposit.Entity;
				if (((previousValue != value) 
							|| (this._Deposit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Deposit.Entity = null;
						previousValue.PurchaseRequests.Remove(this);
					}
					this._Deposit.Entity = value;
					if ((value != null))
					{
						value.PurchaseRequests.Add(this);
						this._DepositId = value.DepositId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._DepositId = default(Nullable<int>);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Deposit");
				}
			}
		}
		
		[Association(Name="Address_PurchaseRequest", Storage="_Address", ThisKey="PostalCode", OtherKey="PostalCode", IsForeignKey=true)]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.PurchaseRequests.Remove(this);
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.PurchaseRequests.Add(this);
						this._PostalCode = value.PostalCode;
					}
					else
					{
						this._PostalCode = default(string);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		[Association(Name="Product_PurchaseRequest", Storage="_Product", ThisKey="ProductId", OtherKey="ProductId", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.PurchaseRequests.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.PurchaseRequests.Add(this);
						this._ProductId = value.ProductId;
					}
					else
					{
						this._ProductId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		[Association(Name="Company_PurchaseRequest", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.PurchaseRequests.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.PurchaseRequests.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PurchaseRequestItems(PurchaseRequestItem entity)
		{
			this.SendPropertyChanging();
			entity.PurchaseRequest = this;
		}
		
		private void detach_PurchaseRequestItems(PurchaseRequestItem entity)
		{
			this.SendPropertyChanging();
			entity.PurchaseRequest = null;
		}
		
		private void Initialize()
		{
			this._PurchaseRequestItems = new EntitySet<PurchaseRequestItem>(new Action<PurchaseRequestItem>(this.attach_PurchaseRequestItems), new Action<PurchaseRequestItem>(this.detach_PurchaseRequestItems));
			this._Employee = default(EntityRef<Employee>);
			this._CostCenter = default(EntityRef<CostCenter>);
			this._Deposit = default(EntityRef<Deposit>);
			this._Address = default(EntityRef<Address>);
			this._Product = default(EntityRef<Product>);
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.PurchaseRequestItem")]
	[DataContract()]
	public partial class PurchaseRequestItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PurchaseRequestItemId;
		
		private System.Nullable<decimal> _Amount;
		
		private int _ProductId;
		
		private int _PurchaseRequestId;
		
		private System.Nullable<int> _ProductPackageId;
		
		private System.Nullable<int> _ProductManufacturerId;
		
		private System.Nullable<int> _PurchaseOrderItemId;
		
		private System.Nullable<int> _PurchaseOrderId;
		
		private System.Nullable<int> _CompanyId;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Product> _Product;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<PurchaseRequest> _PurchaseRequest;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<ProductPackage> _ProductPackage;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<ProductManufacturer> _ProductManufacturer;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<PurchaseOrderItem> _PurchaseOrderItem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPurchaseRequestItemIdChanging(int value);
    partial void OnPurchaseRequestItemIdChanged();
    partial void OnAmountChanging(System.Nullable<decimal> value);
    partial void OnAmountChanged();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnPurchaseRequestIdChanging(int value);
    partial void OnPurchaseRequestIdChanged();
    partial void OnProductPackageIdChanging(System.Nullable<int> value);
    partial void OnProductPackageIdChanged();
    partial void OnProductManufacturerIdChanging(System.Nullable<int> value);
    partial void OnProductManufacturerIdChanged();
    partial void OnPurchaseOrderItemIdChanging(System.Nullable<int> value);
    partial void OnPurchaseOrderItemIdChanged();
    partial void OnPurchaseOrderIdChanging(System.Nullable<int> value);
    partial void OnPurchaseOrderIdChanged();
    partial void OnCompanyIdChanging(System.Nullable<int> value);
    partial void OnCompanyIdChanged();
    #endregion
		
		public PurchaseRequestItem()
		{
			this.Initialize();
		}
		
		[Column(Storage="_PurchaseRequestItemId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int PurchaseRequestItemId
		{
			get
			{
				return this._PurchaseRequestItemId;
			}
			set
			{
				if ((this._PurchaseRequestItemId != value))
				{
					this.OnPurchaseRequestItemIdChanging(value);
					this.SendPropertyChanging();
					this._PurchaseRequestItemId = value;
					this.SendPropertyChanged("PurchaseRequestItemId");
					this.OnPurchaseRequestItemIdChanged();
				}
			}
		}
		
		[Column(Storage="_Amount", DbType="Decimal(18,2)")]
		[DataMember(Order=2)]
		public System.Nullable<decimal> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[Column(Storage="_ProductId", DbType="Int NOT NULL")]
		[DataMember(Order=3)]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[Column(Storage="_PurchaseRequestId", DbType="Int NOT NULL")]
		[DataMember(Order=4)]
		public int PurchaseRequestId
		{
			get
			{
				return this._PurchaseRequestId;
			}
			set
			{
				if ((this._PurchaseRequestId != value))
				{
					if (this._PurchaseRequest.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPurchaseRequestIdChanging(value);
					this.SendPropertyChanging();
					this._PurchaseRequestId = value;
					this.SendPropertyChanged("PurchaseRequestId");
					this.OnPurchaseRequestIdChanged();
				}
			}
		}
		
		[Column(Storage="_ProductPackageId", DbType="Int")]
		[DataMember(Order=5)]
		public System.Nullable<int> ProductPackageId
		{
			get
			{
				return this._ProductPackageId;
			}
			set
			{
				if ((this._ProductPackageId != value))
				{
					if (this._ProductPackage.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductPackageIdChanging(value);
					this.SendPropertyChanging();
					this._ProductPackageId = value;
					this.SendPropertyChanged("ProductPackageId");
					this.OnProductPackageIdChanged();
				}
			}
		}
		
		[Column(Storage="_ProductManufacturerId", DbType="Int")]
		[DataMember(Order=6)]
		public System.Nullable<int> ProductManufacturerId
		{
			get
			{
				return this._ProductManufacturerId;
			}
			set
			{
				if ((this._ProductManufacturerId != value))
				{
					if (this._ProductManufacturer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductManufacturerIdChanging(value);
					this.SendPropertyChanging();
					this._ProductManufacturerId = value;
					this.SendPropertyChanged("ProductManufacturerId");
					this.OnProductManufacturerIdChanged();
				}
			}
		}
		
		[Column(Storage="_PurchaseOrderItemId", DbType="Int")]
		[DataMember(Order=7)]
		public System.Nullable<int> PurchaseOrderItemId
		{
			get
			{
				return this._PurchaseOrderItemId;
			}
			set
			{
				if ((this._PurchaseOrderItemId != value))
				{
					if (this._PurchaseOrderItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPurchaseOrderItemIdChanging(value);
					this.SendPropertyChanging();
					this._PurchaseOrderItemId = value;
					this.SendPropertyChanged("PurchaseOrderItemId");
					this.OnPurchaseOrderItemIdChanged();
				}
			}
		}
		
		[Column(Storage="_PurchaseOrderId", DbType="Int")]
		[DataMember(Order=8)]
		public System.Nullable<int> PurchaseOrderId
		{
			get
			{
				return this._PurchaseOrderId;
			}
			set
			{
				if ((this._PurchaseOrderId != value))
				{
					if (this._PurchaseOrderItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPurchaseOrderIdChanging(value);
					this.SendPropertyChanging();
					this._PurchaseOrderId = value;
					this.SendPropertyChanged("PurchaseOrderId");
					this.OnPurchaseOrderIdChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int")]
		[DataMember(Order=9)]
		public System.Nullable<int> CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._PurchaseOrderItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Association(Name="Product_PurchaseRequestItem", Storage="_Product", ThisKey="ProductId", OtherKey="ProductId", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.PurchaseRequestItems.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.PurchaseRequestItems.Add(this);
						this._ProductId = value.ProductId;
					}
					else
					{
						this._ProductId = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		[Association(Name="PurchaseRequest_PurchaseRequestItem", Storage="_PurchaseRequest", ThisKey="PurchaseRequestId", OtherKey="PurchaseRequestId", IsForeignKey=true)]
		public PurchaseRequest PurchaseRequest
		{
			get
			{
				return this._PurchaseRequest.Entity;
			}
			set
			{
				PurchaseRequest previousValue = this._PurchaseRequest.Entity;
				if (((previousValue != value) 
							|| (this._PurchaseRequest.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PurchaseRequest.Entity = null;
						previousValue.PurchaseRequestItems.Remove(this);
					}
					this._PurchaseRequest.Entity = value;
					if ((value != null))
					{
						value.PurchaseRequestItems.Add(this);
						this._PurchaseRequestId = value.PurchaseRequestId;
					}
					else
					{
						this._PurchaseRequestId = default(int);
					}
					this.SendPropertyChanged("PurchaseRequest");
				}
			}
		}
		
		[Association(Name="ProductPackage_PurchaseRequestItem", Storage="_ProductPackage", ThisKey="ProductPackageId", OtherKey="ProductPackageId", IsForeignKey=true)]
		public ProductPackage ProductPackage
		{
			get
			{
				return this._ProductPackage.Entity;
			}
			set
			{
				ProductPackage previousValue = this._ProductPackage.Entity;
				if (((previousValue != value) 
							|| (this._ProductPackage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductPackage.Entity = null;
						previousValue.PurchaseRequestItems.Remove(this);
					}
					this._ProductPackage.Entity = value;
					if ((value != null))
					{
						value.PurchaseRequestItems.Add(this);
						this._ProductPackageId = value.ProductPackageId;
					}
					else
					{
						this._ProductPackageId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProductPackage");
				}
			}
		}
		
		[Association(Name="ProductManufacturer_PurchaseRequestItem", Storage="_ProductManufacturer", ThisKey="ProductManufacturerId", OtherKey="ProductManufacturerId", IsForeignKey=true)]
		public ProductManufacturer ProductManufacturer
		{
			get
			{
				return this._ProductManufacturer.Entity;
			}
			set
			{
				ProductManufacturer previousValue = this._ProductManufacturer.Entity;
				if (((previousValue != value) 
							|| (this._ProductManufacturer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductManufacturer.Entity = null;
						previousValue.PurchaseRequestItems.Remove(this);
					}
					this._ProductManufacturer.Entity = value;
					if ((value != null))
					{
						value.PurchaseRequestItems.Add(this);
						this._ProductManufacturerId = value.ProductManufacturerId;
					}
					else
					{
						this._ProductManufacturerId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProductManufacturer");
				}
			}
		}
		
		[Association(Name="PurchaseOrderItem_PurchaseRequestItem", Storage="_PurchaseOrderItem", ThisKey="PurchaseOrderItemId,PurchaseOrderId,CompanyId", OtherKey="PurchaseOrderItemId,PurchaseOrderId,CompanyId", IsForeignKey=true)]
		public PurchaseOrderItem PurchaseOrderItem
		{
			get
			{
				return this._PurchaseOrderItem.Entity;
			}
			set
			{
				PurchaseOrderItem previousValue = this._PurchaseOrderItem.Entity;
				if (((previousValue != value) 
							|| (this._PurchaseOrderItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PurchaseOrderItem.Entity = null;
						previousValue.PurchaseRequestItems.Remove(this);
					}
					this._PurchaseOrderItem.Entity = value;
					if ((value != null))
					{
						value.PurchaseRequestItems.Add(this);
						this._PurchaseOrderItemId = value.PurchaseOrderItemId;
						this._PurchaseOrderId = value.PurchaseOrderId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._PurchaseOrderItemId = default(Nullable<int>);
						this._PurchaseOrderId = default(Nullable<int>);
						this._CompanyId = default(Nullable<int>);
					}
					this.SendPropertyChanged("PurchaseOrderItem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Product = default(EntityRef<Product>);
			this._PurchaseRequest = default(EntityRef<PurchaseRequest>);
			this._ProductPackage = default(EntityRef<ProductPackage>);
			this._ProductManufacturer = default(EntityRef<ProductManufacturer>);
			this._PurchaseOrderItem = default(EntityRef<PurchaseOrderItem>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.Quotation")]
	[DataContract()]
	public partial class Quotation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _QuotationId;
		
		private int _CompanyId;
		
		private int _PurchaseOrderId;
		
		private int _SupplierId;
		
		private System.DateTime _DeliveryDate;
		
		private System.Nullable<decimal> _TotalPrice;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<QuotationItem> _QuotationItems;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<PurchaseOrder> _PurchaseOrder;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Company> _Company;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Supplier> _Supplier;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQuotationIdChanging(int value);
    partial void OnQuotationIdChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnPurchaseOrderIdChanging(int value);
    partial void OnPurchaseOrderIdChanged();
    partial void OnSupplierIdChanging(int value);
    partial void OnSupplierIdChanged();
    partial void OnDeliveryDateChanging(System.DateTime value);
    partial void OnDeliveryDateChanged();
    partial void OnTotalPriceChanging(System.Nullable<decimal> value);
    partial void OnTotalPriceChanged();
    #endregion
		
		public Quotation()
		{
			this.Initialize();
		}
		
		[Column(Storage="_QuotationId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int QuotationId
		{
			get
			{
				return this._QuotationId;
			}
			set
			{
				if ((this._QuotationId != value))
				{
					this.OnQuotationIdChanging(value);
					this.SendPropertyChanging();
					this._QuotationId = value;
					this.SendPropertyChanged("QuotationId");
					this.OnQuotationIdChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=2)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._PurchaseOrder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Column(Storage="_PurchaseOrderId", DbType="Int NOT NULL")]
		[DataMember(Order=3)]
		public int PurchaseOrderId
		{
			get
			{
				return this._PurchaseOrderId;
			}
			set
			{
				if ((this._PurchaseOrderId != value))
				{
					if (this._PurchaseOrder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPurchaseOrderIdChanging(value);
					this.SendPropertyChanging();
					this._PurchaseOrderId = value;
					this.SendPropertyChanged("PurchaseOrderId");
					this.OnPurchaseOrderIdChanged();
				}
			}
		}
		
		[Column(Storage="_SupplierId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=4)]
		public int SupplierId
		{
			get
			{
				return this._SupplierId;
			}
			set
			{
				if ((this._SupplierId != value))
				{
					if (this._Supplier.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSupplierIdChanging(value);
					this.SendPropertyChanging();
					this._SupplierId = value;
					this.SendPropertyChanged("SupplierId");
					this.OnSupplierIdChanged();
				}
			}
		}
		
		[Column(Storage="_DeliveryDate", DbType="DateTime NOT NULL")]
		[DataMember(Order=5)]
		public System.DateTime DeliveryDate
		{
			get
			{
				return this._DeliveryDate;
			}
			set
			{
				if ((this._DeliveryDate != value))
				{
					this.OnDeliveryDateChanging(value);
					this.SendPropertyChanging();
					this._DeliveryDate = value;
					this.SendPropertyChanged("DeliveryDate");
					this.OnDeliveryDateChanged();
				}
			}
		}
		
		[Column(Storage="_TotalPrice", DbType="Decimal(18,2)")]
		[DataMember(Order=6)]
		public System.Nullable<decimal> TotalPrice
		{
			get
			{
				return this._TotalPrice;
			}
			set
			{
				if ((this._TotalPrice != value))
				{
					this.OnTotalPriceChanging(value);
					this.SendPropertyChanging();
					this._TotalPrice = value;
					this.SendPropertyChanged("TotalPrice");
					this.OnTotalPriceChanged();
				}
			}
		}
		
		[Association(Name="Quotation_QuotationItem", Storage="_QuotationItems", ThisKey="QuotationId,SupplierId,CompanyId", OtherKey="QuotationId,SupplierId,CompanyId")]
		[DataMember(Order=7, EmitDefaultValue=false)]
		public EntitySet<QuotationItem> QuotationItems
		{
			get
			{
				if ((this.serializing 
							&& (this._QuotationItems.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._QuotationItems;
			}
			set
			{
				this._QuotationItems.Assign(value);
			}
		}
		
		[Association(Name="PurchaseOrder_Quotation", Storage="_PurchaseOrder", ThisKey="PurchaseOrderId,CompanyId", OtherKey="PurchaseOrderId,CompanyId", IsForeignKey=true)]
		public PurchaseOrder PurchaseOrder
		{
			get
			{
				return this._PurchaseOrder.Entity;
			}
			set
			{
				PurchaseOrder previousValue = this._PurchaseOrder.Entity;
				if (((previousValue != value) 
							|| (this._PurchaseOrder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PurchaseOrder.Entity = null;
						previousValue.Quotations.Remove(this);
					}
					this._PurchaseOrder.Entity = value;
					if ((value != null))
					{
						value.Quotations.Add(this);
						this._PurchaseOrderId = value.PurchaseOrderId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._PurchaseOrderId = default(int);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("PurchaseOrder");
				}
			}
		}
		
		[Association(Name="Company_Quotation", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Quotations.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Quotations.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[Association(Name="Supplier_Quotation", Storage="_Supplier", ThisKey="SupplierId", OtherKey="SupplierId", IsForeignKey=true)]
		public Supplier Supplier
		{
			get
			{
				return this._Supplier.Entity;
			}
			set
			{
				Supplier previousValue = this._Supplier.Entity;
				if (((previousValue != value) 
							|| (this._Supplier.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Supplier.Entity = null;
						previousValue.Quotations.Remove(this);
					}
					this._Supplier.Entity = value;
					if ((value != null))
					{
						value.Quotations.Add(this);
						this._SupplierId = value.SupplierId;
					}
					else
					{
						this._SupplierId = default(int);
					}
					this.SendPropertyChanged("Supplier");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_QuotationItems(QuotationItem entity)
		{
			this.SendPropertyChanging();
			entity.Quotation = this;
		}
		
		private void detach_QuotationItems(QuotationItem entity)
		{
			this.SendPropertyChanging();
			entity.Quotation = null;
		}
		
		private void Initialize()
		{
			this._QuotationItems = new EntitySet<QuotationItem>(new Action<QuotationItem>(this.attach_QuotationItems), new Action<QuotationItem>(this.detach_QuotationItems));
			this._PurchaseOrder = default(EntityRef<PurchaseOrder>);
			this._Company = default(EntityRef<Company>);
			this._Supplier = default(EntityRef<Supplier>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.QuotationItem")]
	[DataContract()]
	public partial class QuotationItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _QuotationId;
		
		private int _QuotationItemId;
		
		private decimal _Price;
		
		private int _CompanyId;
		
		private int _PurchaseOrderItemId;
		
		private int _PurchaseOrderId;
		
		private int _SupplierId;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Quotation> _Quotation;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<PurchaseOrderItem> _PurchaseOrderItem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQuotationIdChanging(int value);
    partial void OnQuotationIdChanged();
    partial void OnQuotationItemIdChanging(int value);
    partial void OnQuotationItemIdChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnPurchaseOrderItemIdChanging(int value);
    partial void OnPurchaseOrderItemIdChanged();
    partial void OnPurchaseOrderIdChanging(int value);
    partial void OnPurchaseOrderIdChanged();
    partial void OnSupplierIdChanging(int value);
    partial void OnSupplierIdChanged();
    #endregion
		
		public QuotationItem()
		{
			this.Initialize();
		}
		
		[Column(Storage="_QuotationId", DbType="Int NOT NULL")]
		[DataMember(Order=1)]
		public int QuotationId
		{
			get
			{
				return this._QuotationId;
			}
			set
			{
				if ((this._QuotationId != value))
				{
					if (this._Quotation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuotationIdChanging(value);
					this.SendPropertyChanging();
					this._QuotationId = value;
					this.SendPropertyChanged("QuotationId");
					this.OnQuotationIdChanged();
				}
			}
		}
		
		[Column(Storage="_QuotationItemId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=2)]
		public int QuotationItemId
		{
			get
			{
				return this._QuotationItemId;
			}
			set
			{
				if ((this._QuotationItemId != value))
				{
					this.OnQuotationItemIdChanging(value);
					this.SendPropertyChanging();
					this._QuotationItemId = value;
					this.SendPropertyChanged("QuotationItemId");
					this.OnQuotationItemIdChanged();
				}
			}
		}
		
		[Column(Storage="_Price", DbType="Decimal(18,2) NOT NULL")]
		[DataMember(Order=3)]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL")]
		[DataMember(Order=4)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Quotation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Column(Storage="_PurchaseOrderItemId", DbType="Int NOT NULL")]
		[DataMember(Order=5)]
		public int PurchaseOrderItemId
		{
			get
			{
				return this._PurchaseOrderItemId;
			}
			set
			{
				if ((this._PurchaseOrderItemId != value))
				{
					if (this._PurchaseOrderItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPurchaseOrderItemIdChanging(value);
					this.SendPropertyChanging();
					this._PurchaseOrderItemId = value;
					this.SendPropertyChanged("PurchaseOrderItemId");
					this.OnPurchaseOrderItemIdChanged();
				}
			}
		}
		
		[Column(Storage="_PurchaseOrderId", DbType="Int NOT NULL")]
		[DataMember(Order=6)]
		public int PurchaseOrderId
		{
			get
			{
				return this._PurchaseOrderId;
			}
			set
			{
				if ((this._PurchaseOrderId != value))
				{
					if (this._PurchaseOrderItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPurchaseOrderIdChanging(value);
					this.SendPropertyChanging();
					this._PurchaseOrderId = value;
					this.SendPropertyChanged("PurchaseOrderId");
					this.OnPurchaseOrderIdChanged();
				}
			}
		}
		
		[Column(Storage="_SupplierId", DbType="Int NOT NULL")]
		[DataMember(Order=7)]
		public int SupplierId
		{
			get
			{
				return this._SupplierId;
			}
			set
			{
				if ((this._SupplierId != value))
				{
					if (this._Quotation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSupplierIdChanging(value);
					this.SendPropertyChanging();
					this._SupplierId = value;
					this.SendPropertyChanged("SupplierId");
					this.OnSupplierIdChanged();
				}
			}
		}
		
		[Association(Name="Quotation_QuotationItem", Storage="_Quotation", ThisKey="QuotationId,SupplierId,CompanyId", OtherKey="QuotationId,SupplierId,CompanyId", IsForeignKey=true)]
		public Quotation Quotation
		{
			get
			{
				return this._Quotation.Entity;
			}
			set
			{
				Quotation previousValue = this._Quotation.Entity;
				if (((previousValue != value) 
							|| (this._Quotation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Quotation.Entity = null;
						previousValue.QuotationItems.Remove(this);
					}
					this._Quotation.Entity = value;
					if ((value != null))
					{
						value.QuotationItems.Add(this);
						this._QuotationId = value.QuotationId;
						this._SupplierId = value.SupplierId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._QuotationId = default(int);
						this._SupplierId = default(int);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Quotation");
				}
			}
		}
		
		[Association(Name="PurchaseOrderItem_QuotationItem", Storage="_PurchaseOrderItem", ThisKey="PurchaseOrderItemId,PurchaseOrderId,CompanyId", OtherKey="PurchaseOrderItemId,PurchaseOrderId,CompanyId", IsForeignKey=true)]
		public PurchaseOrderItem PurchaseOrderItem
		{
			get
			{
				return this._PurchaseOrderItem.Entity;
			}
			set
			{
				PurchaseOrderItem previousValue = this._PurchaseOrderItem.Entity;
				if (((previousValue != value) 
							|| (this._PurchaseOrderItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PurchaseOrderItem.Entity = null;
						previousValue.QuotationItems.Remove(this);
					}
					this._PurchaseOrderItem.Entity = value;
					if ((value != null))
					{
						value.QuotationItems.Add(this);
						this._PurchaseOrderItemId = value.PurchaseOrderItemId;
						this._PurchaseOrderId = value.PurchaseOrderId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._PurchaseOrderItemId = default(int);
						this._PurchaseOrderId = default(int);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("PurchaseOrderItem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Quotation = default(EntityRef<Quotation>);
			this._PurchaseOrderItem = default(EntityRef<PurchaseOrderItem>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.Receipt")]
	[DataContract()]
	public partial class Receipt : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReceiptId;
		
		private int _CompanyId;
		
		private System.Nullable<int> _CustomerId;
		
		private System.Nullable<int> _TransporterId;
		
		private System.Nullable<System.DateTime> _IssueDate;
		
		private System.Nullable<System.DateTime> _EntryDate;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private System.Nullable<int> _CfopId;
		
		private System.Nullable<int> _ReceiptNumber;
		
		private System.Nullable<decimal> _SubstitutionICMSBase;
		
		private System.Nullable<decimal> _SubstitutionICMSValue;
		
		private System.Nullable<decimal> _FreightValue;
		
		private System.Nullable<decimal> _InsuranceValue;
		
		private System.Nullable<decimal> _OthersChargesValue;
		
		private System.Nullable<decimal> _ReceiptValue;
		
		private System.Nullable<int> _SupplierId;
		
		private System.Nullable<System.DateTime> _DeliveryDate;
		
		private System.Nullable<bool> _IsCanceled;
		
		private string _Observation;
		
		private string _DeliveryPostalCode;
		
		private string _DeliveryAddressComplement;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<ReceiptItem> _ReceiptItems;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Sale> _Sales;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<ServiceOrder> _ServiceOrders;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Company> _Company;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Customer> _Customer;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<CFOP> _CFOP;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Supplier> _Supplier;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Transporter> _Transporter;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReceiptIdChanging(int value);
    partial void OnReceiptIdChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnCustomerIdChanging(System.Nullable<int> value);
    partial void OnCustomerIdChanged();
    partial void OnTransporterIdChanging(System.Nullable<int> value);
    partial void OnTransporterIdChanged();
    partial void OnIssueDateChanging(System.Nullable<System.DateTime> value);
    partial void OnIssueDateChanged();
    partial void OnEntryDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEntryDateChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    partial void OnCfopIdChanging(System.Nullable<int> value);
    partial void OnCfopIdChanged();
    partial void OnReceiptNumberChanging(System.Nullable<int> value);
    partial void OnReceiptNumberChanged();
    partial void OnSubstitutionICMSBaseChanging(System.Nullable<decimal> value);
    partial void OnSubstitutionICMSBaseChanged();
    partial void OnSubstitutionICMSValueChanging(System.Nullable<decimal> value);
    partial void OnSubstitutionICMSValueChanged();
    partial void OnFreightValueChanging(System.Nullable<decimal> value);
    partial void OnFreightValueChanged();
    partial void OnInsuranceValueChanging(System.Nullable<decimal> value);
    partial void OnInsuranceValueChanged();
    partial void OnOthersChargesValueChanging(System.Nullable<decimal> value);
    partial void OnOthersChargesValueChanged();
    partial void OnReceiptValueChanging(System.Nullable<decimal> value);
    partial void OnReceiptValueChanged();
    partial void OnSupplierIdChanging(System.Nullable<int> value);
    partial void OnSupplierIdChanged();
    partial void OnDeliveryDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeliveryDateChanged();
    partial void OnIsCanceledChanging(System.Nullable<bool> value);
    partial void OnIsCanceledChanged();
    partial void OnObservationChanging(string value);
    partial void OnObservationChanged();
    partial void OnDeliveryPostalCodeChanging(string value);
    partial void OnDeliveryPostalCodeChanged();
    partial void OnDeliveryAddressComplementChanging(string value);
    partial void OnDeliveryAddressComplementChanged();
    #endregion
		
		public Receipt()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ReceiptId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int ReceiptId
		{
			get
			{
				return this._ReceiptId;
			}
			set
			{
				if ((this._ReceiptId != value))
				{
					this.OnReceiptIdChanging(value);
					this.SendPropertyChanging();
					this._ReceiptId = value;
					this.SendPropertyChanged("ReceiptId");
					this.OnReceiptIdChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=2)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Column(Storage="_CustomerId", DbType="Int")]
		[DataMember(Order=3)]
		public System.Nullable<int> CustomerId
		{
			get
			{
				return this._CustomerId;
			}
			set
			{
				if ((this._CustomerId != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerId = value;
					this.SendPropertyChanged("CustomerId");
					this.OnCustomerIdChanged();
				}
			}
		}
		
		[Column(Storage="_TransporterId", DbType="Int")]
		[DataMember(Order=4)]
		public System.Nullable<int> TransporterId
		{
			get
			{
				return this._TransporterId;
			}
			set
			{
				if ((this._TransporterId != value))
				{
					if (this._Transporter.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTransporterIdChanging(value);
					this.SendPropertyChanging();
					this._TransporterId = value;
					this.SendPropertyChanged("TransporterId");
					this.OnTransporterIdChanged();
				}
			}
		}
		
		[Column(Storage="_IssueDate", DbType="DateTime")]
		[DataMember(Order=5)]
		public System.Nullable<System.DateTime> IssueDate
		{
			get
			{
				return this._IssueDate;
			}
			set
			{
				if ((this._IssueDate != value))
				{
					this.OnIssueDateChanging(value);
					this.SendPropertyChanging();
					this._IssueDate = value;
					this.SendPropertyChanged("IssueDate");
					this.OnIssueDateChanged();
				}
			}
		}
		
		[Column(Storage="_EntryDate", DbType="DateTime")]
		[DataMember(Order=6)]
		public System.Nullable<System.DateTime> EntryDate
		{
			get
			{
				return this._EntryDate;
			}
			set
			{
				if ((this._EntryDate != value))
				{
					this.OnEntryDateChanging(value);
					this.SendPropertyChanging();
					this._EntryDate = value;
					this.SendPropertyChanged("EntryDate");
					this.OnEntryDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime")]
		[DataMember(Order=7)]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_CfopId", DbType="Int")]
		[DataMember(Order=8)]
		public System.Nullable<int> CfopId
		{
			get
			{
				return this._CfopId;
			}
			set
			{
				if ((this._CfopId != value))
				{
					if (this._CFOP.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCfopIdChanging(value);
					this.SendPropertyChanging();
					this._CfopId = value;
					this.SendPropertyChanged("CfopId");
					this.OnCfopIdChanged();
				}
			}
		}
		
		[Column(Storage="_ReceiptNumber", DbType="Int")]
		[DataMember(Order=9)]
		public System.Nullable<int> ReceiptNumber
		{
			get
			{
				return this._ReceiptNumber;
			}
			set
			{
				if ((this._ReceiptNumber != value))
				{
					this.OnReceiptNumberChanging(value);
					this.SendPropertyChanging();
					this._ReceiptNumber = value;
					this.SendPropertyChanged("ReceiptNumber");
					this.OnReceiptNumberChanged();
				}
			}
		}
		
		[Column(Storage="_SubstitutionICMSBase", DbType="Decimal(18,2)")]
		[DataMember(Order=10)]
		public System.Nullable<decimal> SubstitutionICMSBase
		{
			get
			{
				return this._SubstitutionICMSBase;
			}
			set
			{
				if ((this._SubstitutionICMSBase != value))
				{
					this.OnSubstitutionICMSBaseChanging(value);
					this.SendPropertyChanging();
					this._SubstitutionICMSBase = value;
					this.SendPropertyChanged("SubstitutionICMSBase");
					this.OnSubstitutionICMSBaseChanged();
				}
			}
		}
		
		[Column(Storage="_SubstitutionICMSValue", DbType="Decimal(18,2)")]
		[DataMember(Order=11)]
		public System.Nullable<decimal> SubstitutionICMSValue
		{
			get
			{
				return this._SubstitutionICMSValue;
			}
			set
			{
				if ((this._SubstitutionICMSValue != value))
				{
					this.OnSubstitutionICMSValueChanging(value);
					this.SendPropertyChanging();
					this._SubstitutionICMSValue = value;
					this.SendPropertyChanged("SubstitutionICMSValue");
					this.OnSubstitutionICMSValueChanged();
				}
			}
		}
		
		[Column(Storage="_FreightValue", DbType="Decimal(18,2)")]
		[DataMember(Order=12)]
		public System.Nullable<decimal> FreightValue
		{
			get
			{
				return this._FreightValue;
			}
			set
			{
				if ((this._FreightValue != value))
				{
					this.OnFreightValueChanging(value);
					this.SendPropertyChanging();
					this._FreightValue = value;
					this.SendPropertyChanged("FreightValue");
					this.OnFreightValueChanged();
				}
			}
		}
		
		[Column(Storage="_InsuranceValue", DbType="Decimal(18,2)")]
		[DataMember(Order=13)]
		public System.Nullable<decimal> InsuranceValue
		{
			get
			{
				return this._InsuranceValue;
			}
			set
			{
				if ((this._InsuranceValue != value))
				{
					this.OnInsuranceValueChanging(value);
					this.SendPropertyChanging();
					this._InsuranceValue = value;
					this.SendPropertyChanged("InsuranceValue");
					this.OnInsuranceValueChanged();
				}
			}
		}
		
		[Column(Storage="_OthersChargesValue", DbType="Decimal(18,2)")]
		[DataMember(Order=14)]
		public System.Nullable<decimal> OthersChargesValue
		{
			get
			{
				return this._OthersChargesValue;
			}
			set
			{
				if ((this._OthersChargesValue != value))
				{
					this.OnOthersChargesValueChanging(value);
					this.SendPropertyChanging();
					this._OthersChargesValue = value;
					this.SendPropertyChanged("OthersChargesValue");
					this.OnOthersChargesValueChanged();
				}
			}
		}
		
		[Column(Storage="_ReceiptValue", DbType="Decimal(18,2)")]
		[DataMember(Order=15)]
		public System.Nullable<decimal> ReceiptValue
		{
			get
			{
				return this._ReceiptValue;
			}
			set
			{
				if ((this._ReceiptValue != value))
				{
					this.OnReceiptValueChanging(value);
					this.SendPropertyChanging();
					this._ReceiptValue = value;
					this.SendPropertyChanged("ReceiptValue");
					this.OnReceiptValueChanged();
				}
			}
		}
		
		[Column(Storage="_SupplierId", DbType="Int")]
		[DataMember(Order=16)]
		public System.Nullable<int> SupplierId
		{
			get
			{
				return this._SupplierId;
			}
			set
			{
				if ((this._SupplierId != value))
				{
					if (this._Supplier.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSupplierIdChanging(value);
					this.SendPropertyChanging();
					this._SupplierId = value;
					this.SendPropertyChanged("SupplierId");
					this.OnSupplierIdChanged();
				}
			}
		}
		
		[Column(Storage="_DeliveryDate", DbType="DateTime")]
		[DataMember(Order=17)]
		public System.Nullable<System.DateTime> DeliveryDate
		{
			get
			{
				return this._DeliveryDate;
			}
			set
			{
				if ((this._DeliveryDate != value))
				{
					this.OnDeliveryDateChanging(value);
					this.SendPropertyChanging();
					this._DeliveryDate = value;
					this.SendPropertyChanged("DeliveryDate");
					this.OnDeliveryDateChanged();
				}
			}
		}
		
		[Column(Storage="_IsCanceled", DbType="Bit")]
		[DataMember(Order=18)]
		public System.Nullable<bool> IsCanceled
		{
			get
			{
				return this._IsCanceled;
			}
			set
			{
				if ((this._IsCanceled != value))
				{
					this.OnIsCanceledChanging(value);
					this.SendPropertyChanging();
					this._IsCanceled = value;
					this.SendPropertyChanged("IsCanceled");
					this.OnIsCanceledChanged();
				}
			}
		}
		
		[Column(Storage="_Observation", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=19)]
		public string Observation
		{
			get
			{
				return this._Observation;
			}
			set
			{
				if ((this._Observation != value))
				{
					this.OnObservationChanging(value);
					this.SendPropertyChanging();
					this._Observation = value;
					this.SendPropertyChanged("Observation");
					this.OnObservationChanged();
				}
			}
		}
		
		[Column(Storage="_DeliveryPostalCode", DbType="Char(18)")]
		[DataMember(Order=20)]
		public string DeliveryPostalCode
		{
			get
			{
				return this._DeliveryPostalCode;
			}
			set
			{
				if ((this._DeliveryPostalCode != value))
				{
					this.OnDeliveryPostalCodeChanging(value);
					this.SendPropertyChanging();
					this._DeliveryPostalCode = value;
					this.SendPropertyChanged("DeliveryPostalCode");
					this.OnDeliveryPostalCodeChanged();
				}
			}
		}
		
		[Column(Storage="_DeliveryAddressComplement", DbType="Char(18)")]
		[DataMember(Order=21)]
		public string DeliveryAddressComplement
		{
			get
			{
				return this._DeliveryAddressComplement;
			}
			set
			{
				if ((this._DeliveryAddressComplement != value))
				{
					this.OnDeliveryAddressComplementChanging(value);
					this.SendPropertyChanging();
					this._DeliveryAddressComplement = value;
					this.SendPropertyChanged("DeliveryAddressComplement");
					this.OnDeliveryAddressComplementChanged();
				}
			}
		}
		
		[Association(Name="Receipt_ReceiptItem", Storage="_ReceiptItems", ThisKey="ReceiptId,CompanyId", OtherKey="ReceiptId,CompanyId")]
		[DataMember(Order=22, EmitDefaultValue=false)]
		public EntitySet<ReceiptItem> ReceiptItems
		{
			get
			{
				if ((this.serializing 
							&& (this._ReceiptItems.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ReceiptItems;
			}
			set
			{
				this._ReceiptItems.Assign(value);
			}
		}
		
		[Association(Name="Receipt_Sale", Storage="_Sales", ThisKey="ReceiptId,CompanyId", OtherKey="ReceiptId,CompanyId")]
		[DataMember(Order=23, EmitDefaultValue=false)]
		public EntitySet<Sale> Sales
		{
			get
			{
				if ((this.serializing 
							&& (this._Sales.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Sales;
			}
			set
			{
				this._Sales.Assign(value);
			}
		}
		
		[Association(Name="Receipt_ServiceOrder", Storage="_ServiceOrders", ThisKey="ReceiptId,CompanyId", OtherKey="ReceiptId,CompanyId")]
		[DataMember(Order=24, EmitDefaultValue=false)]
		public EntitySet<ServiceOrder> ServiceOrders
		{
			get
			{
				if ((this.serializing 
							&& (this._ServiceOrders.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ServiceOrders;
			}
			set
			{
				this._ServiceOrders.Assign(value);
			}
		}
		
		[Association(Name="Company_Receipt", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Receipts.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Receipts.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[Association(Name="Customer_Receipt", Storage="_Customer", ThisKey="CustomerId", OtherKey="CustomerId", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Receipts.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Receipts.Add(this);
						this._CustomerId = value.CustomerId;
					}
					else
					{
						this._CustomerId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[Association(Name="CFOP_Receipt", Storage="_CFOP", ThisKey="CfopId", OtherKey="CfopId", IsForeignKey=true)]
		public CFOP CFOP
		{
			get
			{
				return this._CFOP.Entity;
			}
			set
			{
				CFOP previousValue = this._CFOP.Entity;
				if (((previousValue != value) 
							|| (this._CFOP.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CFOP.Entity = null;
						previousValue.Receipts.Remove(this);
					}
					this._CFOP.Entity = value;
					if ((value != null))
					{
						value.Receipts.Add(this);
						this._CfopId = value.CfopId;
					}
					else
					{
						this._CfopId = default(Nullable<int>);
					}
					this.SendPropertyChanged("CFOP");
				}
			}
		}
		
		[Association(Name="Supplier_Receipt", Storage="_Supplier", ThisKey="SupplierId", OtherKey="SupplierId", IsForeignKey=true)]
		public Supplier Supplier
		{
			get
			{
				return this._Supplier.Entity;
			}
			set
			{
				Supplier previousValue = this._Supplier.Entity;
				if (((previousValue != value) 
							|| (this._Supplier.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Supplier.Entity = null;
						previousValue.Receipts.Remove(this);
					}
					this._Supplier.Entity = value;
					if ((value != null))
					{
						value.Receipts.Add(this);
						this._SupplierId = value.SupplierId;
					}
					else
					{
						this._SupplierId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Supplier");
				}
			}
		}
		
		[Association(Name="Transporter_Receipt", Storage="_Transporter", ThisKey="TransporterId,CompanyId", OtherKey="TransporterId,CompanyId", IsForeignKey=true)]
		public Transporter Transporter
		{
			get
			{
				return this._Transporter.Entity;
			}
			set
			{
				Transporter previousValue = this._Transporter.Entity;
				if (((previousValue != value) 
							|| (this._Transporter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Transporter.Entity = null;
						previousValue.Receipts.Remove(this);
					}
					this._Transporter.Entity = value;
					if ((value != null))
					{
						value.Receipts.Add(this);
						this._TransporterId = value.TransporterId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._TransporterId = default(Nullable<int>);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Transporter");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ReceiptItems(ReceiptItem entity)
		{
			this.SendPropertyChanging();
			entity.Receipt = this;
		}
		
		private void detach_ReceiptItems(ReceiptItem entity)
		{
			this.SendPropertyChanging();
			entity.Receipt = null;
		}
		
		private void attach_Sales(Sale entity)
		{
			this.SendPropertyChanging();
			entity.Receipt = this;
		}
		
		private void detach_Sales(Sale entity)
		{
			this.SendPropertyChanging();
			entity.Receipt = null;
		}
		
		private void attach_ServiceOrders(ServiceOrder entity)
		{
			this.SendPropertyChanging();
			entity.Receipt = this;
		}
		
		private void detach_ServiceOrders(ServiceOrder entity)
		{
			this.SendPropertyChanging();
			entity.Receipt = null;
		}
		
		private void Initialize()
		{
			this._ReceiptItems = new EntitySet<ReceiptItem>(new Action<ReceiptItem>(this.attach_ReceiptItems), new Action<ReceiptItem>(this.detach_ReceiptItems));
			this._Sales = new EntitySet<Sale>(new Action<Sale>(this.attach_Sales), new Action<Sale>(this.detach_Sales));
			this._ServiceOrders = new EntitySet<ServiceOrder>(new Action<ServiceOrder>(this.attach_ServiceOrders), new Action<ServiceOrder>(this.detach_ServiceOrders));
			this._Company = default(EntityRef<Company>);
			this._Customer = default(EntityRef<Customer>);
			this._CFOP = default(EntityRef<CFOP>);
			this._Supplier = default(EntityRef<Supplier>);
			this._Transporter = default(EntityRef<Transporter>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.ReceiptFieldConfiguration")]
	[DataContract()]
	public partial class ReceiptFieldConfiguration : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReceiptFieldId;
		
		private int _CompanyId;
		
		private string _Name;
		
		private System.Nullable<int> _MarginTop;
		
		private System.Nullable<int> _MarginLeft;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Company> _Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReceiptFieldIdChanging(int value);
    partial void OnReceiptFieldIdChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnMarginTopChanging(System.Nullable<int> value);
    partial void OnMarginTopChanged();
    partial void OnMarginLeftChanging(System.Nullable<int> value);
    partial void OnMarginLeftChanged();
    #endregion
		
		public ReceiptFieldConfiguration()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ReceiptFieldId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int ReceiptFieldId
		{
			get
			{
				return this._ReceiptFieldId;
			}
			set
			{
				if ((this._ReceiptFieldId != value))
				{
					this.OnReceiptFieldIdChanging(value);
					this.SendPropertyChanging();
					this._ReceiptFieldId = value;
					this.SendPropertyChanged("ReceiptFieldId");
					this.OnReceiptFieldIdChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=2)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		[DataMember(Order=3)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_MarginTop", DbType="Int")]
		[DataMember(Order=4)]
		public System.Nullable<int> MarginTop
		{
			get
			{
				return this._MarginTop;
			}
			set
			{
				if ((this._MarginTop != value))
				{
					this.OnMarginTopChanging(value);
					this.SendPropertyChanging();
					this._MarginTop = value;
					this.SendPropertyChanged("MarginTop");
					this.OnMarginTopChanged();
				}
			}
		}
		
		[Column(Storage="_MarginLeft", DbType="Int")]
		[DataMember(Order=5)]
		public System.Nullable<int> MarginLeft
		{
			get
			{
				return this._MarginLeft;
			}
			set
			{
				if ((this._MarginLeft != value))
				{
					this.OnMarginLeftChanging(value);
					this.SendPropertyChanging();
					this._MarginLeft = value;
					this.SendPropertyChanged("MarginLeft");
					this.OnMarginLeftChanged();
				}
			}
		}
		
		[Association(Name="Company_ReceiptFieldConfiguration", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.ReceiptFieldConfigurations.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.ReceiptFieldConfigurations.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.ReceiptItem")]
	[DataContract()]
	public partial class ReceiptItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReceiptItemId;
		
		private int _ReceiptId;
		
		private int _CompanyId;
		
		private System.Nullable<int> _ServiceId;
		
		private string _Description;
		
		private System.Nullable<int> _ProductId;
		
		private string _FiscalClass;
		
		private System.Nullable<int> _Quantity;
		
		private System.Nullable<decimal> _UnitPrice;
		
		private System.Nullable<decimal> _IPI;
		
		private System.Nullable<decimal> _ICMS;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Receipt> _Receipt;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Product> _Product;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Service> _Service;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReceiptItemIdChanging(int value);
    partial void OnReceiptItemIdChanged();
    partial void OnReceiptIdChanging(int value);
    partial void OnReceiptIdChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnServiceIdChanging(System.Nullable<int> value);
    partial void OnServiceIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnProductIdChanging(System.Nullable<int> value);
    partial void OnProductIdChanged();
    partial void OnFiscalClassChanging(string value);
    partial void OnFiscalClassChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    partial void OnUnitPriceChanging(System.Nullable<decimal> value);
    partial void OnUnitPriceChanged();
    partial void OnIPIChanging(System.Nullable<decimal> value);
    partial void OnIPIChanged();
    partial void OnICMSChanging(System.Nullable<decimal> value);
    partial void OnICMSChanged();
    #endregion
		
		public ReceiptItem()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ReceiptItemId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int ReceiptItemId
		{
			get
			{
				return this._ReceiptItemId;
			}
			set
			{
				if ((this._ReceiptItemId != value))
				{
					this.OnReceiptItemIdChanging(value);
					this.SendPropertyChanging();
					this._ReceiptItemId = value;
					this.SendPropertyChanged("ReceiptItemId");
					this.OnReceiptItemIdChanged();
				}
			}
		}
		
		[Column(Storage="_ReceiptId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=2)]
		public int ReceiptId
		{
			get
			{
				return this._ReceiptId;
			}
			set
			{
				if ((this._ReceiptId != value))
				{
					if (this._Receipt.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReceiptIdChanging(value);
					this.SendPropertyChanging();
					this._ReceiptId = value;
					this.SendPropertyChanged("ReceiptId");
					this.OnReceiptIdChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=3)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Receipt.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Column(Storage="_ServiceId", DbType="Int")]
		[DataMember(Order=4)]
		public System.Nullable<int> ServiceId
		{
			get
			{
				return this._ServiceId;
			}
			set
			{
				if ((this._ServiceId != value))
				{
					if (this._Service.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceIdChanging(value);
					this.SendPropertyChanging();
					this._ServiceId = value;
					this.SendPropertyChanged("ServiceId");
					this.OnServiceIdChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(200)")]
		[DataMember(Order=5)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_ProductId", DbType="Int")]
		[DataMember(Order=6)]
		public System.Nullable<int> ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[Column(Storage="_FiscalClass", DbType="VarChar(50)")]
		[DataMember(Order=7)]
		public string FiscalClass
		{
			get
			{
				return this._FiscalClass;
			}
			set
			{
				if ((this._FiscalClass != value))
				{
					this.OnFiscalClassChanging(value);
					this.SendPropertyChanging();
					this._FiscalClass = value;
					this.SendPropertyChanged("FiscalClass");
					this.OnFiscalClassChanged();
				}
			}
		}
		
		[Column(Storage="_Quantity", DbType="Int")]
		[DataMember(Order=8)]
		public System.Nullable<int> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_UnitPrice", DbType="Decimal(18,2)")]
		[DataMember(Order=9)]
		public System.Nullable<decimal> UnitPrice
		{
			get
			{
				return this._UnitPrice;
			}
			set
			{
				if ((this._UnitPrice != value))
				{
					this.OnUnitPriceChanging(value);
					this.SendPropertyChanging();
					this._UnitPrice = value;
					this.SendPropertyChanged("UnitPrice");
					this.OnUnitPriceChanged();
				}
			}
		}
		
		[Column(Storage="_IPI", DbType="Decimal(18,2)")]
		[DataMember(Order=10)]
		public System.Nullable<decimal> IPI
		{
			get
			{
				return this._IPI;
			}
			set
			{
				if ((this._IPI != value))
				{
					this.OnIPIChanging(value);
					this.SendPropertyChanging();
					this._IPI = value;
					this.SendPropertyChanged("IPI");
					this.OnIPIChanged();
				}
			}
		}
		
		[Column(Storage="_ICMS", DbType="Decimal(18,2)")]
		[DataMember(Order=11)]
		public System.Nullable<decimal> ICMS
		{
			get
			{
				return this._ICMS;
			}
			set
			{
				if ((this._ICMS != value))
				{
					this.OnICMSChanging(value);
					this.SendPropertyChanging();
					this._ICMS = value;
					this.SendPropertyChanged("ICMS");
					this.OnICMSChanged();
				}
			}
		}
		
		[Association(Name="Receipt_ReceiptItem", Storage="_Receipt", ThisKey="ReceiptId,CompanyId", OtherKey="ReceiptId,CompanyId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Receipt Receipt
		{
			get
			{
				return this._Receipt.Entity;
			}
			set
			{
				Receipt previousValue = this._Receipt.Entity;
				if (((previousValue != value) 
							|| (this._Receipt.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Receipt.Entity = null;
						previousValue.ReceiptItems.Remove(this);
					}
					this._Receipt.Entity = value;
					if ((value != null))
					{
						value.ReceiptItems.Add(this);
						this._ReceiptId = value.ReceiptId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._ReceiptId = default(int);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Receipt");
				}
			}
		}
		
		[Association(Name="Product_ReceiptItem", Storage="_Product", ThisKey="ProductId", OtherKey="ProductId", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ReceiptItems.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ReceiptItems.Add(this);
						this._ProductId = value.ProductId;
					}
					else
					{
						this._ProductId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		[Association(Name="Service_ReceiptItem", Storage="_Service", ThisKey="ServiceId", OtherKey="ServiceId", IsForeignKey=true)]
		public Service Service
		{
			get
			{
				return this._Service.Entity;
			}
			set
			{
				Service previousValue = this._Service.Entity;
				if (((previousValue != value) 
							|| (this._Service.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Service.Entity = null;
						previousValue.ReceiptItems.Remove(this);
					}
					this._Service.Entity = value;
					if ((value != null))
					{
						value.ReceiptItems.Add(this);
						this._ServiceId = value.ServiceId;
					}
					else
					{
						this._ServiceId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Service");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Receipt = default(EntityRef<Receipt>);
			this._Product = default(EntityRef<Product>);
			this._Service = default(EntityRef<Service>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.ReportColumns")]
	[DataContract()]
	public partial class ReportColumn : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReportTablesSchemaId;
		
		private int _ReportColumnsSchemaId;
		
		private bool _IsMatrix;
		
		private int _ReportId;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<ReportColumnsSchema> _ReportColumnsSchema;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Report> _Report;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReportTablesSchemaIdChanging(int value);
    partial void OnReportTablesSchemaIdChanged();
    partial void OnReportColumnsSchemaIdChanging(int value);
    partial void OnReportColumnsSchemaIdChanged();
    partial void OnIsMatrixChanging(bool value);
    partial void OnIsMatrixChanged();
    partial void OnReportIdChanging(int value);
    partial void OnReportIdChanged();
    #endregion
		
		public ReportColumn()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ReportTablesSchemaId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=1)]
		public int ReportTablesSchemaId
		{
			get
			{
				return this._ReportTablesSchemaId;
			}
			set
			{
				if ((this._ReportTablesSchemaId != value))
				{
					if (this._ReportColumnsSchema.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReportTablesSchemaIdChanging(value);
					this.SendPropertyChanging();
					this._ReportTablesSchemaId = value;
					this.SendPropertyChanged("ReportTablesSchemaId");
					this.OnReportTablesSchemaIdChanged();
				}
			}
		}
		
		[Column(Storage="_ReportColumnsSchemaId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=2)]
		public int ReportColumnsSchemaId
		{
			get
			{
				return this._ReportColumnsSchemaId;
			}
			set
			{
				if ((this._ReportColumnsSchemaId != value))
				{
					if (this._ReportColumnsSchema.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReportColumnsSchemaIdChanging(value);
					this.SendPropertyChanging();
					this._ReportColumnsSchemaId = value;
					this.SendPropertyChanged("ReportColumnsSchemaId");
					this.OnReportColumnsSchemaIdChanged();
				}
			}
		}
		
		[Column(Storage="_IsMatrix", DbType="Bit NOT NULL")]
		[DataMember(Order=3)]
		public bool IsMatrix
		{
			get
			{
				return this._IsMatrix;
			}
			set
			{
				if ((this._IsMatrix != value))
				{
					this.OnIsMatrixChanging(value);
					this.SendPropertyChanging();
					this._IsMatrix = value;
					this.SendPropertyChanged("IsMatrix");
					this.OnIsMatrixChanged();
				}
			}
		}
		
		[Column(Storage="_ReportId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=4)]
		public int ReportId
		{
			get
			{
				return this._ReportId;
			}
			set
			{
				if ((this._ReportId != value))
				{
					if (this._Report.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReportIdChanging(value);
					this.SendPropertyChanging();
					this._ReportId = value;
					this.SendPropertyChanged("ReportId");
					this.OnReportIdChanged();
				}
			}
		}
		
		[Association(Name="ReportColumnsSchema_ReportColumn", Storage="_ReportColumnsSchema", ThisKey="ReportColumnsSchemaId,ReportTablesSchemaId", OtherKey="ReportColumnsSchemaId,ReportTablesSchemaId", IsForeignKey=true)]
		public ReportColumnsSchema ReportColumnsSchema
		{
			get
			{
				return this._ReportColumnsSchema.Entity;
			}
			set
			{
				ReportColumnsSchema previousValue = this._ReportColumnsSchema.Entity;
				if (((previousValue != value) 
							|| (this._ReportColumnsSchema.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReportColumnsSchema.Entity = null;
						previousValue.ReportColumns.Remove(this);
					}
					this._ReportColumnsSchema.Entity = value;
					if ((value != null))
					{
						value.ReportColumns.Add(this);
						this._ReportColumnsSchemaId = value.ReportColumnsSchemaId;
						this._ReportTablesSchemaId = value.ReportTablesSchemaId;
					}
					else
					{
						this._ReportColumnsSchemaId = default(int);
						this._ReportTablesSchemaId = default(int);
					}
					this.SendPropertyChanged("ReportColumnsSchema");
				}
			}
		}
		
		[Association(Name="Report_ReportColumn", Storage="_Report", ThisKey="ReportId", OtherKey="ReportId", IsForeignKey=true)]
		public Report Report
		{
			get
			{
				return this._Report.Entity;
			}
			set
			{
				Report previousValue = this._Report.Entity;
				if (((previousValue != value) 
							|| (this._Report.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Report.Entity = null;
						previousValue.ReportColumns.Remove(this);
					}
					this._Report.Entity = value;
					if ((value != null))
					{
						value.ReportColumns.Add(this);
						this._ReportId = value.ReportId;
					}
					else
					{
						this._ReportId = default(int);
					}
					this.SendPropertyChanged("Report");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._ReportColumnsSchema = default(EntityRef<ReportColumnsSchema>);
			this._Report = default(EntityRef<Report>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.ReportColumnsSchema")]
	[DataContract()]
	public partial class ReportColumnsSchema : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReportColumnsSchemaId;
		
		private string _Name;
		
		private string _Source;
		
		private int _ReportTablesSchemaId;
		
		private int _ReportDataTypeId;
		
		private string _ForeignKey;
		
		private string _PrimaryKey;
		
		private string _PrimaryTable;
		
		private string _PrimaryLabelColumn;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<ReportColumn> _ReportColumns;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<ReportFilter> _ReportFilters;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<ReportSort> _ReportSorts;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<ReportDataType> _ReportDataType;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<ReportTablesSchema> _ReportTablesSchema;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReportColumnsSchemaIdChanging(int value);
    partial void OnReportColumnsSchemaIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSourceChanging(string value);
    partial void OnSourceChanged();
    partial void OnReportTablesSchemaIdChanging(int value);
    partial void OnReportTablesSchemaIdChanged();
    partial void OnReportDataTypeIdChanging(int value);
    partial void OnReportDataTypeIdChanged();
    partial void OnForeignKeyChanging(string value);
    partial void OnForeignKeyChanged();
    partial void OnPrimaryKeyChanging(string value);
    partial void OnPrimaryKeyChanged();
    partial void OnPrimaryTableChanging(string value);
    partial void OnPrimaryTableChanged();
    partial void OnPrimaryLabelColumnChanging(string value);
    partial void OnPrimaryLabelColumnChanged();
    #endregion
		
		public ReportColumnsSchema()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ReportColumnsSchemaId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int ReportColumnsSchemaId
		{
			get
			{
				return this._ReportColumnsSchemaId;
			}
			set
			{
				if ((this._ReportColumnsSchemaId != value))
				{
					this.OnReportColumnsSchemaIdChanging(value);
					this.SendPropertyChanging();
					this._ReportColumnsSchemaId = value;
					this.SendPropertyChanged("ReportColumnsSchemaId");
					this.OnReportColumnsSchemaIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(1024)")]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Source", DbType="VarChar(1024)")]
		[DataMember(Order=3)]
		public string Source
		{
			get
			{
				return this._Source;
			}
			set
			{
				if ((this._Source != value))
				{
					this.OnSourceChanging(value);
					this.SendPropertyChanging();
					this._Source = value;
					this.SendPropertyChanged("Source");
					this.OnSourceChanged();
				}
			}
		}
		
		[Column(Storage="_ReportTablesSchemaId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=4)]
		public int ReportTablesSchemaId
		{
			get
			{
				return this._ReportTablesSchemaId;
			}
			set
			{
				if ((this._ReportTablesSchemaId != value))
				{
					if (this._ReportTablesSchema.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReportTablesSchemaIdChanging(value);
					this.SendPropertyChanging();
					this._ReportTablesSchemaId = value;
					this.SendPropertyChanged("ReportTablesSchemaId");
					this.OnReportTablesSchemaIdChanged();
				}
			}
		}
		
		[Column(Storage="_ReportDataTypeId", DbType="Int NOT NULL")]
		[DataMember(Order=5)]
		public int ReportDataTypeId
		{
			get
			{
				return this._ReportDataTypeId;
			}
			set
			{
				if ((this._ReportDataTypeId != value))
				{
					if (this._ReportDataType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReportDataTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ReportDataTypeId = value;
					this.SendPropertyChanged("ReportDataTypeId");
					this.OnReportDataTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_ForeignKey", DbType="VarChar(1024)")]
		[DataMember(Order=6)]
		public string ForeignKey
		{
			get
			{
				return this._ForeignKey;
			}
			set
			{
				if ((this._ForeignKey != value))
				{
					this.OnForeignKeyChanging(value);
					this.SendPropertyChanging();
					this._ForeignKey = value;
					this.SendPropertyChanged("ForeignKey");
					this.OnForeignKeyChanged();
				}
			}
		}
		
		[Column(Storage="_PrimaryKey", DbType="VarChar(1024)")]
		[DataMember(Order=7)]
		public string PrimaryKey
		{
			get
			{
				return this._PrimaryKey;
			}
			set
			{
				if ((this._PrimaryKey != value))
				{
					this.OnPrimaryKeyChanging(value);
					this.SendPropertyChanging();
					this._PrimaryKey = value;
					this.SendPropertyChanged("PrimaryKey");
					this.OnPrimaryKeyChanged();
				}
			}
		}
		
		[Column(Storage="_PrimaryTable", DbType="VarChar(1024)")]
		[DataMember(Order=8)]
		public string PrimaryTable
		{
			get
			{
				return this._PrimaryTable;
			}
			set
			{
				if ((this._PrimaryTable != value))
				{
					this.OnPrimaryTableChanging(value);
					this.SendPropertyChanging();
					this._PrimaryTable = value;
					this.SendPropertyChanged("PrimaryTable");
					this.OnPrimaryTableChanged();
				}
			}
		}
		
		[Column(Storage="_PrimaryLabelColumn", DbType="VarChar(1024)")]
		[DataMember(Order=9)]
		public string PrimaryLabelColumn
		{
			get
			{
				return this._PrimaryLabelColumn;
			}
			set
			{
				if ((this._PrimaryLabelColumn != value))
				{
					this.OnPrimaryLabelColumnChanging(value);
					this.SendPropertyChanging();
					this._PrimaryLabelColumn = value;
					this.SendPropertyChanged("PrimaryLabelColumn");
					this.OnPrimaryLabelColumnChanged();
				}
			}
		}
		
		[Association(Name="ReportColumnsSchema_ReportColumn", Storage="_ReportColumns", ThisKey="ReportColumnsSchemaId,ReportTablesSchemaId", OtherKey="ReportColumnsSchemaId,ReportTablesSchemaId")]
		[DataMember(Order=10, EmitDefaultValue=false)]
		public EntitySet<ReportColumn> ReportColumns
		{
			get
			{
				if ((this.serializing 
							&& (this._ReportColumns.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ReportColumns;
			}
			set
			{
				this._ReportColumns.Assign(value);
			}
		}
		
		[Association(Name="ReportColumnsSchema_ReportFilter", Storage="_ReportFilters", ThisKey="ReportColumnsSchemaId,ReportTablesSchemaId", OtherKey="ReportColumnsSchemaId,ReportTablesSchemaId")]
		[DataMember(Order=11, EmitDefaultValue=false)]
		public EntitySet<ReportFilter> ReportFilters
		{
			get
			{
				if ((this.serializing 
							&& (this._ReportFilters.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ReportFilters;
			}
			set
			{
				this._ReportFilters.Assign(value);
			}
		}
		
		[Association(Name="ReportColumnsSchema_ReportSort", Storage="_ReportSorts", ThisKey="ReportColumnsSchemaId,ReportTablesSchemaId", OtherKey="ReportColumnsSchemaId,ReportTablesSchemaId")]
		[DataMember(Order=12, EmitDefaultValue=false)]
		public EntitySet<ReportSort> ReportSorts
		{
			get
			{
				if ((this.serializing 
							&& (this._ReportSorts.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ReportSorts;
			}
			set
			{
				this._ReportSorts.Assign(value);
			}
		}
		
		[Association(Name="ReportDataType_ReportColumnsSchema", Storage="_ReportDataType", ThisKey="ReportDataTypeId", OtherKey="ReportDataTypeId", IsForeignKey=true)]
		public ReportDataType ReportDataType
		{
			get
			{
				return this._ReportDataType.Entity;
			}
			set
			{
				ReportDataType previousValue = this._ReportDataType.Entity;
				if (((previousValue != value) 
							|| (this._ReportDataType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReportDataType.Entity = null;
						previousValue.ReportColumnsSchemas.Remove(this);
					}
					this._ReportDataType.Entity = value;
					if ((value != null))
					{
						value.ReportColumnsSchemas.Add(this);
						this._ReportDataTypeId = value.ReportDataTypeId;
					}
					else
					{
						this._ReportDataTypeId = default(int);
					}
					this.SendPropertyChanged("ReportDataType");
				}
			}
		}
		
		[Association(Name="ReportTablesSchema_ReportColumnsSchema", Storage="_ReportTablesSchema", ThisKey="ReportTablesSchemaId", OtherKey="ReportTablesSchemaId", IsForeignKey=true)]
		public ReportTablesSchema ReportTablesSchema
		{
			get
			{
				return this._ReportTablesSchema.Entity;
			}
			set
			{
				ReportTablesSchema previousValue = this._ReportTablesSchema.Entity;
				if (((previousValue != value) 
							|| (this._ReportTablesSchema.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReportTablesSchema.Entity = null;
						previousValue.ReportColumnsSchemas.Remove(this);
					}
					this._ReportTablesSchema.Entity = value;
					if ((value != null))
					{
						value.ReportColumnsSchemas.Add(this);
						this._ReportTablesSchemaId = value.ReportTablesSchemaId;
					}
					else
					{
						this._ReportTablesSchemaId = default(int);
					}
					this.SendPropertyChanged("ReportTablesSchema");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ReportColumns(ReportColumn entity)
		{
			this.SendPropertyChanging();
			entity.ReportColumnsSchema = this;
		}
		
		private void detach_ReportColumns(ReportColumn entity)
		{
			this.SendPropertyChanging();
			entity.ReportColumnsSchema = null;
		}
		
		private void attach_ReportFilters(ReportFilter entity)
		{
			this.SendPropertyChanging();
			entity.ReportColumnsSchema = this;
		}
		
		private void detach_ReportFilters(ReportFilter entity)
		{
			this.SendPropertyChanging();
			entity.ReportColumnsSchema = null;
		}
		
		private void attach_ReportSorts(ReportSort entity)
		{
			this.SendPropertyChanging();
			entity.ReportColumnsSchema = this;
		}
		
		private void detach_ReportSorts(ReportSort entity)
		{
			this.SendPropertyChanging();
			entity.ReportColumnsSchema = null;
		}
		
		private void Initialize()
		{
			this._ReportColumns = new EntitySet<ReportColumn>(new Action<ReportColumn>(this.attach_ReportColumns), new Action<ReportColumn>(this.detach_ReportColumns));
			this._ReportFilters = new EntitySet<ReportFilter>(new Action<ReportFilter>(this.attach_ReportFilters), new Action<ReportFilter>(this.detach_ReportFilters));
			this._ReportSorts = new EntitySet<ReportSort>(new Action<ReportSort>(this.attach_ReportSorts), new Action<ReportSort>(this.detach_ReportSorts));
			this._ReportDataType = default(EntityRef<ReportDataType>);
			this._ReportTablesSchema = default(EntityRef<ReportTablesSchema>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.ReportDataFunctions")]
	[DataContract()]
	public partial class ReportDataFunction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReportDataFunctionId;
		
		private int _ReportDataTypeId;
		
		private string _Name;
		
		private string _SqlText;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<ReportDataType> _ReportDataType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReportDataFunctionIdChanging(int value);
    partial void OnReportDataFunctionIdChanged();
    partial void OnReportDataTypeIdChanging(int value);
    partial void OnReportDataTypeIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSqlTextChanging(string value);
    partial void OnSqlTextChanged();
    #endregion
		
		public ReportDataFunction()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ReportDataFunctionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int ReportDataFunctionId
		{
			get
			{
				return this._ReportDataFunctionId;
			}
			set
			{
				if ((this._ReportDataFunctionId != value))
				{
					this.OnReportDataFunctionIdChanging(value);
					this.SendPropertyChanging();
					this._ReportDataFunctionId = value;
					this.SendPropertyChanged("ReportDataFunctionId");
					this.OnReportDataFunctionIdChanged();
				}
			}
		}
		
		[Column(Storage="_ReportDataTypeId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=2)]
		public int ReportDataTypeId
		{
			get
			{
				return this._ReportDataTypeId;
			}
			set
			{
				if ((this._ReportDataTypeId != value))
				{
					if (this._ReportDataType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReportDataTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ReportDataTypeId = value;
					this.SendPropertyChanged("ReportDataTypeId");
					this.OnReportDataTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="Char(18)")]
		[DataMember(Order=3)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_SqlText", DbType="Char(18)")]
		[DataMember(Order=4)]
		public string SqlText
		{
			get
			{
				return this._SqlText;
			}
			set
			{
				if ((this._SqlText != value))
				{
					this.OnSqlTextChanging(value);
					this.SendPropertyChanging();
					this._SqlText = value;
					this.SendPropertyChanged("SqlText");
					this.OnSqlTextChanged();
				}
			}
		}
		
		[Association(Name="ReportDataType_ReportDataFunction", Storage="_ReportDataType", ThisKey="ReportDataTypeId", OtherKey="ReportDataTypeId", IsForeignKey=true)]
		public ReportDataType ReportDataType
		{
			get
			{
				return this._ReportDataType.Entity;
			}
			set
			{
				ReportDataType previousValue = this._ReportDataType.Entity;
				if (((previousValue != value) 
							|| (this._ReportDataType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReportDataType.Entity = null;
						previousValue.ReportDataFunctions.Remove(this);
					}
					this._ReportDataType.Entity = value;
					if ((value != null))
					{
						value.ReportDataFunctions.Add(this);
						this._ReportDataTypeId = value.ReportDataTypeId;
					}
					else
					{
						this._ReportDataTypeId = default(int);
					}
					this.SendPropertyChanged("ReportDataType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._ReportDataType = default(EntityRef<ReportDataType>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.ReportDataType")]
	[DataContract()]
	public partial class ReportDataType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReportDataTypeId;
		
		private string _Name;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<ReportColumnsSchema> _ReportColumnsSchemas;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<ReportDataFunction> _ReportDataFunctions;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<ReportFilterType> _ReportFilterTypes;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReportDataTypeIdChanging(int value);
    partial void OnReportDataTypeIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public ReportDataType()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ReportDataTypeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int ReportDataTypeId
		{
			get
			{
				return this._ReportDataTypeId;
			}
			set
			{
				if ((this._ReportDataTypeId != value))
				{
					this.OnReportDataTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ReportDataTypeId = value;
					this.SendPropertyChanged("ReportDataTypeId");
					this.OnReportDataTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(30)")]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="ReportDataType_ReportColumnsSchema", Storage="_ReportColumnsSchemas", ThisKey="ReportDataTypeId", OtherKey="ReportDataTypeId")]
		[DataMember(Order=3, EmitDefaultValue=false)]
		public EntitySet<ReportColumnsSchema> ReportColumnsSchemas
		{
			get
			{
				if ((this.serializing 
							&& (this._ReportColumnsSchemas.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ReportColumnsSchemas;
			}
			set
			{
				this._ReportColumnsSchemas.Assign(value);
			}
		}
		
		[Association(Name="ReportDataType_ReportDataFunction", Storage="_ReportDataFunctions", ThisKey="ReportDataTypeId", OtherKey="ReportDataTypeId")]
		[DataMember(Order=4, EmitDefaultValue=false)]
		public EntitySet<ReportDataFunction> ReportDataFunctions
		{
			get
			{
				if ((this.serializing 
							&& (this._ReportDataFunctions.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ReportDataFunctions;
			}
			set
			{
				this._ReportDataFunctions.Assign(value);
			}
		}
		
		[Association(Name="ReportDataType_ReportFilterType", Storage="_ReportFilterTypes", ThisKey="ReportDataTypeId", OtherKey="ReportDataTypeId")]
		[DataMember(Order=5, EmitDefaultValue=false)]
		public EntitySet<ReportFilterType> ReportFilterTypes
		{
			get
			{
				if ((this.serializing 
							&& (this._ReportFilterTypes.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ReportFilterTypes;
			}
			set
			{
				this._ReportFilterTypes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ReportColumnsSchemas(ReportColumnsSchema entity)
		{
			this.SendPropertyChanging();
			entity.ReportDataType = this;
		}
		
		private void detach_ReportColumnsSchemas(ReportColumnsSchema entity)
		{
			this.SendPropertyChanging();
			entity.ReportDataType = null;
		}
		
		private void attach_ReportDataFunctions(ReportDataFunction entity)
		{
			this.SendPropertyChanging();
			entity.ReportDataType = this;
		}
		
		private void detach_ReportDataFunctions(ReportDataFunction entity)
		{
			this.SendPropertyChanging();
			entity.ReportDataType = null;
		}
		
		private void attach_ReportFilterTypes(ReportFilterType entity)
		{
			this.SendPropertyChanging();
			entity.ReportDataType = this;
		}
		
		private void detach_ReportFilterTypes(ReportFilterType entity)
		{
			this.SendPropertyChanging();
			entity.ReportDataType = null;
		}
		
		private void Initialize()
		{
			this._ReportColumnsSchemas = new EntitySet<ReportColumnsSchema>(new Action<ReportColumnsSchema>(this.attach_ReportColumnsSchemas), new Action<ReportColumnsSchema>(this.detach_ReportColumnsSchemas));
			this._ReportDataFunctions = new EntitySet<ReportDataFunction>(new Action<ReportDataFunction>(this.attach_ReportDataFunctions), new Action<ReportDataFunction>(this.detach_ReportDataFunctions));
			this._ReportFilterTypes = new EntitySet<ReportFilterType>(new Action<ReportFilterType>(this.attach_ReportFilterTypes), new Action<ReportFilterType>(this.detach_ReportFilterTypes));
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.ReportFilter")]
	[DataContract()]
	public partial class ReportFilter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReportColumnsSchemaId;
		
		private int _ReportTablesSchemaId;
		
		private string _Value;
		
		private int _ReportId;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<ReportColumnsSchema> _ReportColumnsSchema;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Report> _Report;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReportColumnsSchemaIdChanging(int value);
    partial void OnReportColumnsSchemaIdChanged();
    partial void OnReportTablesSchemaIdChanging(int value);
    partial void OnReportTablesSchemaIdChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnReportIdChanging(int value);
    partial void OnReportIdChanged();
    #endregion
		
		public ReportFilter()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ReportColumnsSchemaId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=1)]
		public int ReportColumnsSchemaId
		{
			get
			{
				return this._ReportColumnsSchemaId;
			}
			set
			{
				if ((this._ReportColumnsSchemaId != value))
				{
					if (this._ReportColumnsSchema.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReportColumnsSchemaIdChanging(value);
					this.SendPropertyChanging();
					this._ReportColumnsSchemaId = value;
					this.SendPropertyChanged("ReportColumnsSchemaId");
					this.OnReportColumnsSchemaIdChanged();
				}
			}
		}
		
		[Column(Storage="_ReportTablesSchemaId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=2)]
		public int ReportTablesSchemaId
		{
			get
			{
				return this._ReportTablesSchemaId;
			}
			set
			{
				if ((this._ReportTablesSchemaId != value))
				{
					if (this._ReportColumnsSchema.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReportTablesSchemaIdChanging(value);
					this.SendPropertyChanging();
					this._ReportTablesSchemaId = value;
					this.SendPropertyChanged("ReportTablesSchemaId");
					this.OnReportTablesSchemaIdChanged();
				}
			}
		}
		
		[Column(Storage="_Value", DbType="VarChar(8000)")]
		[DataMember(Order=3)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[Column(Storage="_ReportId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=4)]
		public int ReportId
		{
			get
			{
				return this._ReportId;
			}
			set
			{
				if ((this._ReportId != value))
				{
					if (this._Report.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReportIdChanging(value);
					this.SendPropertyChanging();
					this._ReportId = value;
					this.SendPropertyChanged("ReportId");
					this.OnReportIdChanged();
				}
			}
		}
		
		[Association(Name="ReportColumnsSchema_ReportFilter", Storage="_ReportColumnsSchema", ThisKey="ReportColumnsSchemaId,ReportTablesSchemaId", OtherKey="ReportColumnsSchemaId,ReportTablesSchemaId", IsForeignKey=true)]
		public ReportColumnsSchema ReportColumnsSchema
		{
			get
			{
				return this._ReportColumnsSchema.Entity;
			}
			set
			{
				ReportColumnsSchema previousValue = this._ReportColumnsSchema.Entity;
				if (((previousValue != value) 
							|| (this._ReportColumnsSchema.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReportColumnsSchema.Entity = null;
						previousValue.ReportFilters.Remove(this);
					}
					this._ReportColumnsSchema.Entity = value;
					if ((value != null))
					{
						value.ReportFilters.Add(this);
						this._ReportColumnsSchemaId = value.ReportColumnsSchemaId;
						this._ReportTablesSchemaId = value.ReportTablesSchemaId;
					}
					else
					{
						this._ReportColumnsSchemaId = default(int);
						this._ReportTablesSchemaId = default(int);
					}
					this.SendPropertyChanged("ReportColumnsSchema");
				}
			}
		}
		
		[Association(Name="Report_ReportFilter", Storage="_Report", ThisKey="ReportId", OtherKey="ReportId", IsForeignKey=true)]
		public Report Report
		{
			get
			{
				return this._Report.Entity;
			}
			set
			{
				Report previousValue = this._Report.Entity;
				if (((previousValue != value) 
							|| (this._Report.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Report.Entity = null;
						previousValue.ReportFilters.Remove(this);
					}
					this._Report.Entity = value;
					if ((value != null))
					{
						value.ReportFilters.Add(this);
						this._ReportId = value.ReportId;
					}
					else
					{
						this._ReportId = default(int);
					}
					this.SendPropertyChanged("Report");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._ReportColumnsSchema = default(EntityRef<ReportColumnsSchema>);
			this._Report = default(EntityRef<Report>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.ReportFilterType")]
	[DataContract()]
	public partial class ReportFilterType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReportFilterTypeId;
		
		private string _Name;
		
		private int _ReportDataTypeId;
		
		private string _SqlText;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<ReportDataType> _ReportDataType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReportFilterTypeIdChanging(int value);
    partial void OnReportFilterTypeIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnReportDataTypeIdChanging(int value);
    partial void OnReportDataTypeIdChanged();
    partial void OnSqlTextChanging(string value);
    partial void OnSqlTextChanged();
    #endregion
		
		public ReportFilterType()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ReportFilterTypeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int ReportFilterTypeId
		{
			get
			{
				return this._ReportFilterTypeId;
			}
			set
			{
				if ((this._ReportFilterTypeId != value))
				{
					this.OnReportFilterTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ReportFilterTypeId = value;
					this.SendPropertyChanged("ReportFilterTypeId");
					this.OnReportFilterTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(30)")]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_ReportDataTypeId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=3)]
		public int ReportDataTypeId
		{
			get
			{
				return this._ReportDataTypeId;
			}
			set
			{
				if ((this._ReportDataTypeId != value))
				{
					if (this._ReportDataType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReportDataTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ReportDataTypeId = value;
					this.SendPropertyChanged("ReportDataTypeId");
					this.OnReportDataTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_SqlText", DbType="VarChar(1024)")]
		[DataMember(Order=4)]
		public string SqlText
		{
			get
			{
				return this._SqlText;
			}
			set
			{
				if ((this._SqlText != value))
				{
					this.OnSqlTextChanging(value);
					this.SendPropertyChanging();
					this._SqlText = value;
					this.SendPropertyChanged("SqlText");
					this.OnSqlTextChanged();
				}
			}
		}
		
		[Association(Name="ReportDataType_ReportFilterType", Storage="_ReportDataType", ThisKey="ReportDataTypeId", OtherKey="ReportDataTypeId", IsForeignKey=true)]
		public ReportDataType ReportDataType
		{
			get
			{
				return this._ReportDataType.Entity;
			}
			set
			{
				ReportDataType previousValue = this._ReportDataType.Entity;
				if (((previousValue != value) 
							|| (this._ReportDataType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReportDataType.Entity = null;
						previousValue.ReportFilterTypes.Remove(this);
					}
					this._ReportDataType.Entity = value;
					if ((value != null))
					{
						value.ReportFilterTypes.Add(this);
						this._ReportDataTypeId = value.ReportDataTypeId;
					}
					else
					{
						this._ReportDataTypeId = default(int);
					}
					this.SendPropertyChanged("ReportDataType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._ReportDataType = default(EntityRef<ReportDataType>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.Reports")]
	[DataContract()]
	public partial class Report : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReportId;
		
		private System.Nullable<int> _ReportTablesSchemaId;
		
		private string _Name;
		
		private string _Description;
		
		private string _ReportUrl;
		
		private string _ImageUrl;
		
		private string _Tag;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<ReportColumn> _ReportColumns;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<ReportFilter> _ReportFilters;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<ReportSort> _ReportSorts;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<ReportTablesSchema> _ReportTablesSchema;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReportIdChanging(int value);
    partial void OnReportIdChanged();
    partial void OnReportTablesSchemaIdChanging(System.Nullable<int> value);
    partial void OnReportTablesSchemaIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnReportUrlChanging(string value);
    partial void OnReportUrlChanged();
    partial void OnImageUrlChanging(string value);
    partial void OnImageUrlChanged();
    partial void OnTagChanging(string value);
    partial void OnTagChanged();
    #endregion
		
		public Report()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ReportId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int ReportId
		{
			get
			{
				return this._ReportId;
			}
			set
			{
				if ((this._ReportId != value))
				{
					this.OnReportIdChanging(value);
					this.SendPropertyChanging();
					this._ReportId = value;
					this.SendPropertyChanged("ReportId");
					this.OnReportIdChanged();
				}
			}
		}
		
		[Column(Storage="_ReportTablesSchemaId", DbType="Int")]
		[DataMember(Order=2)]
		public System.Nullable<int> ReportTablesSchemaId
		{
			get
			{
				return this._ReportTablesSchemaId;
			}
			set
			{
				if ((this._ReportTablesSchemaId != value))
				{
					if (this._ReportTablesSchema.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReportTablesSchemaIdChanging(value);
					this.SendPropertyChanging();
					this._ReportTablesSchemaId = value;
					this.SendPropertyChanged("ReportTablesSchemaId");
					this.OnReportTablesSchemaIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(1024) NOT NULL", CanBeNull=false)]
		[DataMember(Order=3)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=4)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_ReportUrl", DbType="VarChar(1024)")]
		[DataMember(Order=5)]
		public string ReportUrl
		{
			get
			{
				return this._ReportUrl;
			}
			set
			{
				if ((this._ReportUrl != value))
				{
					this.OnReportUrlChanging(value);
					this.SendPropertyChanging();
					this._ReportUrl = value;
					this.SendPropertyChanged("ReportUrl");
					this.OnReportUrlChanged();
				}
			}
		}
		
		[Column(Storage="_ImageUrl", DbType="VarChar(1024)")]
		[DataMember(Order=6)]
		public string ImageUrl
		{
			get
			{
				return this._ImageUrl;
			}
			set
			{
				if ((this._ImageUrl != value))
				{
					this.OnImageUrlChanging(value);
					this.SendPropertyChanging();
					this._ImageUrl = value;
					this.SendPropertyChanged("ImageUrl");
					this.OnImageUrlChanged();
				}
			}
		}
		
		[Column(Storage="_Tag", DbType="VarChar(1024)")]
		[DataMember(Order=7)]
		public string Tag
		{
			get
			{
				return this._Tag;
			}
			set
			{
				if ((this._Tag != value))
				{
					this.OnTagChanging(value);
					this.SendPropertyChanging();
					this._Tag = value;
					this.SendPropertyChanged("Tag");
					this.OnTagChanged();
				}
			}
		}
		
		[Association(Name="Report_ReportColumn", Storage="_ReportColumns", ThisKey="ReportId", OtherKey="ReportId")]
		[DataMember(Order=8, EmitDefaultValue=false)]
		public EntitySet<ReportColumn> ReportColumns
		{
			get
			{
				if ((this.serializing 
							&& (this._ReportColumns.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ReportColumns;
			}
			set
			{
				this._ReportColumns.Assign(value);
			}
		}
		
		[Association(Name="Report_ReportFilter", Storage="_ReportFilters", ThisKey="ReportId", OtherKey="ReportId")]
		[DataMember(Order=9, EmitDefaultValue=false)]
		public EntitySet<ReportFilter> ReportFilters
		{
			get
			{
				if ((this.serializing 
							&& (this._ReportFilters.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ReportFilters;
			}
			set
			{
				this._ReportFilters.Assign(value);
			}
		}
		
		[Association(Name="Report_ReportSort", Storage="_ReportSorts", ThisKey="ReportId", OtherKey="ReportId")]
		[DataMember(Order=10, EmitDefaultValue=false)]
		public EntitySet<ReportSort> ReportSorts
		{
			get
			{
				if ((this.serializing 
							&& (this._ReportSorts.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ReportSorts;
			}
			set
			{
				this._ReportSorts.Assign(value);
			}
		}
		
		[Association(Name="ReportTablesSchema_Report", Storage="_ReportTablesSchema", ThisKey="ReportTablesSchemaId", OtherKey="ReportTablesSchemaId", IsForeignKey=true)]
		public ReportTablesSchema ReportTablesSchema
		{
			get
			{
				return this._ReportTablesSchema.Entity;
			}
			set
			{
				ReportTablesSchema previousValue = this._ReportTablesSchema.Entity;
				if (((previousValue != value) 
							|| (this._ReportTablesSchema.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReportTablesSchema.Entity = null;
						previousValue.Reports.Remove(this);
					}
					this._ReportTablesSchema.Entity = value;
					if ((value != null))
					{
						value.Reports.Add(this);
						this._ReportTablesSchemaId = value.ReportTablesSchemaId;
					}
					else
					{
						this._ReportTablesSchemaId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ReportTablesSchema");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ReportColumns(ReportColumn entity)
		{
			this.SendPropertyChanging();
			entity.Report = this;
		}
		
		private void detach_ReportColumns(ReportColumn entity)
		{
			this.SendPropertyChanging();
			entity.Report = null;
		}
		
		private void attach_ReportFilters(ReportFilter entity)
		{
			this.SendPropertyChanging();
			entity.Report = this;
		}
		
		private void detach_ReportFilters(ReportFilter entity)
		{
			this.SendPropertyChanging();
			entity.Report = null;
		}
		
		private void attach_ReportSorts(ReportSort entity)
		{
			this.SendPropertyChanging();
			entity.Report = this;
		}
		
		private void detach_ReportSorts(ReportSort entity)
		{
			this.SendPropertyChanging();
			entity.Report = null;
		}
		
		private void Initialize()
		{
			this._ReportColumns = new EntitySet<ReportColumn>(new Action<ReportColumn>(this.attach_ReportColumns), new Action<ReportColumn>(this.detach_ReportColumns));
			this._ReportFilters = new EntitySet<ReportFilter>(new Action<ReportFilter>(this.attach_ReportFilters), new Action<ReportFilter>(this.detach_ReportFilters));
			this._ReportSorts = new EntitySet<ReportSort>(new Action<ReportSort>(this.attach_ReportSorts), new Action<ReportSort>(this.detach_ReportSorts));
			this._ReportTablesSchema = default(EntityRef<ReportTablesSchema>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.ReportSort")]
	[DataContract()]
	public partial class ReportSort : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<bool> _Ascending;
		
		private int _ReportId;
		
		private int _ReportTablesSchemaId;
		
		private int _ReportColumnsSchemaId;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Report> _Report;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<ReportColumnsSchema> _ReportColumnsSchema;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAscendingChanging(System.Nullable<bool> value);
    partial void OnAscendingChanged();
    partial void OnReportIdChanging(int value);
    partial void OnReportIdChanged();
    partial void OnReportTablesSchemaIdChanging(int value);
    partial void OnReportTablesSchemaIdChanged();
    partial void OnReportColumnsSchemaIdChanging(int value);
    partial void OnReportColumnsSchemaIdChanged();
    #endregion
		
		public ReportSort()
		{
			this.Initialize();
		}
		
		[Column(Storage="_Ascending", DbType="Bit")]
		[DataMember(Order=1)]
		public System.Nullable<bool> Ascending
		{
			get
			{
				return this._Ascending;
			}
			set
			{
				if ((this._Ascending != value))
				{
					this.OnAscendingChanging(value);
					this.SendPropertyChanging();
					this._Ascending = value;
					this.SendPropertyChanged("Ascending");
					this.OnAscendingChanged();
				}
			}
		}
		
		[Column(Storage="_ReportId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=2)]
		public int ReportId
		{
			get
			{
				return this._ReportId;
			}
			set
			{
				if ((this._ReportId != value))
				{
					if (this._Report.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReportIdChanging(value);
					this.SendPropertyChanging();
					this._ReportId = value;
					this.SendPropertyChanged("ReportId");
					this.OnReportIdChanged();
				}
			}
		}
		
		[Column(Storage="_ReportTablesSchemaId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=3)]
		public int ReportTablesSchemaId
		{
			get
			{
				return this._ReportTablesSchemaId;
			}
			set
			{
				if ((this._ReportTablesSchemaId != value))
				{
					if (this._ReportColumnsSchema.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReportTablesSchemaIdChanging(value);
					this.SendPropertyChanging();
					this._ReportTablesSchemaId = value;
					this.SendPropertyChanged("ReportTablesSchemaId");
					this.OnReportTablesSchemaIdChanged();
				}
			}
		}
		
		[Column(Storage="_ReportColumnsSchemaId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=4)]
		public int ReportColumnsSchemaId
		{
			get
			{
				return this._ReportColumnsSchemaId;
			}
			set
			{
				if ((this._ReportColumnsSchemaId != value))
				{
					if (this._ReportColumnsSchema.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReportColumnsSchemaIdChanging(value);
					this.SendPropertyChanging();
					this._ReportColumnsSchemaId = value;
					this.SendPropertyChanged("ReportColumnsSchemaId");
					this.OnReportColumnsSchemaIdChanged();
				}
			}
		}
		
		[Association(Name="Report_ReportSort", Storage="_Report", ThisKey="ReportId", OtherKey="ReportId", IsForeignKey=true)]
		public Report Report
		{
			get
			{
				return this._Report.Entity;
			}
			set
			{
				Report previousValue = this._Report.Entity;
				if (((previousValue != value) 
							|| (this._Report.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Report.Entity = null;
						previousValue.ReportSorts.Remove(this);
					}
					this._Report.Entity = value;
					if ((value != null))
					{
						value.ReportSorts.Add(this);
						this._ReportId = value.ReportId;
					}
					else
					{
						this._ReportId = default(int);
					}
					this.SendPropertyChanged("Report");
				}
			}
		}
		
		[Association(Name="ReportColumnsSchema_ReportSort", Storage="_ReportColumnsSchema", ThisKey="ReportColumnsSchemaId,ReportTablesSchemaId", OtherKey="ReportColumnsSchemaId,ReportTablesSchemaId", IsForeignKey=true)]
		public ReportColumnsSchema ReportColumnsSchema
		{
			get
			{
				return this._ReportColumnsSchema.Entity;
			}
			set
			{
				ReportColumnsSchema previousValue = this._ReportColumnsSchema.Entity;
				if (((previousValue != value) 
							|| (this._ReportColumnsSchema.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReportColumnsSchema.Entity = null;
						previousValue.ReportSorts.Remove(this);
					}
					this._ReportColumnsSchema.Entity = value;
					if ((value != null))
					{
						value.ReportSorts.Add(this);
						this._ReportColumnsSchemaId = value.ReportColumnsSchemaId;
						this._ReportTablesSchemaId = value.ReportTablesSchemaId;
					}
					else
					{
						this._ReportColumnsSchemaId = default(int);
						this._ReportTablesSchemaId = default(int);
					}
					this.SendPropertyChanged("ReportColumnsSchema");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Report = default(EntityRef<Report>);
			this._ReportColumnsSchema = default(EntityRef<ReportColumnsSchema>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.ReportTablesSchema")]
	[DataContract()]
	public partial class ReportTablesSchema : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReportTablesSchemaId;
		
		private string _Name;
		
		private string _SqlText;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<ReportColumnsSchema> _ReportColumnsSchemas;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Report> _Reports;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReportTablesSchemaIdChanging(int value);
    partial void OnReportTablesSchemaIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSqlTextChanging(string value);
    partial void OnSqlTextChanged();
    #endregion
		
		public ReportTablesSchema()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ReportTablesSchemaId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int ReportTablesSchemaId
		{
			get
			{
				return this._ReportTablesSchemaId;
			}
			set
			{
				if ((this._ReportTablesSchemaId != value))
				{
					this.OnReportTablesSchemaIdChanging(value);
					this.SendPropertyChanging();
					this._ReportTablesSchemaId = value;
					this.SendPropertyChanged("ReportTablesSchemaId");
					this.OnReportTablesSchemaIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(1024) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_SqlText", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=3)]
		public string SqlText
		{
			get
			{
				return this._SqlText;
			}
			set
			{
				if ((this._SqlText != value))
				{
					this.OnSqlTextChanging(value);
					this.SendPropertyChanging();
					this._SqlText = value;
					this.SendPropertyChanged("SqlText");
					this.OnSqlTextChanged();
				}
			}
		}
		
		[Association(Name="ReportTablesSchema_ReportColumnsSchema", Storage="_ReportColumnsSchemas", ThisKey="ReportTablesSchemaId", OtherKey="ReportTablesSchemaId")]
		[DataMember(Order=4, EmitDefaultValue=false)]
		public EntitySet<ReportColumnsSchema> ReportColumnsSchemas
		{
			get
			{
				if ((this.serializing 
							&& (this._ReportColumnsSchemas.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ReportColumnsSchemas;
			}
			set
			{
				this._ReportColumnsSchemas.Assign(value);
			}
		}
		
		[Association(Name="ReportTablesSchema_Report", Storage="_Reports", ThisKey="ReportTablesSchemaId", OtherKey="ReportTablesSchemaId")]
		[DataMember(Order=5, EmitDefaultValue=false)]
		public EntitySet<Report> Reports
		{
			get
			{
				if ((this.serializing 
							&& (this._Reports.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Reports;
			}
			set
			{
				this._Reports.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ReportColumnsSchemas(ReportColumnsSchema entity)
		{
			this.SendPropertyChanging();
			entity.ReportTablesSchema = this;
		}
		
		private void detach_ReportColumnsSchemas(ReportColumnsSchema entity)
		{
			this.SendPropertyChanging();
			entity.ReportTablesSchema = null;
		}
		
		private void attach_Reports(Report entity)
		{
			this.SendPropertyChanging();
			entity.ReportTablesSchema = this;
		}
		
		private void detach_Reports(Report entity)
		{
			this.SendPropertyChanging();
			entity.ReportTablesSchema = null;
		}
		
		private void Initialize()
		{
			this._ReportColumnsSchemas = new EntitySet<ReportColumnsSchema>(new Action<ReportColumnsSchema>(this.attach_ReportColumnsSchemas), new Action<ReportColumnsSchema>(this.detach_ReportColumnsSchemas));
			this._Reports = new EntitySet<Report>(new Action<Report>(this.attach_Reports), new Action<Report>(this.detach_Reports));
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.Representant")]
	[DataContract()]
	public partial class Representant : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CompanyId;
		
		private int _RepresentantId;
		
		private System.Nullable<int> _ProfileId;
		
		private System.Nullable<int> _LegalEntityProfileId;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private System.Nullable<int> _BankId;
		
		private string _Agency;
		
		private string _AccountNumber;
		
		private System.Nullable<int> _Rating;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Contract> _Contracts;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Customer> _Customers;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<CustomerCall> _CustomerCalls;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<RepresentantUser> _RepresentantUsers;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<ServiceOrderBook> _ServiceOrderBooks;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Profile> _Profile;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<LegalEntityProfile> _LegalEntityProfile;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Company> _Company;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnRepresentantIdChanging(int value);
    partial void OnRepresentantIdChanged();
    partial void OnProfileIdChanging(System.Nullable<int> value);
    partial void OnProfileIdChanged();
    partial void OnLegalEntityProfileIdChanging(System.Nullable<int> value);
    partial void OnLegalEntityProfileIdChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    partial void OnBankIdChanging(System.Nullable<int> value);
    partial void OnBankIdChanged();
    partial void OnAgencyChanging(string value);
    partial void OnAgencyChanged();
    partial void OnAccountNumberChanging(string value);
    partial void OnAccountNumberChanged();
    partial void OnRatingChanging(System.Nullable<int> value);
    partial void OnRatingChanged();
    #endregion
		
		public Representant()
		{
			this.Initialize();
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=1)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Column(Storage="_RepresentantId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=2)]
		public int RepresentantId
		{
			get
			{
				return this._RepresentantId;
			}
			set
			{
				if ((this._RepresentantId != value))
				{
					this.OnRepresentantIdChanging(value);
					this.SendPropertyChanging();
					this._RepresentantId = value;
					this.SendPropertyChanged("RepresentantId");
					this.OnRepresentantIdChanged();
				}
			}
		}
		
		[Column(Storage="_ProfileId", DbType="Int")]
		[DataMember(Order=3)]
		public System.Nullable<int> ProfileId
		{
			get
			{
				return this._ProfileId;
			}
			set
			{
				if ((this._ProfileId != value))
				{
					if (this._Profile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProfileIdChanging(value);
					this.SendPropertyChanging();
					this._ProfileId = value;
					this.SendPropertyChanged("ProfileId");
					this.OnProfileIdChanged();
				}
			}
		}
		
		[Column(Storage="_LegalEntityProfileId", DbType="Int")]
		[DataMember(Order=4)]
		public System.Nullable<int> LegalEntityProfileId
		{
			get
			{
				return this._LegalEntityProfileId;
			}
			set
			{
				if ((this._LegalEntityProfileId != value))
				{
					if (this._LegalEntityProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLegalEntityProfileIdChanging(value);
					this.SendPropertyChanging();
					this._LegalEntityProfileId = value;
					this.SendPropertyChanged("LegalEntityProfileId");
					this.OnLegalEntityProfileIdChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime")]
		[DataMember(Order=5)]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_BankId", DbType="Int")]
		[DataMember(Order=6)]
		public System.Nullable<int> BankId
		{
			get
			{
				return this._BankId;
			}
			set
			{
				if ((this._BankId != value))
				{
					this.OnBankIdChanging(value);
					this.SendPropertyChanging();
					this._BankId = value;
					this.SendPropertyChanged("BankId");
					this.OnBankIdChanged();
				}
			}
		}
		
		[Column(Storage="_Agency", DbType="VarChar(10)")]
		[DataMember(Order=7)]
		public string Agency
		{
			get
			{
				return this._Agency;
			}
			set
			{
				if ((this._Agency != value))
				{
					this.OnAgencyChanging(value);
					this.SendPropertyChanging();
					this._Agency = value;
					this.SendPropertyChanged("Agency");
					this.OnAgencyChanged();
				}
			}
		}
		
		[Column(Storage="_AccountNumber", DbType="VarChar(10)")]
		[DataMember(Order=8)]
		public string AccountNumber
		{
			get
			{
				return this._AccountNumber;
			}
			set
			{
				if ((this._AccountNumber != value))
				{
					this.OnAccountNumberChanging(value);
					this.SendPropertyChanging();
					this._AccountNumber = value;
					this.SendPropertyChanged("AccountNumber");
					this.OnAccountNumberChanged();
				}
			}
		}
		
		[Column(Storage="_Rating", DbType="Int")]
		[DataMember(Order=9)]
		public System.Nullable<int> Rating
		{
			get
			{
				return this._Rating;
			}
			set
			{
				if ((this._Rating != value))
				{
					this.OnRatingChanging(value);
					this.SendPropertyChanging();
					this._Rating = value;
					this.SendPropertyChanged("Rating");
					this.OnRatingChanged();
				}
			}
		}
		
		[Association(Name="Representant_Contract", Storage="_Contracts", ThisKey="RepresentantId,CompanyId", OtherKey="RepresentantId,CompanyId")]
		[DataMember(Order=10, EmitDefaultValue=false)]
		public EntitySet<Contract> Contracts
		{
			get
			{
				if ((this.serializing 
							&& (this._Contracts.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Contracts;
			}
			set
			{
				this._Contracts.Assign(value);
			}
		}
		
		[Association(Name="Representant_Customer", Storage="_Customers", ThisKey="RepresentantId,CompanyId", OtherKey="RepresentantId,CompanyId")]
		[DataMember(Order=11, EmitDefaultValue=false)]
		public EntitySet<Customer> Customers
		{
			get
			{
				if ((this.serializing 
							&& (this._Customers.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Customers;
			}
			set
			{
				this._Customers.Assign(value);
			}
		}
		
		[Association(Name="Representant_CustomerCall", Storage="_CustomerCalls", ThisKey="CompanyId,RepresentantId", OtherKey="CompanyId,RepresentantId")]
		[DataMember(Order=12, EmitDefaultValue=false)]
		public EntitySet<CustomerCall> CustomerCalls
		{
			get
			{
				if ((this.serializing 
							&& (this._CustomerCalls.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._CustomerCalls;
			}
			set
			{
				this._CustomerCalls.Assign(value);
			}
		}
		
		[Association(Name="Representant_RepresentantUser", Storage="_RepresentantUsers", ThisKey="RepresentantId,CompanyId", OtherKey="RepresentantId,CompanyId")]
		[DataMember(Order=13, EmitDefaultValue=false)]
		public EntitySet<RepresentantUser> RepresentantUsers
		{
			get
			{
				if ((this.serializing 
							&& (this._RepresentantUsers.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._RepresentantUsers;
			}
			set
			{
				this._RepresentantUsers.Assign(value);
			}
		}
		
		[Association(Name="Representant_ServiceOrderBook", Storage="_ServiceOrderBooks", ThisKey="RepresentantId,CompanyId", OtherKey="RepresentantId,CompanyId")]
		[DataMember(Order=14, EmitDefaultValue=false)]
		public EntitySet<ServiceOrderBook> ServiceOrderBooks
		{
			get
			{
				if ((this.serializing 
							&& (this._ServiceOrderBooks.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ServiceOrderBooks;
			}
			set
			{
				this._ServiceOrderBooks.Assign(value);
			}
		}
		
		[Association(Name="Profile_Representant", Storage="_Profile", ThisKey="ProfileId", OtherKey="ProfileId", IsForeignKey=true)]
		public Profile Profile
		{
			get
			{
				return this._Profile.Entity;
			}
			set
			{
				Profile previousValue = this._Profile.Entity;
				if (((previousValue != value) 
							|| (this._Profile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Profile.Entity = null;
						previousValue.Representants.Remove(this);
					}
					this._Profile.Entity = value;
					if ((value != null))
					{
						value.Representants.Add(this);
						this._ProfileId = value.ProfileId;
					}
					else
					{
						this._ProfileId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Profile");
				}
			}
		}
		
		[Association(Name="LegalEntityProfile_Representant", Storage="_LegalEntityProfile", ThisKey="LegalEntityProfileId", OtherKey="LegalEntityProfileId", IsForeignKey=true)]
		public LegalEntityProfile LegalEntityProfile
		{
			get
			{
				return this._LegalEntityProfile.Entity;
			}
			set
			{
				LegalEntityProfile previousValue = this._LegalEntityProfile.Entity;
				if (((previousValue != value) 
							|| (this._LegalEntityProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LegalEntityProfile.Entity = null;
						previousValue.Representants.Remove(this);
					}
					this._LegalEntityProfile.Entity = value;
					if ((value != null))
					{
						value.Representants.Add(this);
						this._LegalEntityProfileId = value.LegalEntityProfileId;
					}
					else
					{
						this._LegalEntityProfileId = default(Nullable<int>);
					}
					this.SendPropertyChanged("LegalEntityProfile");
				}
			}
		}
		
		[Association(Name="Company_Representant", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Representants.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Representants.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Contracts(Contract entity)
		{
			this.SendPropertyChanging();
			entity.Representant = this;
		}
		
		private void detach_Contracts(Contract entity)
		{
			this.SendPropertyChanging();
			entity.Representant = null;
		}
		
		private void attach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.Representant = this;
		}
		
		private void detach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.Representant = null;
		}
		
		private void attach_CustomerCalls(CustomerCall entity)
		{
			this.SendPropertyChanging();
			entity.Representant = this;
		}
		
		private void detach_CustomerCalls(CustomerCall entity)
		{
			this.SendPropertyChanging();
			entity.Representant = null;
		}
		
		private void attach_RepresentantUsers(RepresentantUser entity)
		{
			this.SendPropertyChanging();
			entity.Representant = this;
		}
		
		private void detach_RepresentantUsers(RepresentantUser entity)
		{
			this.SendPropertyChanging();
			entity.Representant = null;
		}
		
		private void attach_ServiceOrderBooks(ServiceOrderBook entity)
		{
			this.SendPropertyChanging();
			entity.Representant = this;
		}
		
		private void detach_ServiceOrderBooks(ServiceOrderBook entity)
		{
			this.SendPropertyChanging();
			entity.Representant = null;
		}
		
		private void Initialize()
		{
			this._Contracts = new EntitySet<Contract>(new Action<Contract>(this.attach_Contracts), new Action<Contract>(this.detach_Contracts));
			this._Customers = new EntitySet<Customer>(new Action<Customer>(this.attach_Customers), new Action<Customer>(this.detach_Customers));
			this._CustomerCalls = new EntitySet<CustomerCall>(new Action<CustomerCall>(this.attach_CustomerCalls), new Action<CustomerCall>(this.detach_CustomerCalls));
			this._RepresentantUsers = new EntitySet<RepresentantUser>(new Action<RepresentantUser>(this.attach_RepresentantUsers), new Action<RepresentantUser>(this.detach_RepresentantUsers));
			this._ServiceOrderBooks = new EntitySet<ServiceOrderBook>(new Action<ServiceOrderBook>(this.attach_ServiceOrderBooks), new Action<ServiceOrderBook>(this.detach_ServiceOrderBooks));
			this._Profile = default(EntityRef<Profile>);
			this._LegalEntityProfile = default(EntityRef<LegalEntityProfile>);
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.RepresentantUser")]
	[DataContract()]
	public partial class RepresentantUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CompanyId;
		
		private int _RepresentantId;
		
		private int _UserId;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Representant> _Representant;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnRepresentantIdChanging(int value);
    partial void OnRepresentantIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    #endregion
		
		public RepresentantUser()
		{
			this.Initialize();
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=1)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Representant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Column(Storage="_RepresentantId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=2)]
		public int RepresentantId
		{
			get
			{
				return this._RepresentantId;
			}
			set
			{
				if ((this._RepresentantId != value))
				{
					if (this._Representant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRepresentantIdChanging(value);
					this.SendPropertyChanging();
					this._RepresentantId = value;
					this.SendPropertyChanged("RepresentantId");
					this.OnRepresentantIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=3)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Association(Name="Representant_RepresentantUser", Storage="_Representant", ThisKey="RepresentantId,CompanyId", OtherKey="RepresentantId,CompanyId", IsForeignKey=true)]
		public Representant Representant
		{
			get
			{
				return this._Representant.Entity;
			}
			set
			{
				Representant previousValue = this._Representant.Entity;
				if (((previousValue != value) 
							|| (this._Representant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Representant.Entity = null;
						previousValue.RepresentantUsers.Remove(this);
					}
					this._Representant.Entity = value;
					if ((value != null))
					{
						value.RepresentantUsers.Add(this);
						this._RepresentantId = value.RepresentantId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._RepresentantId = default(int);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Representant");
				}
			}
		}
		
		[Association(Name="User_RepresentantUser", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.RepresentantUsers.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.RepresentantUsers.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Representant = default(EntityRef<Representant>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.Roles")]
	[DataContract()]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CompanyId;
		
		private int _RoleId;
		
		private System.Nullable<int> _ParentRoleId;
		
		private int _ApplicationId;
		
		private System.DateTime _LastUpdatedDate;
		
		private string _Name;
		
		private string _Description;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Permission> _Permissions;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<UsersInRole> _UsersInRoles;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Application> _Application;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Company> _Company;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnRoleIdChanging(int value);
    partial void OnRoleIdChanged();
    partial void OnParentRoleIdChanging(System.Nullable<int> value);
    partial void OnParentRoleIdChanged();
    partial void OnApplicationIdChanging(int value);
    partial void OnApplicationIdChanged();
    partial void OnLastUpdatedDateChanging(System.DateTime value);
    partial void OnLastUpdatedDateChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Role()
		{
			this.Initialize();
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=1)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Column(Storage="_RoleId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=2)]
		public int RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[Column(Storage="_ParentRoleId", DbType="Int")]
		[DataMember(Order=3)]
		public System.Nullable<int> ParentRoleId
		{
			get
			{
				return this._ParentRoleId;
			}
			set
			{
				if ((this._ParentRoleId != value))
				{
					this.OnParentRoleIdChanging(value);
					this.SendPropertyChanging();
					this._ParentRoleId = value;
					this.SendPropertyChanged("ParentRoleId");
					this.OnParentRoleIdChanged();
				}
			}
		}
		
		[Column(Storage="_ApplicationId", DbType="Int NOT NULL")]
		[DataMember(Order=4)]
		public int ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					if (this._Application.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdatedDate", DbType="DateTime NOT NULL")]
		[DataMember(Order=5)]
		public System.DateTime LastUpdatedDate
		{
			get
			{
				return this._LastUpdatedDate;
			}
			set
			{
				if ((this._LastUpdatedDate != value))
				{
					this.OnLastUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdatedDate = value;
					this.SendPropertyChanged("LastUpdatedDate");
					this.OnLastUpdatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		[DataMember(Order=6)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(512)")]
		[DataMember(Order=7)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="Role_Permission", Storage="_Permissions", ThisKey="RoleId,CompanyId", OtherKey="RoleId,CompanyId")]
		[DataMember(Order=8, EmitDefaultValue=false)]
		public EntitySet<Permission> Permissions
		{
			get
			{
				if ((this.serializing 
							&& (this._Permissions.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Permissions;
			}
			set
			{
				this._Permissions.Assign(value);
			}
		}
		
		[Association(Name="Role_UsersInRole", Storage="_UsersInRoles", ThisKey="RoleId,CompanyId", OtherKey="RoleId,CompanyId")]
		[DataMember(Order=9, EmitDefaultValue=false)]
		public EntitySet<UsersInRole> UsersInRoles
		{
			get
			{
				if ((this.serializing 
							&& (this._UsersInRoles.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._UsersInRoles;
			}
			set
			{
				this._UsersInRoles.Assign(value);
			}
		}
		
		[Association(Name="Application_Role", Storage="_Application", ThisKey="ApplicationId", OtherKey="ApplicationId", IsForeignKey=true)]
		public Application Application
		{
			get
			{
				return this._Application.Entity;
			}
			set
			{
				Application previousValue = this._Application.Entity;
				if (((previousValue != value) 
							|| (this._Application.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Application.Entity = null;
						previousValue.Roles.Remove(this);
					}
					this._Application.Entity = value;
					if ((value != null))
					{
						value.Roles.Add(this);
						this._ApplicationId = value.ApplicationId;
					}
					else
					{
						this._ApplicationId = default(int);
					}
					this.SendPropertyChanged("Application");
				}
			}
		}
		
		[Association(Name="Company_Role", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Roles.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Roles.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Permissions(Permission entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_Permissions(Permission entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
		
		private void attach_UsersInRoles(UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_UsersInRoles(UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
		
		private void Initialize()
		{
			this._Permissions = new EntitySet<Permission>(new Action<Permission>(this.attach_Permissions), new Action<Permission>(this.detach_Permissions));
			this._UsersInRoles = new EntitySet<UsersInRole>(new Action<UsersInRole>(this.attach_UsersInRoles), new Action<UsersInRole>(this.detach_UsersInRoles));
			this._Application = default(EntityRef<Application>);
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.Sale")]
	[DataContract()]
	public partial class Sale : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CompanyId;
		
		private int _SaleId;
		
		private decimal _Discount;
		
		private System.DateTime _OrderDate;
		
		private System.Nullable<System.DateTime> _ShipDate;
		
		private System.Nullable<System.DateTime> _SaleDate;
		
		private string _Comment;
		
		private System.Nullable<int> _CustomerId;
		
		private System.Nullable<int> _VendorId;
		
		private System.Nullable<int> _DepositId;
		
		private System.Nullable<int> _BudgetId;
		
		private System.Nullable<int> _ReceiptId;
		
		private string _LegalTicketNumber;
		
		private System.Nullable<int> _InvoiceId;
		
		private bool _IsCanceled;
		
		private int _SaleStatusId;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private string _CreatedByUser;
		
		private string _ModifiedByUser;
		
		private System.Nullable<decimal> _FreightValue;
		
		private string _FreightType;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<InventoryHistory> _InventoryHistories;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<SaleItem> _SaleItems;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Customer> _Customer;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Deposit> _Deposit;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Budget> _Budget;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Employee> _Employee;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Invoice> _Invoice;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Receipt> _Receipt;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Company> _Company;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<SaleStatus> _SaleStatus;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnSaleIdChanging(int value);
    partial void OnSaleIdChanged();
    partial void OnDiscountChanging(decimal value);
    partial void OnDiscountChanged();
    partial void OnOrderDateChanging(System.DateTime value);
    partial void OnOrderDateChanged();
    partial void OnShipDateChanging(System.Nullable<System.DateTime> value);
    partial void OnShipDateChanged();
    partial void OnSaleDateChanging(System.Nullable<System.DateTime> value);
    partial void OnSaleDateChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnCustomerIdChanging(System.Nullable<int> value);
    partial void OnCustomerIdChanged();
    partial void OnVendorIdChanging(System.Nullable<int> value);
    partial void OnVendorIdChanged();
    partial void OnDepositIdChanging(System.Nullable<int> value);
    partial void OnDepositIdChanged();
    partial void OnBudgetIdChanging(System.Nullable<int> value);
    partial void OnBudgetIdChanged();
    partial void OnReceiptIdChanging(System.Nullable<int> value);
    partial void OnReceiptIdChanged();
    partial void OnLegalTicketNumberChanging(string value);
    partial void OnLegalTicketNumberChanged();
    partial void OnInvoiceIdChanging(System.Nullable<int> value);
    partial void OnInvoiceIdChanged();
    partial void OnIsCanceledChanging(bool value);
    partial void OnIsCanceledChanged();
    partial void OnSaleStatusIdChanging(int value);
    partial void OnSaleStatusIdChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    partial void OnCreatedByUserChanging(string value);
    partial void OnCreatedByUserChanged();
    partial void OnModifiedByUserChanging(string value);
    partial void OnModifiedByUserChanged();
    partial void OnFreightValueChanging(System.Nullable<decimal> value);
    partial void OnFreightValueChanged();
    partial void OnFreightTypeChanging(string value);
    partial void OnFreightTypeChanged();
    #endregion
		
		public Sale()
		{
			this.Initialize();
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=1)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Deposit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Column(Storage="_SaleId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=2)]
		public int SaleId
		{
			get
			{
				return this._SaleId;
			}
			set
			{
				if ((this._SaleId != value))
				{
					this.OnSaleIdChanging(value);
					this.SendPropertyChanging();
					this._SaleId = value;
					this.SendPropertyChanged("SaleId");
					this.OnSaleIdChanged();
				}
			}
		}
		
		[Column(Storage="_Discount", DbType="Decimal(18,2) NOT NULL")]
		[DataMember(Order=3)]
		public decimal Discount
		{
			get
			{
				return this._Discount;
			}
			set
			{
				if ((this._Discount != value))
				{
					this.OnDiscountChanging(value);
					this.SendPropertyChanging();
					this._Discount = value;
					this.SendPropertyChanged("Discount");
					this.OnDiscountChanged();
				}
			}
		}
		
		[Column(Storage="_OrderDate", DbType="DateTime NOT NULL")]
		[DataMember(Order=4)]
		public System.DateTime OrderDate
		{
			get
			{
				return this._OrderDate;
			}
			set
			{
				if ((this._OrderDate != value))
				{
					this.OnOrderDateChanging(value);
					this.SendPropertyChanging();
					this._OrderDate = value;
					this.SendPropertyChanged("OrderDate");
					this.OnOrderDateChanged();
				}
			}
		}
		
		[Column(Storage="_ShipDate", DbType="DateTime")]
		[DataMember(Order=5)]
		public System.Nullable<System.DateTime> ShipDate
		{
			get
			{
				return this._ShipDate;
			}
			set
			{
				if ((this._ShipDate != value))
				{
					this.OnShipDateChanging(value);
					this.SendPropertyChanging();
					this._ShipDate = value;
					this.SendPropertyChanged("ShipDate");
					this.OnShipDateChanged();
				}
			}
		}
		
		[Column(Storage="_SaleDate", DbType="DateTime")]
		[DataMember(Order=6)]
		public System.Nullable<System.DateTime> SaleDate
		{
			get
			{
				return this._SaleDate;
			}
			set
			{
				if ((this._SaleDate != value))
				{
					this.OnSaleDateChanging(value);
					this.SendPropertyChanging();
					this._SaleDate = value;
					this.SendPropertyChanged("SaleDate");
					this.OnSaleDateChanged();
				}
			}
		}
		
		[Column(Storage="_Comment", DbType="VarChar(300)")]
		[DataMember(Order=7)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[Column(Storage="_CustomerId", DbType="Int")]
		[DataMember(Order=8)]
		public System.Nullable<int> CustomerId
		{
			get
			{
				return this._CustomerId;
			}
			set
			{
				if ((this._CustomerId != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerId = value;
					this.SendPropertyChanged("CustomerId");
					this.OnCustomerIdChanged();
				}
			}
		}
		
		[Column(Storage="_VendorId", DbType="Int")]
		[DataMember(Order=9)]
		public System.Nullable<int> VendorId
		{
			get
			{
				return this._VendorId;
			}
			set
			{
				if ((this._VendorId != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVendorIdChanging(value);
					this.SendPropertyChanging();
					this._VendorId = value;
					this.SendPropertyChanged("VendorId");
					this.OnVendorIdChanged();
				}
			}
		}
		
		[Column(Storage="_DepositId", DbType="Int")]
		[DataMember(Order=10)]
		public System.Nullable<int> DepositId
		{
			get
			{
				return this._DepositId;
			}
			set
			{
				if ((this._DepositId != value))
				{
					if (this._Deposit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepositIdChanging(value);
					this.SendPropertyChanging();
					this._DepositId = value;
					this.SendPropertyChanged("DepositId");
					this.OnDepositIdChanged();
				}
			}
		}
		
		[Column(Storage="_BudgetId", DbType="Int")]
		[DataMember(Order=11)]
		public System.Nullable<int> BudgetId
		{
			get
			{
				return this._BudgetId;
			}
			set
			{
				if ((this._BudgetId != value))
				{
					if (this._Budget.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBudgetIdChanging(value);
					this.SendPropertyChanging();
					this._BudgetId = value;
					this.SendPropertyChanged("BudgetId");
					this.OnBudgetIdChanged();
				}
			}
		}
		
		[Column(Storage="_ReceiptId", DbType="Int")]
		[DataMember(Order=12)]
		public System.Nullable<int> ReceiptId
		{
			get
			{
				return this._ReceiptId;
			}
			set
			{
				if ((this._ReceiptId != value))
				{
					if (this._Receipt.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReceiptIdChanging(value);
					this.SendPropertyChanging();
					this._ReceiptId = value;
					this.SendPropertyChanged("ReceiptId");
					this.OnReceiptIdChanged();
				}
			}
		}
		
		[Column(Storage="_LegalTicketNumber", DbType="VarChar(50)")]
		[DataMember(Order=13)]
		public string LegalTicketNumber
		{
			get
			{
				return this._LegalTicketNumber;
			}
			set
			{
				if ((this._LegalTicketNumber != value))
				{
					this.OnLegalTicketNumberChanging(value);
					this.SendPropertyChanging();
					this._LegalTicketNumber = value;
					this.SendPropertyChanged("LegalTicketNumber");
					this.OnLegalTicketNumberChanged();
				}
			}
		}
		
		[Column(Storage="_InvoiceId", DbType="Int")]
		[DataMember(Order=14)]
		public System.Nullable<int> InvoiceId
		{
			get
			{
				return this._InvoiceId;
			}
			set
			{
				if ((this._InvoiceId != value))
				{
					if (this._Invoice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInvoiceIdChanging(value);
					this.SendPropertyChanging();
					this._InvoiceId = value;
					this.SendPropertyChanged("InvoiceId");
					this.OnInvoiceIdChanged();
				}
			}
		}
		
		[Column(Storage="_IsCanceled", DbType="Bit NOT NULL")]
		[DataMember(Order=15)]
		public bool IsCanceled
		{
			get
			{
				return this._IsCanceled;
			}
			set
			{
				if ((this._IsCanceled != value))
				{
					this.OnIsCanceledChanging(value);
					this.SendPropertyChanging();
					this._IsCanceled = value;
					this.SendPropertyChanged("IsCanceled");
					this.OnIsCanceledChanged();
				}
			}
		}
		
		[Column(Storage="_SaleStatusId", DbType="Int NOT NULL")]
		[DataMember(Order=16)]
		public int SaleStatusId
		{
			get
			{
				return this._SaleStatusId;
			}
			set
			{
				if ((this._SaleStatusId != value))
				{
					if (this._SaleStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSaleStatusIdChanging(value);
					this.SendPropertyChanging();
					this._SaleStatusId = value;
					this.SendPropertyChanged("SaleStatusId");
					this.OnSaleStatusIdChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime")]
		[DataMember(Order=17)]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime")]
		[DataMember(Order=18)]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedByUser", DbType="VarChar(50)")]
		[DataMember(Order=19)]
		public string CreatedByUser
		{
			get
			{
				return this._CreatedByUser;
			}
			set
			{
				if ((this._CreatedByUser != value))
				{
					this.OnCreatedByUserChanging(value);
					this.SendPropertyChanging();
					this._CreatedByUser = value;
					this.SendPropertyChanged("CreatedByUser");
					this.OnCreatedByUserChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedByUser", DbType="VarChar(50)")]
		[DataMember(Order=20)]
		public string ModifiedByUser
		{
			get
			{
				return this._ModifiedByUser;
			}
			set
			{
				if ((this._ModifiedByUser != value))
				{
					this.OnModifiedByUserChanging(value);
					this.SendPropertyChanging();
					this._ModifiedByUser = value;
					this.SendPropertyChanged("ModifiedByUser");
					this.OnModifiedByUserChanged();
				}
			}
		}
		
		[Column(Storage="_FreightValue", DbType="Decimal(18,2)")]
		[DataMember(Order=21)]
		public System.Nullable<decimal> FreightValue
		{
			get
			{
				return this._FreightValue;
			}
			set
			{
				if ((this._FreightValue != value))
				{
					this.OnFreightValueChanging(value);
					this.SendPropertyChanging();
					this._FreightValue = value;
					this.SendPropertyChanged("FreightValue");
					this.OnFreightValueChanged();
				}
			}
		}
		
		[Column(Storage="_FreightType", DbType="VarChar(50)")]
		[DataMember(Order=22)]
		public string FreightType
		{
			get
			{
				return this._FreightType;
			}
			set
			{
				if ((this._FreightType != value))
				{
					this.OnFreightTypeChanging(value);
					this.SendPropertyChanging();
					this._FreightType = value;
					this.SendPropertyChanged("FreightType");
					this.OnFreightTypeChanged();
				}
			}
		}
		
		[Association(Name="Sale_InventoryHistory", Storage="_InventoryHistories", ThisKey="SaleId,CompanyId", OtherKey="SaleId,CompanyId")]
		[DataMember(Order=23, EmitDefaultValue=false)]
		public EntitySet<InventoryHistory> InventoryHistories
		{
			get
			{
				if ((this.serializing 
							&& (this._InventoryHistories.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._InventoryHistories;
			}
			set
			{
				this._InventoryHistories.Assign(value);
			}
		}
		
		[Association(Name="Sale_SaleItem", Storage="_SaleItems", ThisKey="SaleId,CompanyId", OtherKey="SaleId,CompanyId")]
		[DataMember(Order=24, EmitDefaultValue=false)]
		public EntitySet<SaleItem> SaleItems
		{
			get
			{
				if ((this.serializing 
							&& (this._SaleItems.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._SaleItems;
			}
			set
			{
				this._SaleItems.Assign(value);
			}
		}
		
		[Association(Name="Customer_Sale", Storage="_Customer", ThisKey="CustomerId", OtherKey="CustomerId", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Sales.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Sales.Add(this);
						this._CustomerId = value.CustomerId;
					}
					else
					{
						this._CustomerId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[Association(Name="Deposit_Sale", Storage="_Deposit", ThisKey="DepositId,CompanyId", OtherKey="DepositId,CompanyId", IsForeignKey=true)]
		public Deposit Deposit
		{
			get
			{
				return this._Deposit.Entity;
			}
			set
			{
				Deposit previousValue = this._Deposit.Entity;
				if (((previousValue != value) 
							|| (this._Deposit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Deposit.Entity = null;
						previousValue.Sales.Remove(this);
					}
					this._Deposit.Entity = value;
					if ((value != null))
					{
						value.Sales.Add(this);
						this._DepositId = value.DepositId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._DepositId = default(Nullable<int>);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Deposit");
				}
			}
		}
		
		[Association(Name="Budget_Sale", Storage="_Budget", ThisKey="BudgetId", OtherKey="BudgetId", IsForeignKey=true)]
		public Budget Budget
		{
			get
			{
				return this._Budget.Entity;
			}
			set
			{
				Budget previousValue = this._Budget.Entity;
				if (((previousValue != value) 
							|| (this._Budget.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Budget.Entity = null;
						previousValue.Sales.Remove(this);
					}
					this._Budget.Entity = value;
					if ((value != null))
					{
						value.Sales.Add(this);
						this._BudgetId = value.BudgetId;
					}
					else
					{
						this._BudgetId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Budget");
				}
			}
		}
		
		[Association(Name="Employee_Sale", Storage="_Employee", ThisKey="VendorId,CompanyId", OtherKey="EmployeeId,CompanyId", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Sales.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Sales.Add(this);
						this._VendorId = value.EmployeeId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._VendorId = default(Nullable<int>);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[Association(Name="Invoice_Sale", Storage="_Invoice", ThisKey="InvoiceId,CompanyId", OtherKey="InvoiceId,CompanyId", IsForeignKey=true)]
		public Invoice Invoice
		{
			get
			{
				return this._Invoice.Entity;
			}
			set
			{
				Invoice previousValue = this._Invoice.Entity;
				if (((previousValue != value) 
							|| (this._Invoice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Invoice.Entity = null;
						previousValue.Sales.Remove(this);
					}
					this._Invoice.Entity = value;
					if ((value != null))
					{
						value.Sales.Add(this);
						this._InvoiceId = value.InvoiceId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._InvoiceId = default(Nullable<int>);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Invoice");
				}
			}
		}
		
		[Association(Name="Receipt_Sale", Storage="_Receipt", ThisKey="ReceiptId,CompanyId", OtherKey="ReceiptId,CompanyId", IsForeignKey=true)]
		public Receipt Receipt
		{
			get
			{
				return this._Receipt.Entity;
			}
			set
			{
				Receipt previousValue = this._Receipt.Entity;
				if (((previousValue != value) 
							|| (this._Receipt.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Receipt.Entity = null;
						previousValue.Sales.Remove(this);
					}
					this._Receipt.Entity = value;
					if ((value != null))
					{
						value.Sales.Add(this);
						this._ReceiptId = value.ReceiptId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._ReceiptId = default(Nullable<int>);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Receipt");
				}
			}
		}
		
		[Association(Name="Company_Sale", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Sales.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Sales.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[Association(Name="SaleStatus_Sale", Storage="_SaleStatus", ThisKey="SaleStatusId", OtherKey="SaleStatusId", IsForeignKey=true)]
		public SaleStatus SaleStatus
		{
			get
			{
				return this._SaleStatus.Entity;
			}
			set
			{
				SaleStatus previousValue = this._SaleStatus.Entity;
				if (((previousValue != value) 
							|| (this._SaleStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SaleStatus.Entity = null;
						previousValue.Sales.Remove(this);
					}
					this._SaleStatus.Entity = value;
					if ((value != null))
					{
						value.Sales.Add(this);
						this._SaleStatusId = value.SaleStatusId;
					}
					else
					{
						this._SaleStatusId = default(int);
					}
					this.SendPropertyChanged("SaleStatus");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InventoryHistories(InventoryHistory entity)
		{
			this.SendPropertyChanging();
			entity.Sale = this;
		}
		
		private void detach_InventoryHistories(InventoryHistory entity)
		{
			this.SendPropertyChanging();
			entity.Sale = null;
		}
		
		private void attach_SaleItems(SaleItem entity)
		{
			this.SendPropertyChanging();
			entity.Sale = this;
		}
		
		private void detach_SaleItems(SaleItem entity)
		{
			this.SendPropertyChanging();
			entity.Sale = null;
		}
		
		private void Initialize()
		{
			this._InventoryHistories = new EntitySet<InventoryHistory>(new Action<InventoryHistory>(this.attach_InventoryHistories), new Action<InventoryHistory>(this.detach_InventoryHistories));
			this._SaleItems = new EntitySet<SaleItem>(new Action<SaleItem>(this.attach_SaleItems), new Action<SaleItem>(this.detach_SaleItems));
			this._Customer = default(EntityRef<Customer>);
			this._Deposit = default(EntityRef<Deposit>);
			this._Budget = default(EntityRef<Budget>);
			this._Employee = default(EntityRef<Employee>);
			this._Invoice = default(EntityRef<Invoice>);
			this._Receipt = default(EntityRef<Receipt>);
			this._Company = default(EntityRef<Company>);
			this._SaleStatus = default(EntityRef<SaleStatus>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.SaleItem")]
	[DataContract()]
	public partial class SaleItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SaleItemsId;
		
		private int _SaleId;
		
		private int _Quantity;
		
		private System.Nullable<decimal> _UnitCost;
		
		private decimal _UnitPrice;
		
		private string _Observation;
		
		private System.DateTime _ModifiedDate;
		
		private System.Nullable<int> _ProductId;
		
		private string _SerialNumber;
		
		private string _SpecialProductName;
		
		private int _CompanyId;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Sale> _Sale;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSaleItemsIdChanging(int value);
    partial void OnSaleItemsIdChanged();
    partial void OnSaleIdChanging(int value);
    partial void OnSaleIdChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnUnitCostChanging(System.Nullable<decimal> value);
    partial void OnUnitCostChanged();
    partial void OnUnitPriceChanging(decimal value);
    partial void OnUnitPriceChanged();
    partial void OnObservationChanging(string value);
    partial void OnObservationChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnProductIdChanging(System.Nullable<int> value);
    partial void OnProductIdChanged();
    partial void OnSerialNumberChanging(string value);
    partial void OnSerialNumberChanged();
    partial void OnSpecialProductNameChanging(string value);
    partial void OnSpecialProductNameChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    #endregion
		
		public SaleItem()
		{
			this.Initialize();
		}
		
		[Column(Storage="_SaleItemsId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int SaleItemsId
		{
			get
			{
				return this._SaleItemsId;
			}
			set
			{
				if ((this._SaleItemsId != value))
				{
					this.OnSaleItemsIdChanging(value);
					this.SendPropertyChanging();
					this._SaleItemsId = value;
					this.SendPropertyChanged("SaleItemsId");
					this.OnSaleItemsIdChanged();
				}
			}
		}
		
		[Column(Storage="_SaleId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=2)]
		public int SaleId
		{
			get
			{
				return this._SaleId;
			}
			set
			{
				if ((this._SaleId != value))
				{
					if (this._Sale.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSaleIdChanging(value);
					this.SendPropertyChanging();
					this._SaleId = value;
					this.SendPropertyChanged("SaleId");
					this.OnSaleIdChanged();
				}
			}
		}
		
		[Column(Storage="_Quantity", DbType="Int NOT NULL")]
		[DataMember(Order=3)]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_UnitCost", DbType="Decimal(18,2)")]
		[DataMember(Order=4)]
		public System.Nullable<decimal> UnitCost
		{
			get
			{
				return this._UnitCost;
			}
			set
			{
				if ((this._UnitCost != value))
				{
					this.OnUnitCostChanging(value);
					this.SendPropertyChanging();
					this._UnitCost = value;
					this.SendPropertyChanged("UnitCost");
					this.OnUnitCostChanged();
				}
			}
		}
		
		[Column(Storage="_UnitPrice", DbType="Decimal(18,2) NOT NULL")]
		[DataMember(Order=5)]
		public decimal UnitPrice
		{
			get
			{
				return this._UnitPrice;
			}
			set
			{
				if ((this._UnitPrice != value))
				{
					this.OnUnitPriceChanging(value);
					this.SendPropertyChanging();
					this._UnitPrice = value;
					this.SendPropertyChanged("UnitPrice");
					this.OnUnitPriceChanged();
				}
			}
		}
		
		[Column(Storage="_Observation", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=6)]
		public string Observation
		{
			get
			{
				return this._Observation;
			}
			set
			{
				if ((this._Observation != value))
				{
					this.OnObservationChanging(value);
					this.SendPropertyChanging();
					this._Observation = value;
					this.SendPropertyChanged("Observation");
					this.OnObservationChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		[DataMember(Order=7)]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_ProductId", DbType="Int")]
		[DataMember(Order=8)]
		public System.Nullable<int> ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[Column(Storage="_SerialNumber", DbType="VarChar(20)")]
		[DataMember(Order=9)]
		public string SerialNumber
		{
			get
			{
				return this._SerialNumber;
			}
			set
			{
				if ((this._SerialNumber != value))
				{
					this.OnSerialNumberChanging(value);
					this.SendPropertyChanging();
					this._SerialNumber = value;
					this.SendPropertyChanged("SerialNumber");
					this.OnSerialNumberChanged();
				}
			}
		}
		
		[Column(Storage="_SpecialProductName", DbType="VarChar(128)")]
		[DataMember(Order=10)]
		public string SpecialProductName
		{
			get
			{
				return this._SpecialProductName;
			}
			set
			{
				if ((this._SpecialProductName != value))
				{
					this.OnSpecialProductNameChanging(value);
					this.SendPropertyChanging();
					this._SpecialProductName = value;
					this.SendPropertyChanged("SpecialProductName");
					this.OnSpecialProductNameChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=11)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Sale.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Association(Name="Sale_SaleItem", Storage="_Sale", ThisKey="SaleId,CompanyId", OtherKey="SaleId,CompanyId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Sale Sale
		{
			get
			{
				return this._Sale.Entity;
			}
			set
			{
				Sale previousValue = this._Sale.Entity;
				if (((previousValue != value) 
							|| (this._Sale.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sale.Entity = null;
						previousValue.SaleItems.Remove(this);
					}
					this._Sale.Entity = value;
					if ((value != null))
					{
						value.SaleItems.Add(this);
						this._SaleId = value.SaleId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._SaleId = default(int);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Sale");
				}
			}
		}
		
		[Association(Name="Product_SaleItem", Storage="_Product", ThisKey="ProductId", OtherKey="ProductId", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.SaleItems.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.SaleItems.Add(this);
						this._ProductId = value.ProductId;
					}
					else
					{
						this._ProductId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Sale = default(EntityRef<Sale>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.SaleStatus")]
	[DataContract()]
	public partial class SaleStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SaleStatusId;
		
		private string _Name;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Sale> _Sales;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSaleStatusIdChanging(int value);
    partial void OnSaleStatusIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public SaleStatus()
		{
			this.Initialize();
		}
		
		[Column(Storage="_SaleStatusId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int SaleStatusId
		{
			get
			{
				return this._SaleStatusId;
			}
			set
			{
				if ((this._SaleStatusId != value))
				{
					this.OnSaleStatusIdChanging(value);
					this.SendPropertyChanging();
					this._SaleStatusId = value;
					this.SendPropertyChanged("SaleStatusId");
					this.OnSaleStatusIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="SaleStatus_Sale", Storage="_Sales", ThisKey="SaleStatusId", OtherKey="SaleStatusId")]
		[DataMember(Order=3, EmitDefaultValue=false)]
		public EntitySet<Sale> Sales
		{
			get
			{
				if ((this.serializing 
							&& (this._Sales.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Sales;
			}
			set
			{
				this._Sales.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Sales(Sale entity)
		{
			this.SendPropertyChanging();
			entity.SaleStatus = this;
		}
		
		private void detach_Sales(Sale entity)
		{
			this.SendPropertyChanging();
			entity.SaleStatus = null;
		}
		
		private void Initialize()
		{
			this._Sales = new EntitySet<Sale>(new Action<Sale>(this.attach_Sales), new Action<Sale>(this.detach_Sales));
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.ScheduledTask")]
	[DataContract()]
	public partial class ScheduledTask : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ScheduledTaskId;
		
		private string _Name;
		
		private System.DateTime _StartTime;
		
		private int _Period;
		
		private bool _Enabled;
		
		private string _TypeFullName;
		
		private string _LastRunStatus;
		
		private System.Nullable<System.DateTime> _LastRunTime;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnScheduledTaskIdChanging(int value);
    partial void OnScheduledTaskIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnStartTimeChanging(System.DateTime value);
    partial void OnStartTimeChanged();
    partial void OnPeriodChanging(int value);
    partial void OnPeriodChanged();
    partial void OnEnabledChanging(bool value);
    partial void OnEnabledChanged();
    partial void OnTypeFullNameChanging(string value);
    partial void OnTypeFullNameChanged();
    partial void OnLastRunStatusChanging(string value);
    partial void OnLastRunStatusChanged();
    partial void OnLastRunTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLastRunTimeChanged();
    #endregion
		
		public ScheduledTask()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ScheduledTaskId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int ScheduledTaskId
		{
			get
			{
				return this._ScheduledTaskId;
			}
			set
			{
				if ((this._ScheduledTaskId != value))
				{
					this.OnScheduledTaskIdChanging(value);
					this.SendPropertyChanging();
					this._ScheduledTaskId = value;
					this.SendPropertyChanged("ScheduledTaskId");
					this.OnScheduledTaskIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(120) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_StartTime", DbType="DateTime NOT NULL")]
		[DataMember(Order=3)]
		public System.DateTime StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Period", DbType="Int NOT NULL")]
		[DataMember(Order=4)]
		public int Period
		{
			get
			{
				return this._Period;
			}
			set
			{
				if ((this._Period != value))
				{
					this.OnPeriodChanging(value);
					this.SendPropertyChanging();
					this._Period = value;
					this.SendPropertyChanged("Period");
					this.OnPeriodChanged();
				}
			}
		}
		
		[Column(Storage="_Enabled", DbType="Bit NOT NULL")]
		[DataMember(Order=5)]
		public bool Enabled
		{
			get
			{
				return this._Enabled;
			}
			set
			{
				if ((this._Enabled != value))
				{
					this.OnEnabledChanging(value);
					this.SendPropertyChanging();
					this._Enabled = value;
					this.SendPropertyChanged("Enabled");
					this.OnEnabledChanged();
				}
			}
		}
		
		[Column(Storage="_TypeFullName", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		[DataMember(Order=6)]
		public string TypeFullName
		{
			get
			{
				return this._TypeFullName;
			}
			set
			{
				if ((this._TypeFullName != value))
				{
					this.OnTypeFullNameChanging(value);
					this.SendPropertyChanging();
					this._TypeFullName = value;
					this.SendPropertyChanged("TypeFullName");
					this.OnTypeFullNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastRunStatus", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=7)]
		public string LastRunStatus
		{
			get
			{
				return this._LastRunStatus;
			}
			set
			{
				if ((this._LastRunStatus != value))
				{
					this.OnLastRunStatusChanging(value);
					this.SendPropertyChanging();
					this._LastRunStatus = value;
					this.SendPropertyChanged("LastRunStatus");
					this.OnLastRunStatusChanged();
				}
			}
		}
		
		[Column(Storage="_LastRunTime", DbType="DateTime")]
		[DataMember(Order=8)]
		public System.Nullable<System.DateTime> LastRunTime
		{
			get
			{
				return this._LastRunTime;
			}
			set
			{
				if ((this._LastRunTime != value))
				{
					this.OnLastRunTimeChanging(value);
					this.SendPropertyChanging();
					this._LastRunTime = value;
					this.SendPropertyChanged("LastRunTime");
					this.OnLastRunTimeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.Service")]
	[DataContract()]
	public partial class Service : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ServiceId;
		
		private string _Name;
		
		private decimal _Price;
		
		private int _TimeInMinutes;
		
		private int _CompanyId;
		
		private System.Nullable<decimal> _ISS;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<BudgetItem> _BudgetItems;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<ReceiptItem> _ReceiptItems;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<ServiceOrderItem> _ServiceOrderItems;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Company> _Company;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnServiceIdChanging(int value);
    partial void OnServiceIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    partial void OnTimeInMinutesChanging(int value);
    partial void OnTimeInMinutesChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnISSChanging(System.Nullable<decimal> value);
    partial void OnISSChanged();
    #endregion
		
		public Service()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ServiceId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int ServiceId
		{
			get
			{
				return this._ServiceId;
			}
			set
			{
				if ((this._ServiceId != value))
				{
					this.OnServiceIdChanging(value);
					this.SendPropertyChanging();
					this._ServiceId = value;
					this.SendPropertyChanged("ServiceId");
					this.OnServiceIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(120)")]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Price", DbType="Decimal(18,2) NOT NULL")]
		[DataMember(Order=3)]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[Column(Storage="_TimeInMinutes", DbType="Int NOT NULL")]
		[DataMember(Order=4)]
		public int TimeInMinutes
		{
			get
			{
				return this._TimeInMinutes;
			}
			set
			{
				if ((this._TimeInMinutes != value))
				{
					this.OnTimeInMinutesChanging(value);
					this.SendPropertyChanging();
					this._TimeInMinutes = value;
					this.SendPropertyChanged("TimeInMinutes");
					this.OnTimeInMinutesChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL")]
		[DataMember(Order=5)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Column(Storage="_ISS", DbType="Decimal(18,2)")]
		[DataMember(Order=6)]
		public System.Nullable<decimal> ISS
		{
			get
			{
				return this._ISS;
			}
			set
			{
				if ((this._ISS != value))
				{
					this.OnISSChanging(value);
					this.SendPropertyChanging();
					this._ISS = value;
					this.SendPropertyChanged("ISS");
					this.OnISSChanged();
				}
			}
		}
		
		[Association(Name="Service_BudgetItem", Storage="_BudgetItems", ThisKey="ServiceId", OtherKey="ServiceId")]
		[DataMember(Order=7, EmitDefaultValue=false)]
		public EntitySet<BudgetItem> BudgetItems
		{
			get
			{
				if ((this.serializing 
							&& (this._BudgetItems.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._BudgetItems;
			}
			set
			{
				this._BudgetItems.Assign(value);
			}
		}
		
		[Association(Name="Service_ReceiptItem", Storage="_ReceiptItems", ThisKey="ServiceId", OtherKey="ServiceId")]
		[DataMember(Order=8, EmitDefaultValue=false)]
		public EntitySet<ReceiptItem> ReceiptItems
		{
			get
			{
				if ((this.serializing 
							&& (this._ReceiptItems.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ReceiptItems;
			}
			set
			{
				this._ReceiptItems.Assign(value);
			}
		}
		
		[Association(Name="Service_ServiceOrderItem", Storage="_ServiceOrderItems", ThisKey="ServiceId", OtherKey="ServiceId")]
		[DataMember(Order=9, EmitDefaultValue=false)]
		public EntitySet<ServiceOrderItem> ServiceOrderItems
		{
			get
			{
				if ((this.serializing 
							&& (this._ServiceOrderItems.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ServiceOrderItems;
			}
			set
			{
				this._ServiceOrderItems.Assign(value);
			}
		}
		
		[Association(Name="Company_Service", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Services.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Services.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BudgetItems(BudgetItem entity)
		{
			this.SendPropertyChanging();
			entity.Service = this;
		}
		
		private void detach_BudgetItems(BudgetItem entity)
		{
			this.SendPropertyChanging();
			entity.Service = null;
		}
		
		private void attach_ReceiptItems(ReceiptItem entity)
		{
			this.SendPropertyChanging();
			entity.Service = this;
		}
		
		private void detach_ReceiptItems(ReceiptItem entity)
		{
			this.SendPropertyChanging();
			entity.Service = null;
		}
		
		private void attach_ServiceOrderItems(ServiceOrderItem entity)
		{
			this.SendPropertyChanging();
			entity.Service = this;
		}
		
		private void detach_ServiceOrderItems(ServiceOrderItem entity)
		{
			this.SendPropertyChanging();
			entity.Service = null;
		}
		
		private void Initialize()
		{
			this._BudgetItems = new EntitySet<BudgetItem>(new Action<BudgetItem>(this.attach_BudgetItems), new Action<BudgetItem>(this.detach_BudgetItems));
			this._ReceiptItems = new EntitySet<ReceiptItem>(new Action<ReceiptItem>(this.attach_ReceiptItems), new Action<ReceiptItem>(this.detach_ReceiptItems));
			this._ServiceOrderItems = new EntitySet<ServiceOrderItem>(new Action<ServiceOrderItem>(this.attach_ServiceOrderItems), new Action<ServiceOrderItem>(this.detach_ServiceOrderItems));
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.ServiceOrder")]
	[DataContract()]
	public partial class ServiceOrder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ServiceOrderId;
		
		private int _CustomerId;
		
		private string _ServiceOrderNumber;
		
		private System.Nullable<int> _CustomerCallId;
		
		private int _ServiceOrderTypeId;
		
		private System.Nullable<int> _ServiceOrderStatusId;
		
		private int _CompanyId;
		
		private System.Nullable<int> _CustomerEquipmentId;
		
		private System.Nullable<System.DateTime> _OpenedDate;
		
		private System.Nullable<System.DateTime> _ClosedDate;
		
		private System.Nullable<int> _ReceiptId;
		
		private string _TechnicalDecision;
		
		private System.Data.Linq.Binary _PhysicalServiceOrder;
		
		private string _PhysicalServiceOrderName;
		
		private string _ServiceOrderTestId;
		
		private string _ServiceOrderEquipmentDamageId;
		
		private string _ServiceOrderProductDamageId;
		
		private string _ServiceType;
		
		private string _ServiceOrderProductType;
		
		private string _ServiceOrderHaltType;
		
		private string _ServiceOrderInstallType;
		
		private System.Nullable<int> _ContractId;
		
		private System.Nullable<int> _BudgetId;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private string _CreatedByUser;
		
		private string _ModifiedByUser;
		
		private System.Nullable<int> _DepositId;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<ServiceOrderItem> _ServiceOrderItems;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Customer> _Customer;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<CustomerCall> _CustomerCall;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Company> _Company;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<CustomerEquipment> _CustomerEquipment;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Contract> _Contract;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Receipt> _Receipt;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Budget> _Budget;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<ServiceOrderStatus> _ServiceOrderStatus;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<ServiceOrderType> _ServiceOrderType;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnServiceOrderIdChanging(int value);
    partial void OnServiceOrderIdChanged();
    partial void OnCustomerIdChanging(int value);
    partial void OnCustomerIdChanged();
    partial void OnServiceOrderNumberChanging(string value);
    partial void OnServiceOrderNumberChanged();
    partial void OnCustomerCallIdChanging(System.Nullable<int> value);
    partial void OnCustomerCallIdChanged();
    partial void OnServiceOrderTypeIdChanging(int value);
    partial void OnServiceOrderTypeIdChanged();
    partial void OnServiceOrderStatusIdChanging(System.Nullable<int> value);
    partial void OnServiceOrderStatusIdChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnCustomerEquipmentIdChanging(System.Nullable<int> value);
    partial void OnCustomerEquipmentIdChanged();
    partial void OnOpenedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnOpenedDateChanged();
    partial void OnClosedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnClosedDateChanged();
    partial void OnReceiptIdChanging(System.Nullable<int> value);
    partial void OnReceiptIdChanged();
    partial void OnTechnicalDecisionChanging(string value);
    partial void OnTechnicalDecisionChanged();
    partial void OnPhysicalServiceOrderChanging(System.Data.Linq.Binary value);
    partial void OnPhysicalServiceOrderChanged();
    partial void OnPhysicalServiceOrderNameChanging(string value);
    partial void OnPhysicalServiceOrderNameChanged();
    partial void OnServiceOrderTestIdChanging(string value);
    partial void OnServiceOrderTestIdChanged();
    partial void OnServiceOrderEquipmentDamageIdChanging(string value);
    partial void OnServiceOrderEquipmentDamageIdChanged();
    partial void OnServiceOrderProductDamageIdChanging(string value);
    partial void OnServiceOrderProductDamageIdChanged();
    partial void OnServiceTypeChanging(string value);
    partial void OnServiceTypeChanged();
    partial void OnServiceOrderProductTypeChanging(string value);
    partial void OnServiceOrderProductTypeChanged();
    partial void OnServiceOrderHaltTypeChanging(string value);
    partial void OnServiceOrderHaltTypeChanged();
    partial void OnServiceOrderInstallTypeChanging(string value);
    partial void OnServiceOrderInstallTypeChanged();
    partial void OnContractIdChanging(System.Nullable<int> value);
    partial void OnContractIdChanged();
    partial void OnBudgetIdChanging(System.Nullable<int> value);
    partial void OnBudgetIdChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    partial void OnCreatedByUserChanging(string value);
    partial void OnCreatedByUserChanged();
    partial void OnModifiedByUserChanging(string value);
    partial void OnModifiedByUserChanged();
    partial void OnDepositIdChanging(System.Nullable<int> value);
    partial void OnDepositIdChanged();
    #endregion
		
		public ServiceOrder()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ServiceOrderId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int ServiceOrderId
		{
			get
			{
				return this._ServiceOrderId;
			}
			set
			{
				if ((this._ServiceOrderId != value))
				{
					this.OnServiceOrderIdChanging(value);
					this.SendPropertyChanging();
					this._ServiceOrderId = value;
					this.SendPropertyChanged("ServiceOrderId");
					this.OnServiceOrderIdChanged();
				}
			}
		}
		
		[Column(Storage="_CustomerId", DbType="Int NOT NULL")]
		[DataMember(Order=2)]
		public int CustomerId
		{
			get
			{
				return this._CustomerId;
			}
			set
			{
				if ((this._CustomerId != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerId = value;
					this.SendPropertyChanged("CustomerId");
					this.OnCustomerIdChanged();
				}
			}
		}
		
		[Column(Storage="_ServiceOrderNumber", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		[DataMember(Order=3)]
		public string ServiceOrderNumber
		{
			get
			{
				return this._ServiceOrderNumber;
			}
			set
			{
				if ((this._ServiceOrderNumber != value))
				{
					this.OnServiceOrderNumberChanging(value);
					this.SendPropertyChanging();
					this._ServiceOrderNumber = value;
					this.SendPropertyChanged("ServiceOrderNumber");
					this.OnServiceOrderNumberChanged();
				}
			}
		}
		
		[Column(Storage="_CustomerCallId", DbType="Int")]
		[DataMember(Order=4)]
		public System.Nullable<int> CustomerCallId
		{
			get
			{
				return this._CustomerCallId;
			}
			set
			{
				if ((this._CustomerCallId != value))
				{
					if (this._CustomerCall.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerCallIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerCallId = value;
					this.SendPropertyChanged("CustomerCallId");
					this.OnCustomerCallIdChanged();
				}
			}
		}
		
		[Column(Storage="_ServiceOrderTypeId", DbType="Int NOT NULL")]
		[DataMember(Order=5)]
		public int ServiceOrderTypeId
		{
			get
			{
				return this._ServiceOrderTypeId;
			}
			set
			{
				if ((this._ServiceOrderTypeId != value))
				{
					if (this._ServiceOrderType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceOrderTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ServiceOrderTypeId = value;
					this.SendPropertyChanged("ServiceOrderTypeId");
					this.OnServiceOrderTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_ServiceOrderStatusId", DbType="Int")]
		[DataMember(Order=6)]
		public System.Nullable<int> ServiceOrderStatusId
		{
			get
			{
				return this._ServiceOrderStatusId;
			}
			set
			{
				if ((this._ServiceOrderStatusId != value))
				{
					if (this._ServiceOrderStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceOrderStatusIdChanging(value);
					this.SendPropertyChanging();
					this._ServiceOrderStatusId = value;
					this.SendPropertyChanged("ServiceOrderStatusId");
					this.OnServiceOrderStatusIdChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=7)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._CustomerCall.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Column(Storage="_CustomerEquipmentId", DbType="Int")]
		[DataMember(Order=8)]
		public System.Nullable<int> CustomerEquipmentId
		{
			get
			{
				return this._CustomerEquipmentId;
			}
			set
			{
				if ((this._CustomerEquipmentId != value))
				{
					if (this._CustomerEquipment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerEquipmentIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerEquipmentId = value;
					this.SendPropertyChanged("CustomerEquipmentId");
					this.OnCustomerEquipmentIdChanged();
				}
			}
		}
		
		[Column(Storage="_OpenedDate", DbType="DateTime")]
		[DataMember(Order=9)]
		public System.Nullable<System.DateTime> OpenedDate
		{
			get
			{
				return this._OpenedDate;
			}
			set
			{
				if ((this._OpenedDate != value))
				{
					this.OnOpenedDateChanging(value);
					this.SendPropertyChanging();
					this._OpenedDate = value;
					this.SendPropertyChanged("OpenedDate");
					this.OnOpenedDateChanged();
				}
			}
		}
		
		[Column(Storage="_ClosedDate", DbType="DateTime")]
		[DataMember(Order=10)]
		public System.Nullable<System.DateTime> ClosedDate
		{
			get
			{
				return this._ClosedDate;
			}
			set
			{
				if ((this._ClosedDate != value))
				{
					this.OnClosedDateChanging(value);
					this.SendPropertyChanging();
					this._ClosedDate = value;
					this.SendPropertyChanged("ClosedDate");
					this.OnClosedDateChanged();
				}
			}
		}
		
		[Column(Storage="_ReceiptId", DbType="Int")]
		[DataMember(Order=11)]
		public System.Nullable<int> ReceiptId
		{
			get
			{
				return this._ReceiptId;
			}
			set
			{
				if ((this._ReceiptId != value))
				{
					if (this._Receipt.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReceiptIdChanging(value);
					this.SendPropertyChanging();
					this._ReceiptId = value;
					this.SendPropertyChanged("ReceiptId");
					this.OnReceiptIdChanged();
				}
			}
		}
		
		[Column(Storage="_TechnicalDecision", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=12)]
		public string TechnicalDecision
		{
			get
			{
				return this._TechnicalDecision;
			}
			set
			{
				if ((this._TechnicalDecision != value))
				{
					this.OnTechnicalDecisionChanging(value);
					this.SendPropertyChanging();
					this._TechnicalDecision = value;
					this.SendPropertyChanged("TechnicalDecision");
					this.OnTechnicalDecisionChanged();
				}
			}
		}
		
		[Column(Storage="_PhysicalServiceOrder", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=13)]
		public System.Data.Linq.Binary PhysicalServiceOrder
		{
			get
			{
				return this._PhysicalServiceOrder;
			}
			set
			{
				if ((this._PhysicalServiceOrder != value))
				{
					this.OnPhysicalServiceOrderChanging(value);
					this.SendPropertyChanging();
					this._PhysicalServiceOrder = value;
					this.SendPropertyChanged("PhysicalServiceOrder");
					this.OnPhysicalServiceOrderChanged();
				}
			}
		}
		
		[Column(Storage="_PhysicalServiceOrderName", DbType="VarChar(120)")]
		[DataMember(Order=14)]
		public string PhysicalServiceOrderName
		{
			get
			{
				return this._PhysicalServiceOrderName;
			}
			set
			{
				if ((this._PhysicalServiceOrderName != value))
				{
					this.OnPhysicalServiceOrderNameChanging(value);
					this.SendPropertyChanging();
					this._PhysicalServiceOrderName = value;
					this.SendPropertyChanged("PhysicalServiceOrderName");
					this.OnPhysicalServiceOrderNameChanged();
				}
			}
		}
		
		[Column(Storage="_ServiceOrderTestId", DbType="VarChar(50)")]
		[DataMember(Order=15)]
		public string ServiceOrderTestId
		{
			get
			{
				return this._ServiceOrderTestId;
			}
			set
			{
				if ((this._ServiceOrderTestId != value))
				{
					this.OnServiceOrderTestIdChanging(value);
					this.SendPropertyChanging();
					this._ServiceOrderTestId = value;
					this.SendPropertyChanged("ServiceOrderTestId");
					this.OnServiceOrderTestIdChanged();
				}
			}
		}
		
		[Column(Storage="_ServiceOrderEquipmentDamageId", DbType="VarChar(50)")]
		[DataMember(Order=16)]
		public string ServiceOrderEquipmentDamageId
		{
			get
			{
				return this._ServiceOrderEquipmentDamageId;
			}
			set
			{
				if ((this._ServiceOrderEquipmentDamageId != value))
				{
					this.OnServiceOrderEquipmentDamageIdChanging(value);
					this.SendPropertyChanging();
					this._ServiceOrderEquipmentDamageId = value;
					this.SendPropertyChanged("ServiceOrderEquipmentDamageId");
					this.OnServiceOrderEquipmentDamageIdChanged();
				}
			}
		}
		
		[Column(Storage="_ServiceOrderProductDamageId", DbType="VarChar(50)")]
		[DataMember(Order=17)]
		public string ServiceOrderProductDamageId
		{
			get
			{
				return this._ServiceOrderProductDamageId;
			}
			set
			{
				if ((this._ServiceOrderProductDamageId != value))
				{
					this.OnServiceOrderProductDamageIdChanging(value);
					this.SendPropertyChanging();
					this._ServiceOrderProductDamageId = value;
					this.SendPropertyChanged("ServiceOrderProductDamageId");
					this.OnServiceOrderProductDamageIdChanged();
				}
			}
		}
		
		[Column(Storage="_ServiceType", DbType="VarChar(50)")]
		[DataMember(Order=18)]
		public string ServiceType
		{
			get
			{
				return this._ServiceType;
			}
			set
			{
				if ((this._ServiceType != value))
				{
					this.OnServiceTypeChanging(value);
					this.SendPropertyChanging();
					this._ServiceType = value;
					this.SendPropertyChanged("ServiceType");
					this.OnServiceTypeChanged();
				}
			}
		}
		
		[Column(Storage="_ServiceOrderProductType", DbType="VarChar(50)")]
		[DataMember(Order=19)]
		public string ServiceOrderProductType
		{
			get
			{
				return this._ServiceOrderProductType;
			}
			set
			{
				if ((this._ServiceOrderProductType != value))
				{
					this.OnServiceOrderProductTypeChanging(value);
					this.SendPropertyChanging();
					this._ServiceOrderProductType = value;
					this.SendPropertyChanged("ServiceOrderProductType");
					this.OnServiceOrderProductTypeChanged();
				}
			}
		}
		
		[Column(Storage="_ServiceOrderHaltType", DbType="VarChar(50)")]
		[DataMember(Order=20)]
		public string ServiceOrderHaltType
		{
			get
			{
				return this._ServiceOrderHaltType;
			}
			set
			{
				if ((this._ServiceOrderHaltType != value))
				{
					this.OnServiceOrderHaltTypeChanging(value);
					this.SendPropertyChanging();
					this._ServiceOrderHaltType = value;
					this.SendPropertyChanged("ServiceOrderHaltType");
					this.OnServiceOrderHaltTypeChanged();
				}
			}
		}
		
		[Column(Storage="_ServiceOrderInstallType", DbType="VarChar(50)")]
		[DataMember(Order=21)]
		public string ServiceOrderInstallType
		{
			get
			{
				return this._ServiceOrderInstallType;
			}
			set
			{
				if ((this._ServiceOrderInstallType != value))
				{
					this.OnServiceOrderInstallTypeChanging(value);
					this.SendPropertyChanging();
					this._ServiceOrderInstallType = value;
					this.SendPropertyChanged("ServiceOrderInstallType");
					this.OnServiceOrderInstallTypeChanged();
				}
			}
		}
		
		[Column(Storage="_ContractId", DbType="Int")]
		[DataMember(Order=22)]
		public System.Nullable<int> ContractId
		{
			get
			{
				return this._ContractId;
			}
			set
			{
				if ((this._ContractId != value))
				{
					if (this._Contract.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContractIdChanging(value);
					this.SendPropertyChanging();
					this._ContractId = value;
					this.SendPropertyChanged("ContractId");
					this.OnContractIdChanged();
				}
			}
		}
		
		[Column(Storage="_BudgetId", DbType="Int")]
		[DataMember(Order=23)]
		public System.Nullable<int> BudgetId
		{
			get
			{
				return this._BudgetId;
			}
			set
			{
				if ((this._BudgetId != value))
				{
					if (this._Budget.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBudgetIdChanging(value);
					this.SendPropertyChanging();
					this._BudgetId = value;
					this.SendPropertyChanged("BudgetId");
					this.OnBudgetIdChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime")]
		[DataMember(Order=24)]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime")]
		[DataMember(Order=25)]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedByUser", DbType="VarChar(50)")]
		[DataMember(Order=26)]
		public string CreatedByUser
		{
			get
			{
				return this._CreatedByUser;
			}
			set
			{
				if ((this._CreatedByUser != value))
				{
					this.OnCreatedByUserChanging(value);
					this.SendPropertyChanging();
					this._CreatedByUser = value;
					this.SendPropertyChanged("CreatedByUser");
					this.OnCreatedByUserChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedByUser", DbType="VarChar(50)")]
		[DataMember(Order=27)]
		public string ModifiedByUser
		{
			get
			{
				return this._ModifiedByUser;
			}
			set
			{
				if ((this._ModifiedByUser != value))
				{
					this.OnModifiedByUserChanging(value);
					this.SendPropertyChanging();
					this._ModifiedByUser = value;
					this.SendPropertyChanged("ModifiedByUser");
					this.OnModifiedByUserChanged();
				}
			}
		}
		
		[Column(Storage="_DepositId", DbType="Int")]
		[DataMember(Order=28)]
		public System.Nullable<int> DepositId
		{
			get
			{
				return this._DepositId;
			}
			set
			{
				if ((this._DepositId != value))
				{
					this.OnDepositIdChanging(value);
					this.SendPropertyChanging();
					this._DepositId = value;
					this.SendPropertyChanged("DepositId");
					this.OnDepositIdChanged();
				}
			}
		}
		
		[Association(Name="ServiceOrder_ServiceOrderItem", Storage="_ServiceOrderItems", ThisKey="CompanyId,ServiceOrderId", OtherKey="CompanyId,ServiceOrderId")]
		[DataMember(Order=29, EmitDefaultValue=false)]
		public EntitySet<ServiceOrderItem> ServiceOrderItems
		{
			get
			{
				if ((this.serializing 
							&& (this._ServiceOrderItems.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ServiceOrderItems;
			}
			set
			{
				this._ServiceOrderItems.Assign(value);
			}
		}
		
		[Association(Name="Customer_ServiceOrder", Storage="_Customer", ThisKey="CustomerId", OtherKey="CustomerId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.ServiceOrders.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.ServiceOrders.Add(this);
						this._CustomerId = value.CustomerId;
					}
					else
					{
						this._CustomerId = default(int);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[Association(Name="CustomerCall_ServiceOrder", Storage="_CustomerCall", ThisKey="CustomerCallId,CompanyId", OtherKey="CustomerCallId,CompanyId", IsForeignKey=true)]
		public CustomerCall CustomerCall
		{
			get
			{
				return this._CustomerCall.Entity;
			}
			set
			{
				CustomerCall previousValue = this._CustomerCall.Entity;
				if (((previousValue != value) 
							|| (this._CustomerCall.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CustomerCall.Entity = null;
						previousValue.ServiceOrders.Remove(this);
					}
					this._CustomerCall.Entity = value;
					if ((value != null))
					{
						value.ServiceOrders.Add(this);
						this._CustomerCallId = value.CustomerCallId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CustomerCallId = default(Nullable<int>);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("CustomerCall");
				}
			}
		}
		
		[Association(Name="Company_ServiceOrder", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.ServiceOrders.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.ServiceOrders.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[Association(Name="CustomerEquipment_ServiceOrder", Storage="_CustomerEquipment", ThisKey="CustomerId,CustomerEquipmentId", OtherKey="CustomerId,CustomerEquipmentId", IsForeignKey=true)]
		public CustomerEquipment CustomerEquipment
		{
			get
			{
				return this._CustomerEquipment.Entity;
			}
			set
			{
				CustomerEquipment previousValue = this._CustomerEquipment.Entity;
				if (((previousValue != value) 
							|| (this._CustomerEquipment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CustomerEquipment.Entity = null;
						previousValue.ServiceOrders.Remove(this);
					}
					this._CustomerEquipment.Entity = value;
					if ((value != null))
					{
						value.ServiceOrders.Add(this);
						this._CustomerId = value.CustomerId;
						this._CustomerEquipmentId = value.CustomerEquipmentId;
					}
					else
					{
						this._CustomerId = default(int);
						this._CustomerEquipmentId = default(Nullable<int>);
					}
					this.SendPropertyChanged("CustomerEquipment");
				}
			}
		}
		
		[Association(Name="Contract_ServiceOrder", Storage="_Contract", ThisKey="ContractId,CompanyId", OtherKey="ContractId,CompanyId", IsForeignKey=true)]
		public Contract Contract
		{
			get
			{
				return this._Contract.Entity;
			}
			set
			{
				Contract previousValue = this._Contract.Entity;
				if (((previousValue != value) 
							|| (this._Contract.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contract.Entity = null;
						previousValue.ServiceOrders.Remove(this);
					}
					this._Contract.Entity = value;
					if ((value != null))
					{
						value.ServiceOrders.Add(this);
						this._ContractId = value.ContractId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._ContractId = default(Nullable<int>);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Contract");
				}
			}
		}
		
		[Association(Name="Receipt_ServiceOrder", Storage="_Receipt", ThisKey="ReceiptId,CompanyId", OtherKey="ReceiptId,CompanyId", IsForeignKey=true)]
		public Receipt Receipt
		{
			get
			{
				return this._Receipt.Entity;
			}
			set
			{
				Receipt previousValue = this._Receipt.Entity;
				if (((previousValue != value) 
							|| (this._Receipt.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Receipt.Entity = null;
						previousValue.ServiceOrders.Remove(this);
					}
					this._Receipt.Entity = value;
					if ((value != null))
					{
						value.ServiceOrders.Add(this);
						this._ReceiptId = value.ReceiptId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._ReceiptId = default(Nullable<int>);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Receipt");
				}
			}
		}
		
		[Association(Name="Budget_ServiceOrder", Storage="_Budget", ThisKey="BudgetId", OtherKey="BudgetId", IsForeignKey=true)]
		public Budget Budget
		{
			get
			{
				return this._Budget.Entity;
			}
			set
			{
				Budget previousValue = this._Budget.Entity;
				if (((previousValue != value) 
							|| (this._Budget.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Budget.Entity = null;
						previousValue.ServiceOrders.Remove(this);
					}
					this._Budget.Entity = value;
					if ((value != null))
					{
						value.ServiceOrders.Add(this);
						this._BudgetId = value.BudgetId;
					}
					else
					{
						this._BudgetId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Budget");
				}
			}
		}
		
		[Association(Name="ServiceOrderStatus_ServiceOrder", Storage="_ServiceOrderStatus", ThisKey="ServiceOrderStatusId", OtherKey="ServiceOrderStatusId", IsForeignKey=true)]
		public ServiceOrderStatus ServiceOrderStatus
		{
			get
			{
				return this._ServiceOrderStatus.Entity;
			}
			set
			{
				ServiceOrderStatus previousValue = this._ServiceOrderStatus.Entity;
				if (((previousValue != value) 
							|| (this._ServiceOrderStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ServiceOrderStatus.Entity = null;
						previousValue.ServiceOrders.Remove(this);
					}
					this._ServiceOrderStatus.Entity = value;
					if ((value != null))
					{
						value.ServiceOrders.Add(this);
						this._ServiceOrderStatusId = value.ServiceOrderStatusId;
					}
					else
					{
						this._ServiceOrderStatusId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ServiceOrderStatus");
				}
			}
		}
		
		[Association(Name="ServiceOrderType_ServiceOrder", Storage="_ServiceOrderType", ThisKey="ServiceOrderTypeId", OtherKey="ServiceOrderTypeId", IsForeignKey=true)]
		public ServiceOrderType ServiceOrderType
		{
			get
			{
				return this._ServiceOrderType.Entity;
			}
			set
			{
				ServiceOrderType previousValue = this._ServiceOrderType.Entity;
				if (((previousValue != value) 
							|| (this._ServiceOrderType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ServiceOrderType.Entity = null;
						previousValue.ServiceOrders.Remove(this);
					}
					this._ServiceOrderType.Entity = value;
					if ((value != null))
					{
						value.ServiceOrders.Add(this);
						this._ServiceOrderTypeId = value.ServiceOrderTypeId;
					}
					else
					{
						this._ServiceOrderTypeId = default(int);
					}
					this.SendPropertyChanged("ServiceOrderType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ServiceOrderItems(ServiceOrderItem entity)
		{
			this.SendPropertyChanging();
			entity.ServiceOrder = this;
		}
		
		private void detach_ServiceOrderItems(ServiceOrderItem entity)
		{
			this.SendPropertyChanging();
			entity.ServiceOrder = null;
		}
		
		private void Initialize()
		{
			this._ServiceOrderItems = new EntitySet<ServiceOrderItem>(new Action<ServiceOrderItem>(this.attach_ServiceOrderItems), new Action<ServiceOrderItem>(this.detach_ServiceOrderItems));
			this._Customer = default(EntityRef<Customer>);
			this._CustomerCall = default(EntityRef<CustomerCall>);
			this._Company = default(EntityRef<Company>);
			this._CustomerEquipment = default(EntityRef<CustomerEquipment>);
			this._Contract = default(EntityRef<Contract>);
			this._Receipt = default(EntityRef<Receipt>);
			this._Budget = default(EntityRef<Budget>);
			this._ServiceOrderStatus = default(EntityRef<ServiceOrderStatus>);
			this._ServiceOrderType = default(EntityRef<ServiceOrderType>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.ServiceOrderBook")]
	[DataContract()]
	public partial class ServiceOrderBook : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CompanyId;
		
		private int _EmployeeId;
		
		private int _StartNumber;
		
		private int _FinishNumber;
		
		private int _Quantity;
		
		private int _MinimumQuantity;
		
		private System.Nullable<int> _RepresentantId;
		
		private int _ServiceOrderBookId;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Company> _Company;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Employee> _Employee;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Representant> _Representant;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnEmployeeIdChanging(int value);
    partial void OnEmployeeIdChanged();
    partial void OnStartNumberChanging(int value);
    partial void OnStartNumberChanged();
    partial void OnFinishNumberChanging(int value);
    partial void OnFinishNumberChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnMinimumQuantityChanging(int value);
    partial void OnMinimumQuantityChanged();
    partial void OnRepresentantIdChanging(System.Nullable<int> value);
    partial void OnRepresentantIdChanged();
    partial void OnServiceOrderBookIdChanging(int value);
    partial void OnServiceOrderBookIdChanged();
    #endregion
		
		public ServiceOrderBook()
		{
			this.Initialize();
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL")]
		[DataMember(Order=1)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Column(Storage="_EmployeeId", DbType="Int NOT NULL")]
		[DataMember(Order=2)]
		public int EmployeeId
		{
			get
			{
				return this._EmployeeId;
			}
			set
			{
				if ((this._EmployeeId != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeId = value;
					this.SendPropertyChanged("EmployeeId");
					this.OnEmployeeIdChanged();
				}
			}
		}
		
		[Column(Storage="_StartNumber", DbType="Int NOT NULL")]
		[DataMember(Order=3)]
		public int StartNumber
		{
			get
			{
				return this._StartNumber;
			}
			set
			{
				if ((this._StartNumber != value))
				{
					this.OnStartNumberChanging(value);
					this.SendPropertyChanging();
					this._StartNumber = value;
					this.SendPropertyChanged("StartNumber");
					this.OnStartNumberChanged();
				}
			}
		}
		
		[Column(Storage="_FinishNumber", DbType="Int NOT NULL")]
		[DataMember(Order=4)]
		public int FinishNumber
		{
			get
			{
				return this._FinishNumber;
			}
			set
			{
				if ((this._FinishNumber != value))
				{
					this.OnFinishNumberChanging(value);
					this.SendPropertyChanging();
					this._FinishNumber = value;
					this.SendPropertyChanged("FinishNumber");
					this.OnFinishNumberChanged();
				}
			}
		}
		
		[Column(Storage="_Quantity", DbType="Int NOT NULL")]
		[DataMember(Order=5)]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_MinimumQuantity", DbType="Int NOT NULL")]
		[DataMember(Order=6)]
		public int MinimumQuantity
		{
			get
			{
				return this._MinimumQuantity;
			}
			set
			{
				if ((this._MinimumQuantity != value))
				{
					this.OnMinimumQuantityChanging(value);
					this.SendPropertyChanging();
					this._MinimumQuantity = value;
					this.SendPropertyChanged("MinimumQuantity");
					this.OnMinimumQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_RepresentantId", DbType="Int")]
		[DataMember(Order=7)]
		public System.Nullable<int> RepresentantId
		{
			get
			{
				return this._RepresentantId;
			}
			set
			{
				if ((this._RepresentantId != value))
				{
					if (this._Representant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRepresentantIdChanging(value);
					this.SendPropertyChanging();
					this._RepresentantId = value;
					this.SendPropertyChanged("RepresentantId");
					this.OnRepresentantIdChanged();
				}
			}
		}
		
		[Column(Storage="_ServiceOrderBookId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=8)]
		public int ServiceOrderBookId
		{
			get
			{
				return this._ServiceOrderBookId;
			}
			set
			{
				if ((this._ServiceOrderBookId != value))
				{
					this.OnServiceOrderBookIdChanging(value);
					this.SendPropertyChanging();
					this._ServiceOrderBookId = value;
					this.SendPropertyChanged("ServiceOrderBookId");
					this.OnServiceOrderBookIdChanged();
				}
			}
		}
		
		[Association(Name="Company_ServiceOrderBook", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.ServiceOrderBooks.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.ServiceOrderBooks.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[Association(Name="Employee_ServiceOrderBook", Storage="_Employee", ThisKey="EmployeeId,CompanyId", OtherKey="EmployeeId,CompanyId", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.ServiceOrderBooks.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.ServiceOrderBooks.Add(this);
						this._EmployeeId = value.EmployeeId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._EmployeeId = default(int);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[Association(Name="Representant_ServiceOrderBook", Storage="_Representant", ThisKey="RepresentantId,CompanyId", OtherKey="RepresentantId,CompanyId", IsForeignKey=true)]
		public Representant Representant
		{
			get
			{
				return this._Representant.Entity;
			}
			set
			{
				Representant previousValue = this._Representant.Entity;
				if (((previousValue != value) 
							|| (this._Representant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Representant.Entity = null;
						previousValue.ServiceOrderBooks.Remove(this);
					}
					this._Representant.Entity = value;
					if ((value != null))
					{
						value.ServiceOrderBooks.Add(this);
						this._RepresentantId = value.RepresentantId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._RepresentantId = default(Nullable<int>);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Representant");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Company = default(EntityRef<Company>);
			this._Employee = default(EntityRef<Employee>);
			this._Representant = default(EntityRef<Representant>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.ServiceOrderEquipmentDamage")]
	[DataContract()]
	public partial class ServiceOrderEquipmentDamage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ServiceOrderEquipmentDamageId;
		
		private string _Name;
		
		private int _CompanyId;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Company> _Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnServiceOrderEquipmentDamageIdChanging(int value);
    partial void OnServiceOrderEquipmentDamageIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    #endregion
		
		public ServiceOrderEquipmentDamage()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ServiceOrderEquipmentDamageId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int ServiceOrderEquipmentDamageId
		{
			get
			{
				return this._ServiceOrderEquipmentDamageId;
			}
			set
			{
				if ((this._ServiceOrderEquipmentDamageId != value))
				{
					this.OnServiceOrderEquipmentDamageIdChanging(value);
					this.SendPropertyChanging();
					this._ServiceOrderEquipmentDamageId = value;
					this.SendPropertyChanged("ServiceOrderEquipmentDamageId");
					this.OnServiceOrderEquipmentDamageIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(120)")]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=3)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Association(Name="Company_ServiceOrderEquipmentDamage", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.ServiceOrderEquipmentDamages.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.ServiceOrderEquipmentDamages.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.ServiceOrderHaltType")]
	[DataContract()]
	public partial class ServiceOrderHaltType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ServiceOrderHaltTypeId;
		
		private int _CompanyId;
		
		private string _Name;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Company> _Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnServiceOrderHaltTypeIdChanging(int value);
    partial void OnServiceOrderHaltTypeIdChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public ServiceOrderHaltType()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ServiceOrderHaltTypeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int ServiceOrderHaltTypeId
		{
			get
			{
				return this._ServiceOrderHaltTypeId;
			}
			set
			{
				if ((this._ServiceOrderHaltTypeId != value))
				{
					this.OnServiceOrderHaltTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ServiceOrderHaltTypeId = value;
					this.SendPropertyChanged("ServiceOrderHaltTypeId");
					this.OnServiceOrderHaltTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=2)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(120) NOT NULL", CanBeNull=false)]
		[DataMember(Order=3)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="Company_ServiceOrderHaltType", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.ServiceOrderHaltTypes.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.ServiceOrderHaltTypes.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.ServiceOrderInstallType")]
	[DataContract()]
	public partial class ServiceOrderInstallType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ServiceOrderInstallTypeId;
		
		private int _CompanyId;
		
		private string _Name;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Company> _Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnServiceOrderInstallTypeIdChanging(int value);
    partial void OnServiceOrderInstallTypeIdChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public ServiceOrderInstallType()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ServiceOrderInstallTypeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int ServiceOrderInstallTypeId
		{
			get
			{
				return this._ServiceOrderInstallTypeId;
			}
			set
			{
				if ((this._ServiceOrderInstallTypeId != value))
				{
					this.OnServiceOrderInstallTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ServiceOrderInstallTypeId = value;
					this.SendPropertyChanged("ServiceOrderInstallTypeId");
					this.OnServiceOrderInstallTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=2)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(120) NOT NULL", CanBeNull=false)]
		[DataMember(Order=3)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="Company_ServiceOrderInstallType", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.ServiceOrderInstallTypes.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.ServiceOrderInstallTypes.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.ServiceOrderItem")]
	[DataContract()]
	public partial class ServiceOrderItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ServiceOrderItemId;
		
		private int _ServiceOrderId;
		
		private System.Nullable<int> _ServiceId;
		
		private int _CompanyId;
		
		private string _Description;
		
		private System.Nullable<int> _ProductId;
		
		private System.Nullable<bool> _IsApplied;
		
		private System.Nullable<int> _EmployeeId;
		
		private System.Nullable<decimal> _Price;
		
		private System.Nullable<int> _Quantity;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<ServiceOrder> _ServiceOrder;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Service> _Service;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Product> _Product;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnServiceOrderItemIdChanging(int value);
    partial void OnServiceOrderItemIdChanged();
    partial void OnServiceOrderIdChanging(int value);
    partial void OnServiceOrderIdChanged();
    partial void OnServiceIdChanging(System.Nullable<int> value);
    partial void OnServiceIdChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnProductIdChanging(System.Nullable<int> value);
    partial void OnProductIdChanged();
    partial void OnIsAppliedChanging(System.Nullable<bool> value);
    partial void OnIsAppliedChanged();
    partial void OnEmployeeIdChanging(System.Nullable<int> value);
    partial void OnEmployeeIdChanged();
    partial void OnPriceChanging(System.Nullable<decimal> value);
    partial void OnPriceChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    #endregion
		
		public ServiceOrderItem()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ServiceOrderItemId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int ServiceOrderItemId
		{
			get
			{
				return this._ServiceOrderItemId;
			}
			set
			{
				if ((this._ServiceOrderItemId != value))
				{
					this.OnServiceOrderItemIdChanging(value);
					this.SendPropertyChanging();
					this._ServiceOrderItemId = value;
					this.SendPropertyChanged("ServiceOrderItemId");
					this.OnServiceOrderItemIdChanged();
				}
			}
		}
		
		[Column(Storage="_ServiceOrderId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=2)]
		public int ServiceOrderId
		{
			get
			{
				return this._ServiceOrderId;
			}
			set
			{
				if ((this._ServiceOrderId != value))
				{
					if (this._ServiceOrder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceOrderIdChanging(value);
					this.SendPropertyChanging();
					this._ServiceOrderId = value;
					this.SendPropertyChanged("ServiceOrderId");
					this.OnServiceOrderIdChanged();
				}
			}
		}
		
		[Column(Storage="_ServiceId", DbType="Int")]
		[DataMember(Order=3)]
		public System.Nullable<int> ServiceId
		{
			get
			{
				return this._ServiceId;
			}
			set
			{
				if ((this._ServiceId != value))
				{
					if (this._Service.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceIdChanging(value);
					this.SendPropertyChanging();
					this._ServiceId = value;
					this.SendPropertyChanged("ServiceId");
					this.OnServiceIdChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=4)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._ServiceOrder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(200)")]
		[DataMember(Order=5)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_ProductId", DbType="Int")]
		[DataMember(Order=6)]
		public System.Nullable<int> ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[Column(Storage="_IsApplied", DbType="Bit")]
		[DataMember(Order=7)]
		public System.Nullable<bool> IsApplied
		{
			get
			{
				return this._IsApplied;
			}
			set
			{
				if ((this._IsApplied != value))
				{
					this.OnIsAppliedChanging(value);
					this.SendPropertyChanging();
					this._IsApplied = value;
					this.SendPropertyChanged("IsApplied");
					this.OnIsAppliedChanged();
				}
			}
		}
		
		[Column(Storage="_EmployeeId", DbType="Int")]
		[DataMember(Order=8)]
		public System.Nullable<int> EmployeeId
		{
			get
			{
				return this._EmployeeId;
			}
			set
			{
				if ((this._EmployeeId != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeId = value;
					this.SendPropertyChanged("EmployeeId");
					this.OnEmployeeIdChanged();
				}
			}
		}
		
		[Column(Storage="_Price", DbType="Decimal(18,2)")]
		[DataMember(Order=9)]
		public System.Nullable<decimal> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[Column(Storage="_Quantity", DbType="Int")]
		[DataMember(Order=10)]
		public System.Nullable<int> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[Association(Name="ServiceOrder_ServiceOrderItem", Storage="_ServiceOrder", ThisKey="CompanyId,ServiceOrderId", OtherKey="CompanyId,ServiceOrderId", IsForeignKey=true)]
		public ServiceOrder ServiceOrder
		{
			get
			{
				return this._ServiceOrder.Entity;
			}
			set
			{
				ServiceOrder previousValue = this._ServiceOrder.Entity;
				if (((previousValue != value) 
							|| (this._ServiceOrder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ServiceOrder.Entity = null;
						previousValue.ServiceOrderItems.Remove(this);
					}
					this._ServiceOrder.Entity = value;
					if ((value != null))
					{
						value.ServiceOrderItems.Add(this);
						this._CompanyId = value.CompanyId;
						this._ServiceOrderId = value.ServiceOrderId;
					}
					else
					{
						this._CompanyId = default(int);
						this._ServiceOrderId = default(int);
					}
					this.SendPropertyChanged("ServiceOrder");
				}
			}
		}
		
		[Association(Name="Service_ServiceOrderItem", Storage="_Service", ThisKey="ServiceId", OtherKey="ServiceId", IsForeignKey=true)]
		public Service Service
		{
			get
			{
				return this._Service.Entity;
			}
			set
			{
				Service previousValue = this._Service.Entity;
				if (((previousValue != value) 
							|| (this._Service.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Service.Entity = null;
						previousValue.ServiceOrderItems.Remove(this);
					}
					this._Service.Entity = value;
					if ((value != null))
					{
						value.ServiceOrderItems.Add(this);
						this._ServiceId = value.ServiceId;
					}
					else
					{
						this._ServiceId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Service");
				}
			}
		}
		
		[Association(Name="Product_ServiceOrderItem", Storage="_Product", ThisKey="ProductId", OtherKey="ProductId", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ServiceOrderItems.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ServiceOrderItems.Add(this);
						this._ProductId = value.ProductId;
					}
					else
					{
						this._ProductId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		[Association(Name="Employee_ServiceOrderItem", Storage="_Employee", ThisKey="EmployeeId,CompanyId", OtherKey="EmployeeId,CompanyId", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.ServiceOrderItems.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.ServiceOrderItems.Add(this);
						this._EmployeeId = value.EmployeeId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._EmployeeId = default(Nullable<int>);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._ServiceOrder = default(EntityRef<ServiceOrder>);
			this._Service = default(EntityRef<Service>);
			this._Product = default(EntityRef<Product>);
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.ServiceOrderProductDamage")]
	[DataContract()]
	public partial class ServiceOrderProductDamage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ServiceOrderProductDamageId;
		
		private string _Name;
		
		private int _CompanyId;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Company> _Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnServiceOrderProductDamageIdChanging(int value);
    partial void OnServiceOrderProductDamageIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    #endregion
		
		public ServiceOrderProductDamage()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ServiceOrderProductDamageId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int ServiceOrderProductDamageId
		{
			get
			{
				return this._ServiceOrderProductDamageId;
			}
			set
			{
				if ((this._ServiceOrderProductDamageId != value))
				{
					this.OnServiceOrderProductDamageIdChanging(value);
					this.SendPropertyChanging();
					this._ServiceOrderProductDamageId = value;
					this.SendPropertyChanged("ServiceOrderProductDamageId");
					this.OnServiceOrderProductDamageIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(120)")]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=3)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Association(Name="Company_ServiceOrderProductDamage", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.ServiceOrderProductDamages.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.ServiceOrderProductDamages.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.ServiceOrderProductType")]
	[DataContract()]
	public partial class ServiceOrderProductType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ServiceOrderProductTypeId;
		
		private int _CompanyId;
		
		private string _Name;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Company> _Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnServiceOrderProductTypeIdChanging(int value);
    partial void OnServiceOrderProductTypeIdChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public ServiceOrderProductType()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ServiceOrderProductTypeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int ServiceOrderProductTypeId
		{
			get
			{
				return this._ServiceOrderProductTypeId;
			}
			set
			{
				if ((this._ServiceOrderProductTypeId != value))
				{
					this.OnServiceOrderProductTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ServiceOrderProductTypeId = value;
					this.SendPropertyChanged("ServiceOrderProductTypeId");
					this.OnServiceOrderProductTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=2)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(120)")]
		[DataMember(Order=3)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="Company_ServiceOrderProductType", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.ServiceOrderProductTypes.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.ServiceOrderProductTypes.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.ServiceOrderStatus")]
	[DataContract()]
	public partial class ServiceOrderStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ServiceOrderStatusId;
		
		private string _Name;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<ServiceOrder> _ServiceOrders;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnServiceOrderStatusIdChanging(int value);
    partial void OnServiceOrderStatusIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public ServiceOrderStatus()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ServiceOrderStatusId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int ServiceOrderStatusId
		{
			get
			{
				return this._ServiceOrderStatusId;
			}
			set
			{
				if ((this._ServiceOrderStatusId != value))
				{
					this.OnServiceOrderStatusIdChanging(value);
					this.SendPropertyChanging();
					this._ServiceOrderStatusId = value;
					this.SendPropertyChanged("ServiceOrderStatusId");
					this.OnServiceOrderStatusIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(128) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="ServiceOrderStatus_ServiceOrder", Storage="_ServiceOrders", ThisKey="ServiceOrderStatusId", OtherKey="ServiceOrderStatusId")]
		[DataMember(Order=3, EmitDefaultValue=false)]
		public EntitySet<ServiceOrder> ServiceOrders
		{
			get
			{
				if ((this.serializing 
							&& (this._ServiceOrders.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ServiceOrders;
			}
			set
			{
				this._ServiceOrders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ServiceOrders(ServiceOrder entity)
		{
			this.SendPropertyChanging();
			entity.ServiceOrderStatus = this;
		}
		
		private void detach_ServiceOrders(ServiceOrder entity)
		{
			this.SendPropertyChanging();
			entity.ServiceOrderStatus = null;
		}
		
		private void Initialize()
		{
			this._ServiceOrders = new EntitySet<ServiceOrder>(new Action<ServiceOrder>(this.attach_ServiceOrders), new Action<ServiceOrder>(this.detach_ServiceOrders));
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.ServiceOrderTests")]
	[DataContract()]
	public partial class ServiceOrderTest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ServiceOrderTestId;
		
		private string _Name;
		
		private int _CompanyId;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Company> _Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnServiceOrderTestIdChanging(int value);
    partial void OnServiceOrderTestIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    #endregion
		
		public ServiceOrderTest()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ServiceOrderTestId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int ServiceOrderTestId
		{
			get
			{
				return this._ServiceOrderTestId;
			}
			set
			{
				if ((this._ServiceOrderTestId != value))
				{
					this.OnServiceOrderTestIdChanging(value);
					this.SendPropertyChanging();
					this._ServiceOrderTestId = value;
					this.SendPropertyChanged("ServiceOrderTestId");
					this.OnServiceOrderTestIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(120)")]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=3)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Association(Name="Company_ServiceOrderTest", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.ServiceOrderTests.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.ServiceOrderTests.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.ServiceOrderType")]
	[DataContract()]
	public partial class ServiceOrderType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ServiceOrderTypeId;
		
		private string _Name;
		
		private System.Nullable<int> _CompanyId;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<ServiceOrder> _ServiceOrders;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Company> _Company;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnServiceOrderTypeIdChanging(int value);
    partial void OnServiceOrderTypeIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCompanyIdChanging(System.Nullable<int> value);
    partial void OnCompanyIdChanged();
    #endregion
		
		public ServiceOrderType()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ServiceOrderTypeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int ServiceOrderTypeId
		{
			get
			{
				return this._ServiceOrderTypeId;
			}
			set
			{
				if ((this._ServiceOrderTypeId != value))
				{
					this.OnServiceOrderTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ServiceOrderTypeId = value;
					this.SendPropertyChanged("ServiceOrderTypeId");
					this.OnServiceOrderTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(128) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int")]
		[DataMember(Order=3)]
		public System.Nullable<int> CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Association(Name="ServiceOrderType_ServiceOrder", Storage="_ServiceOrders", ThisKey="ServiceOrderTypeId", OtherKey="ServiceOrderTypeId")]
		[DataMember(Order=4, EmitDefaultValue=false)]
		public EntitySet<ServiceOrder> ServiceOrders
		{
			get
			{
				if ((this.serializing 
							&& (this._ServiceOrders.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ServiceOrders;
			}
			set
			{
				this._ServiceOrders.Assign(value);
			}
		}
		
		[Association(Name="Company_ServiceOrderType", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.ServiceOrderTypes.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.ServiceOrderTypes.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ServiceOrders(ServiceOrder entity)
		{
			this.SendPropertyChanging();
			entity.ServiceOrderType = this;
		}
		
		private void detach_ServiceOrders(ServiceOrder entity)
		{
			this.SendPropertyChanging();
			entity.ServiceOrderType = null;
		}
		
		private void Initialize()
		{
			this._ServiceOrders = new EntitySet<ServiceOrder>(new Action<ServiceOrder>(this.attach_ServiceOrders), new Action<ServiceOrder>(this.detach_ServiceOrders));
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.ServiceType")]
	[DataContract()]
	public partial class ServiceType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ServiceTypeId;
		
		private string _Name;
		
		private System.Nullable<int> _CompanyId;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Company> _Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnServiceTypeIdChanging(int value);
    partial void OnServiceTypeIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCompanyIdChanging(System.Nullable<int> value);
    partial void OnCompanyIdChanged();
    #endregion
		
		public ServiceType()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ServiceTypeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int ServiceTypeId
		{
			get
			{
				return this._ServiceTypeId;
			}
			set
			{
				if ((this._ServiceTypeId != value))
				{
					this.OnServiceTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ServiceTypeId = value;
					this.SendPropertyChanged("ServiceTypeId");
					this.OnServiceTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(120) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int")]
		[DataMember(Order=3)]
		public System.Nullable<int> CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Association(Name="Company_ServiceType", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true, DeleteRule="CASCADE")]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.ServiceTypes.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.ServiceTypes.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.Sex")]
	[DataContract()]
	public partial class Sex : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SexId;
		
		private string _Name;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Profile> _Profiles;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSexIdChanging(int value);
    partial void OnSexIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Sex()
		{
			this.Initialize();
		}
		
		[Column(Storage="_SexId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int SexId
		{
			get
			{
				return this._SexId;
			}
			set
			{
				if ((this._SexId != value))
				{
					this.OnSexIdChanging(value);
					this.SendPropertyChanging();
					this._SexId = value;
					this.SendPropertyChanged("SexId");
					this.OnSexIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="Sex_Profile", Storage="_Profiles", ThisKey="SexId", OtherKey="SexId")]
		[DataMember(Order=3, EmitDefaultValue=false)]
		public EntitySet<Profile> Profiles
		{
			get
			{
				if ((this.serializing 
							&& (this._Profiles.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Profiles;
			}
			set
			{
				this._Profiles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Profiles(Profile entity)
		{
			this.SendPropertyChanging();
			entity.Sex = this;
		}
		
		private void detach_Profiles(Profile entity)
		{
			this.SendPropertyChanging();
			entity.Sex = null;
		}
		
		private void Initialize()
		{
			this._Profiles = new EntitySet<Profile>(new Action<Profile>(this.attach_Profiles), new Action<Profile>(this.detach_Profiles));
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.Shift")]
	[DataContract()]
	public partial class Shift : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ShiftId;
		
		private string _Name;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Employee> _Employees;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnShiftIdChanging(int value);
    partial void OnShiftIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Shift()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ShiftId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int ShiftId
		{
			get
			{
				return this._ShiftId;
			}
			set
			{
				if ((this._ShiftId != value))
				{
					this.OnShiftIdChanging(value);
					this.SendPropertyChanging();
					this._ShiftId = value;
					this.SendPropertyChanged("ShiftId");
					this.OnShiftIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="Shift_Employee", Storage="_Employees", ThisKey="ShiftId", OtherKey="ShiftId")]
		[DataMember(Order=3, EmitDefaultValue=false)]
		public EntitySet<Employee> Employees
		{
			get
			{
				if ((this.serializing 
							&& (this._Employees.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Shift = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Shift = null;
		}
		
		private void Initialize()
		{
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.State")]
	[DataContract()]
	public partial class State : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _StateId;
		
		private string _Name;
		
		private System.DateTime _ModifiedDate;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<City> _Cities;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Transporter> _Transporters;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStateIdChanging(string value);
    partial void OnStateIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public State()
		{
			this.Initialize();
		}
		
		[Column(Storage="_StateId", DbType="Char(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		[DataMember(Order=1)]
		public string StateId
		{
			get
			{
				return this._StateId;
			}
			set
			{
				if ((this._StateId != value))
				{
					this.OnStateIdChanging(value);
					this.SendPropertyChanging();
					this._StateId = value;
					this.SendPropertyChanged("StateId");
					this.OnStateIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		[DataMember(Order=3)]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Association(Name="State_City", Storage="_Cities", ThisKey="StateId", OtherKey="StateId")]
		[DataMember(Order=4, EmitDefaultValue=false)]
		public EntitySet<City> Cities
		{
			get
			{
				if ((this.serializing 
							&& (this._Cities.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Cities;
			}
			set
			{
				this._Cities.Assign(value);
			}
		}
		
		[Association(Name="State_Transporter", Storage="_Transporters", ThisKey="StateId", OtherKey="StateId")]
		[DataMember(Order=5, EmitDefaultValue=false)]
		public EntitySet<Transporter> Transporters
		{
			get
			{
				if ((this.serializing 
							&& (this._Transporters.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Transporters;
			}
			set
			{
				this._Transporters.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cities(City entity)
		{
			this.SendPropertyChanging();
			entity.State = this;
		}
		
		private void detach_Cities(City entity)
		{
			this.SendPropertyChanging();
			entity.State = null;
		}
		
		private void attach_Transporters(Transporter entity)
		{
			this.SendPropertyChanging();
			entity.State = this;
		}
		
		private void detach_Transporters(Transporter entity)
		{
			this.SendPropertyChanging();
			entity.State = null;
		}
		
		private void Initialize()
		{
			this._Cities = new EntitySet<City>(new Action<City>(this.attach_Cities), new Action<City>(this.detach_Cities));
			this._Transporters = new EntitySet<Transporter>(new Action<Transporter>(this.attach_Transporters), new Action<Transporter>(this.detach_Transporters));
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.Statement")]
	[DataContract()]
	public partial class Statement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StatementId;
		
		private string _Name;
		
		private string _BoletusNumber;
		
		private System.DateTime _PeriodBegin;
		
		private System.DateTime _PeriodEnd;
		
		private decimal _StatementTotal;
		
		private System.Nullable<int> _HostCompanyId;
		
		private System.Nullable<int> _BillId;
		
		private System.Nullable<int> _HostInvoiceId;
		
		private int _CompanyId;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<StatementItem> _StatementItems;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Company> _Company;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Bill> _Bill;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Invoice> _Invoice;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStatementIdChanging(int value);
    partial void OnStatementIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnBoletusNumberChanging(string value);
    partial void OnBoletusNumberChanged();
    partial void OnPeriodBeginChanging(System.DateTime value);
    partial void OnPeriodBeginChanged();
    partial void OnPeriodEndChanging(System.DateTime value);
    partial void OnPeriodEndChanged();
    partial void OnStatementTotalChanging(decimal value);
    partial void OnStatementTotalChanged();
    partial void OnHostCompanyIdChanging(System.Nullable<int> value);
    partial void OnHostCompanyIdChanged();
    partial void OnBillIdChanging(System.Nullable<int> value);
    partial void OnBillIdChanged();
    partial void OnHostInvoiceIdChanging(System.Nullable<int> value);
    partial void OnHostInvoiceIdChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    #endregion
		
		public Statement()
		{
			this.Initialize();
		}
		
		[Column(Storage="_StatementId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int StatementId
		{
			get
			{
				return this._StatementId;
			}
			set
			{
				if ((this._StatementId != value))
				{
					this.OnStatementIdChanging(value);
					this.SendPropertyChanging();
					this._StatementId = value;
					this.SendPropertyChanged("StatementId");
					this.OnStatementIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_BoletusNumber", DbType="VarChar(50)")]
		[DataMember(Order=3)]
		public string BoletusNumber
		{
			get
			{
				return this._BoletusNumber;
			}
			set
			{
				if ((this._BoletusNumber != value))
				{
					this.OnBoletusNumberChanging(value);
					this.SendPropertyChanging();
					this._BoletusNumber = value;
					this.SendPropertyChanged("BoletusNumber");
					this.OnBoletusNumberChanged();
				}
			}
		}
		
		[Column(Storage="_PeriodBegin", DbType="DateTime NOT NULL")]
		[DataMember(Order=4)]
		public System.DateTime PeriodBegin
		{
			get
			{
				return this._PeriodBegin;
			}
			set
			{
				if ((this._PeriodBegin != value))
				{
					this.OnPeriodBeginChanging(value);
					this.SendPropertyChanging();
					this._PeriodBegin = value;
					this.SendPropertyChanged("PeriodBegin");
					this.OnPeriodBeginChanged();
				}
			}
		}
		
		[Column(Storage="_PeriodEnd", DbType="DateTime NOT NULL")]
		[DataMember(Order=5)]
		public System.DateTime PeriodEnd
		{
			get
			{
				return this._PeriodEnd;
			}
			set
			{
				if ((this._PeriodEnd != value))
				{
					this.OnPeriodEndChanging(value);
					this.SendPropertyChanging();
					this._PeriodEnd = value;
					this.SendPropertyChanged("PeriodEnd");
					this.OnPeriodEndChanged();
				}
			}
		}
		
		[Column(Storage="_StatementTotal", DbType="Decimal(18,2) NOT NULL")]
		[DataMember(Order=6)]
		public decimal StatementTotal
		{
			get
			{
				return this._StatementTotal;
			}
			set
			{
				if ((this._StatementTotal != value))
				{
					this.OnStatementTotalChanging(value);
					this.SendPropertyChanging();
					this._StatementTotal = value;
					this.SendPropertyChanged("StatementTotal");
					this.OnStatementTotalChanged();
				}
			}
		}
		
		[Column(Storage="_HostCompanyId", DbType="Int")]
		[DataMember(Order=7)]
		public System.Nullable<int> HostCompanyId
		{
			get
			{
				return this._HostCompanyId;
			}
			set
			{
				if ((this._HostCompanyId != value))
				{
					this.OnHostCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._HostCompanyId = value;
					this.SendPropertyChanged("HostCompanyId");
					this.OnHostCompanyIdChanged();
				}
			}
		}
		
		[Column(Storage="_BillId", DbType="Int")]
		[DataMember(Order=8)]
		public System.Nullable<int> BillId
		{
			get
			{
				return this._BillId;
			}
			set
			{
				if ((this._BillId != value))
				{
					if (this._Bill.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBillIdChanging(value);
					this.SendPropertyChanging();
					this._BillId = value;
					this.SendPropertyChanged("BillId");
					this.OnBillIdChanged();
				}
			}
		}
		
		[Column(Storage="_HostInvoiceId", DbType="Int")]
		[DataMember(Order=9)]
		public System.Nullable<int> HostInvoiceId
		{
			get
			{
				return this._HostInvoiceId;
			}
			set
			{
				if ((this._HostInvoiceId != value))
				{
					if (this._Invoice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHostInvoiceIdChanging(value);
					this.SendPropertyChanging();
					this._HostInvoiceId = value;
					this.SendPropertyChanged("HostInvoiceId");
					this.OnHostInvoiceIdChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=10)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Association(Name="Statement_StatementItem", Storage="_StatementItems", ThisKey="StatementId", OtherKey="StatementId")]
		[DataMember(Order=11, EmitDefaultValue=false)]
		public EntitySet<StatementItem> StatementItems
		{
			get
			{
				if ((this.serializing 
							&& (this._StatementItems.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._StatementItems;
			}
			set
			{
				this._StatementItems.Assign(value);
			}
		}
		
		[Association(Name="Company_Statement", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Statements.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Statements.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[Association(Name="Bill_Statement", Storage="_Bill", ThisKey="BillId,CompanyId", OtherKey="BillId,CompanyId", IsForeignKey=true)]
		public Bill Bill
		{
			get
			{
				return this._Bill.Entity;
			}
			set
			{
				Bill previousValue = this._Bill.Entity;
				if (((previousValue != value) 
							|| (this._Bill.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bill.Entity = null;
						previousValue.Statements.Remove(this);
					}
					this._Bill.Entity = value;
					if ((value != null))
					{
						value.Statements.Add(this);
						this._BillId = value.BillId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._BillId = default(Nullable<int>);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Bill");
				}
			}
		}
		
		[Association(Name="Invoice_Statement", Storage="_Invoice", ThisKey="HostInvoiceId,CompanyId", OtherKey="InvoiceId,CompanyId", IsForeignKey=true)]
		public Invoice Invoice
		{
			get
			{
				return this._Invoice.Entity;
			}
			set
			{
				Invoice previousValue = this._Invoice.Entity;
				if (((previousValue != value) 
							|| (this._Invoice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Invoice.Entity = null;
						previousValue.Statements.Remove(this);
					}
					this._Invoice.Entity = value;
					if ((value != null))
					{
						value.Statements.Add(this);
						this._HostInvoiceId = value.InvoiceId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._HostInvoiceId = default(Nullable<int>);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Invoice");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StatementItems(StatementItem entity)
		{
			this.SendPropertyChanging();
			entity.Statement = this;
		}
		
		private void detach_StatementItems(StatementItem entity)
		{
			this.SendPropertyChanging();
			entity.Statement = null;
		}
		
		private void Initialize()
		{
			this._StatementItems = new EntitySet<StatementItem>(new Action<StatementItem>(this.attach_StatementItems), new Action<StatementItem>(this.detach_StatementItems));
			this._Company = default(EntityRef<Company>);
			this._Bill = default(EntityRef<Bill>);
			this._Invoice = default(EntityRef<Invoice>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.StatementItem")]
	[DataContract()]
	public partial class StatementItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StatementItemId;
		
		private string _Name;
		
		private int _Quantity;
		
		private decimal _Value;
		
		private decimal _UnitCost;
		
		private int _StatementId;
		
		private int _CompanyId;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Statement> _Statement;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStatementItemIdChanging(int value);
    partial void OnStatementItemIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnValueChanging(decimal value);
    partial void OnValueChanged();
    partial void OnUnitCostChanging(decimal value);
    partial void OnUnitCostChanged();
    partial void OnStatementIdChanging(int value);
    partial void OnStatementIdChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    #endregion
		
		public StatementItem()
		{
			this.Initialize();
		}
		
		[Column(Storage="_StatementItemId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int StatementItemId
		{
			get
			{
				return this._StatementItemId;
			}
			set
			{
				if ((this._StatementItemId != value))
				{
					this.OnStatementItemIdChanging(value);
					this.SendPropertyChanging();
					this._StatementItemId = value;
					this.SendPropertyChanged("StatementItemId");
					this.OnStatementItemIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Quantity", DbType="Int NOT NULL")]
		[DataMember(Order=3)]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_Value", DbType="Decimal(18,2) NOT NULL")]
		[DataMember(Order=4)]
		public decimal Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[Column(Storage="_UnitCost", DbType="Decimal(18,2) NOT NULL")]
		[DataMember(Order=5)]
		public decimal UnitCost
		{
			get
			{
				return this._UnitCost;
			}
			set
			{
				if ((this._UnitCost != value))
				{
					this.OnUnitCostChanging(value);
					this.SendPropertyChanging();
					this._UnitCost = value;
					this.SendPropertyChanged("UnitCost");
					this.OnUnitCostChanged();
				}
			}
		}
		
		[Column(Storage="_StatementId", DbType="Int NOT NULL")]
		[DataMember(Order=6)]
		public int StatementId
		{
			get
			{
				return this._StatementId;
			}
			set
			{
				if ((this._StatementId != value))
				{
					if (this._Statement.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatementIdChanging(value);
					this.SendPropertyChanging();
					this._StatementId = value;
					this.SendPropertyChanged("StatementId");
					this.OnStatementIdChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL")]
		[DataMember(Order=7)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Association(Name="Statement_StatementItem", Storage="_Statement", ThisKey="StatementId", OtherKey="StatementId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Statement Statement
		{
			get
			{
				return this._Statement.Entity;
			}
			set
			{
				Statement previousValue = this._Statement.Entity;
				if (((previousValue != value) 
							|| (this._Statement.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Statement.Entity = null;
						previousValue.StatementItems.Remove(this);
					}
					this._Statement.Entity = value;
					if ((value != null))
					{
						value.StatementItems.Add(this);
						this._StatementId = value.StatementId;
					}
					else
					{
						this._StatementId = default(int);
					}
					this.SendPropertyChanged("Statement");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Statement = default(EntityRef<Statement>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.StatusHistory")]
	[DataContract()]
	public partial class StatusHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StatusHistoryId;
		
		private int _EmployeeStatusId;
		
		private System.Nullable<int> _AlienationId;
		
		private int _EmployeeId;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private int _CompanyId;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Alienation> _Alienation;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Company> _Company;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStatusHistoryIdChanging(int value);
    partial void OnStatusHistoryIdChanged();
    partial void OnEmployeeStatusIdChanging(int value);
    partial void OnEmployeeStatusIdChanged();
    partial void OnAlienationIdChanging(System.Nullable<int> value);
    partial void OnAlienationIdChanged();
    partial void OnEmployeeIdChanging(int value);
    partial void OnEmployeeIdChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    #endregion
		
		public StatusHistory()
		{
			this.Initialize();
		}
		
		[Column(Storage="_StatusHistoryId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int StatusHistoryId
		{
			get
			{
				return this._StatusHistoryId;
			}
			set
			{
				if ((this._StatusHistoryId != value))
				{
					this.OnStatusHistoryIdChanging(value);
					this.SendPropertyChanging();
					this._StatusHistoryId = value;
					this.SendPropertyChanged("StatusHistoryId");
					this.OnStatusHistoryIdChanged();
				}
			}
		}
		
		[Column(Storage="_EmployeeStatusId", DbType="Int NOT NULL")]
		[DataMember(Order=2)]
		public int EmployeeStatusId
		{
			get
			{
				return this._EmployeeStatusId;
			}
			set
			{
				if ((this._EmployeeStatusId != value))
				{
					this.OnEmployeeStatusIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeStatusId = value;
					this.SendPropertyChanged("EmployeeStatusId");
					this.OnEmployeeStatusIdChanged();
				}
			}
		}
		
		[Column(Storage="_AlienationId", DbType="Int")]
		[DataMember(Order=3)]
		public System.Nullable<int> AlienationId
		{
			get
			{
				return this._AlienationId;
			}
			set
			{
				if ((this._AlienationId != value))
				{
					if (this._Alienation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAlienationIdChanging(value);
					this.SendPropertyChanging();
					this._AlienationId = value;
					this.SendPropertyChanged("AlienationId");
					this.OnAlienationIdChanged();
				}
			}
		}
		
		[Column(Storage="_EmployeeId", DbType="Int NOT NULL")]
		[DataMember(Order=4)]
		public int EmployeeId
		{
			get
			{
				return this._EmployeeId;
			}
			set
			{
				if ((this._EmployeeId != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeId = value;
					this.SendPropertyChanged("EmployeeId");
					this.OnEmployeeIdChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime")]
		[DataMember(Order=5)]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL")]
		[DataMember(Order=6)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Association(Name="Alienation_StatusHistory", Storage="_Alienation", ThisKey="AlienationId", OtherKey="AlienationId", IsForeignKey=true)]
		public Alienation Alienation
		{
			get
			{
				return this._Alienation.Entity;
			}
			set
			{
				Alienation previousValue = this._Alienation.Entity;
				if (((previousValue != value) 
							|| (this._Alienation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Alienation.Entity = null;
						previousValue.StatusHistories.Remove(this);
					}
					this._Alienation.Entity = value;
					if ((value != null))
					{
						value.StatusHistories.Add(this);
						this._AlienationId = value.AlienationId;
					}
					else
					{
						this._AlienationId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Alienation");
				}
			}
		}
		
		[Association(Name="Company_StatusHistory", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.StatusHistories.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.StatusHistories.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[Association(Name="Employee_StatusHistory", Storage="_Employee", ThisKey="EmployeeId,CompanyId", OtherKey="EmployeeId,CompanyId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.StatusHistories.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.StatusHistories.Add(this);
						this._EmployeeId = value.EmployeeId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._EmployeeId = default(int);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Alienation = default(EntityRef<Alienation>);
			this._Company = default(EntityRef<Company>);
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.Supplier")]
	[DataContract()]
	public partial class Supplier : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SupplierId;
		
		private System.DateTime _ModifiedDate;
		
		private string _PostalCode;
		
		private System.Nullable<int> _ProfileId;
		
		private System.Nullable<int> _LegalEntityProfileId;
		
		private int _CompanyId;
		
		private System.Nullable<int> _BankId;
		
		private string _AccountNumber;
		
		private string _Agency;
		
		private System.Nullable<System.DateTime> _AccountCreatedDate;
		
		private System.Nullable<int> _Ranking;
		
		private System.Nullable<int> _SupplierCategoryId;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private string _CreatedByUser;
		
		private string _ModifiedByUser;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Bill> _Bills;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Employee> _Employees;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Employee> _Employees1;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Employee> _Employees2;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Employee> _Employees3;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Employee> _Employees4;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Inventory> _Inventories;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<InventoryRMA> _InventoryRMAs;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<PurchaseOrder> _PurchaseOrders;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Quotation> _Quotations;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Receipt> _Receipts;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<SupplierContact> _SupplierContacts;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Company> _Company;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Address> _Address;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Profile> _Profile;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<LegalEntityProfile> _LegalEntityProfile;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Bank> _Bank;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<SupplierCategory> _SupplierCategory;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSupplierIdChanging(int value);
    partial void OnSupplierIdChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnPostalCodeChanging(string value);
    partial void OnPostalCodeChanged();
    partial void OnProfileIdChanging(System.Nullable<int> value);
    partial void OnProfileIdChanged();
    partial void OnLegalEntityProfileIdChanging(System.Nullable<int> value);
    partial void OnLegalEntityProfileIdChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnBankIdChanging(System.Nullable<int> value);
    partial void OnBankIdChanged();
    partial void OnAccountNumberChanging(string value);
    partial void OnAccountNumberChanged();
    partial void OnAgencyChanging(string value);
    partial void OnAgencyChanged();
    partial void OnAccountCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAccountCreatedDateChanged();
    partial void OnRankingChanging(System.Nullable<int> value);
    partial void OnRankingChanged();
    partial void OnSupplierCategoryIdChanging(System.Nullable<int> value);
    partial void OnSupplierCategoryIdChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnCreatedByUserChanging(string value);
    partial void OnCreatedByUserChanged();
    partial void OnModifiedByUserChanging(string value);
    partial void OnModifiedByUserChanged();
    #endregion
		
		public Supplier()
		{
			this.Initialize();
		}
		
		[Column(Storage="_SupplierId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int SupplierId
		{
			get
			{
				return this._SupplierId;
			}
			set
			{
				if ((this._SupplierId != value))
				{
					this.OnSupplierIdChanging(value);
					this.SendPropertyChanging();
					this._SupplierId = value;
					this.SendPropertyChanged("SupplierId");
					this.OnSupplierIdChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		[DataMember(Order=2)]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_PostalCode", DbType="Char(8)")]
		[DataMember(Order=3)]
		public string PostalCode
		{
			get
			{
				return this._PostalCode;
			}
			set
			{
				if ((this._PostalCode != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPostalCodeChanging(value);
					this.SendPropertyChanging();
					this._PostalCode = value;
					this.SendPropertyChanged("PostalCode");
					this.OnPostalCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ProfileId", DbType="Int")]
		[DataMember(Order=4)]
		public System.Nullable<int> ProfileId
		{
			get
			{
				return this._ProfileId;
			}
			set
			{
				if ((this._ProfileId != value))
				{
					if (this._Profile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProfileIdChanging(value);
					this.SendPropertyChanging();
					this._ProfileId = value;
					this.SendPropertyChanged("ProfileId");
					this.OnProfileIdChanged();
				}
			}
		}
		
		[Column(Storage="_LegalEntityProfileId", DbType="Int")]
		[DataMember(Order=5)]
		public System.Nullable<int> LegalEntityProfileId
		{
			get
			{
				return this._LegalEntityProfileId;
			}
			set
			{
				if ((this._LegalEntityProfileId != value))
				{
					if (this._LegalEntityProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLegalEntityProfileIdChanging(value);
					this.SendPropertyChanging();
					this._LegalEntityProfileId = value;
					this.SendPropertyChanged("LegalEntityProfileId");
					this.OnLegalEntityProfileIdChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL")]
		[DataMember(Order=6)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Column(Storage="_BankId", DbType="Int")]
		[DataMember(Order=7)]
		public System.Nullable<int> BankId
		{
			get
			{
				return this._BankId;
			}
			set
			{
				if ((this._BankId != value))
				{
					if (this._Bank.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBankIdChanging(value);
					this.SendPropertyChanging();
					this._BankId = value;
					this.SendPropertyChanged("BankId");
					this.OnBankIdChanged();
				}
			}
		}
		
		[Column(Storage="_AccountNumber", DbType="VarChar(10)")]
		[DataMember(Order=8)]
		public string AccountNumber
		{
			get
			{
				return this._AccountNumber;
			}
			set
			{
				if ((this._AccountNumber != value))
				{
					this.OnAccountNumberChanging(value);
					this.SendPropertyChanging();
					this._AccountNumber = value;
					this.SendPropertyChanged("AccountNumber");
					this.OnAccountNumberChanged();
				}
			}
		}
		
		[Column(Storage="_Agency", DbType="VarChar(10)")]
		[DataMember(Order=9)]
		public string Agency
		{
			get
			{
				return this._Agency;
			}
			set
			{
				if ((this._Agency != value))
				{
					this.OnAgencyChanging(value);
					this.SendPropertyChanging();
					this._Agency = value;
					this.SendPropertyChanged("Agency");
					this.OnAgencyChanged();
				}
			}
		}
		
		[Column(Storage="_AccountCreatedDate", DbType="DateTime")]
		[DataMember(Order=10)]
		public System.Nullable<System.DateTime> AccountCreatedDate
		{
			get
			{
				return this._AccountCreatedDate;
			}
			set
			{
				if ((this._AccountCreatedDate != value))
				{
					this.OnAccountCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._AccountCreatedDate = value;
					this.SendPropertyChanged("AccountCreatedDate");
					this.OnAccountCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_Ranking", DbType="Int")]
		[DataMember(Order=11)]
		public System.Nullable<int> Ranking
		{
			get
			{
				return this._Ranking;
			}
			set
			{
				if ((this._Ranking != value))
				{
					this.OnRankingChanging(value);
					this.SendPropertyChanging();
					this._Ranking = value;
					this.SendPropertyChanged("Ranking");
					this.OnRankingChanged();
				}
			}
		}
		
		[Column(Storage="_SupplierCategoryId", DbType="Int")]
		[DataMember(Order=12)]
		public System.Nullable<int> SupplierCategoryId
		{
			get
			{
				return this._SupplierCategoryId;
			}
			set
			{
				if ((this._SupplierCategoryId != value))
				{
					if (this._SupplierCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSupplierCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._SupplierCategoryId = value;
					this.SendPropertyChanged("SupplierCategoryId");
					this.OnSupplierCategoryIdChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime")]
		[DataMember(Order=13)]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedByUser", DbType="VarChar(50)")]
		[DataMember(Order=14)]
		public string CreatedByUser
		{
			get
			{
				return this._CreatedByUser;
			}
			set
			{
				if ((this._CreatedByUser != value))
				{
					this.OnCreatedByUserChanging(value);
					this.SendPropertyChanging();
					this._CreatedByUser = value;
					this.SendPropertyChanged("CreatedByUser");
					this.OnCreatedByUserChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedByUser", DbType="VarChar(50)")]
		[DataMember(Order=15)]
		public string ModifiedByUser
		{
			get
			{
				return this._ModifiedByUser;
			}
			set
			{
				if ((this._ModifiedByUser != value))
				{
					this.OnModifiedByUserChanging(value);
					this.SendPropertyChanging();
					this._ModifiedByUser = value;
					this.SendPropertyChanged("ModifiedByUser");
					this.OnModifiedByUserChanged();
				}
			}
		}
		
		[Association(Name="Supplier_Bill", Storage="_Bills", ThisKey="SupplierId", OtherKey="SupplierId")]
		[DataMember(Order=16, EmitDefaultValue=false)]
		public EntitySet<Bill> Bills
		{
			get
			{
				if ((this.serializing 
							&& (this._Bills.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Bills;
			}
			set
			{
				this._Bills.Assign(value);
			}
		}
		
		[Association(Name="Supplier_Employee", Storage="_Employees", ThisKey="SupplierId", OtherKey="SindicalContributionId")]
		[DataMember(Order=17, EmitDefaultValue=false)]
		public EntitySet<Employee> Employees
		{
			get
			{
				if ((this.serializing 
							&& (this._Employees.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		[Association(Name="Supplier_Employee1", Storage="_Employees1", ThisKey="SupplierId", OtherKey="ConfederacyContributionId")]
		[DataMember(Order=18, EmitDefaultValue=false)]
		public EntitySet<Employee> Employees1
		{
			get
			{
				if ((this.serializing 
							&& (this._Employees1.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Employees1;
			}
			set
			{
				this._Employees1.Assign(value);
			}
		}
		
		[Association(Name="Supplier_Employee2", Storage="_Employees2", ThisKey="SupplierId", OtherKey="SupportContributionId")]
		[DataMember(Order=19, EmitDefaultValue=false)]
		public EntitySet<Employee> Employees2
		{
			get
			{
				if ((this.serializing 
							&& (this._Employees2.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Employees2;
			}
			set
			{
				this._Employees2.Assign(value);
			}
		}
		
		[Association(Name="Supplier_Employee3", Storage="_Employees3", ThisKey="SupplierId", OtherKey="AssociatedContribution1Id")]
		[DataMember(Order=20, EmitDefaultValue=false)]
		public EntitySet<Employee> Employees3
		{
			get
			{
				if ((this.serializing 
							&& (this._Employees3.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Employees3;
			}
			set
			{
				this._Employees3.Assign(value);
			}
		}
		
		[Association(Name="Supplier_Employee4", Storage="_Employees4", ThisKey="SupplierId", OtherKey="AssociatedContribution2Id")]
		[DataMember(Order=21, EmitDefaultValue=false)]
		public EntitySet<Employee> Employees4
		{
			get
			{
				if ((this.serializing 
							&& (this._Employees4.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Employees4;
			}
			set
			{
				this._Employees4.Assign(value);
			}
		}
		
		[Association(Name="Supplier_Inventory", Storage="_Inventories", ThisKey="SupplierId", OtherKey="SupplierId")]
		[DataMember(Order=22, EmitDefaultValue=false)]
		public EntitySet<Inventory> Inventories
		{
			get
			{
				if ((this.serializing 
							&& (this._Inventories.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Inventories;
			}
			set
			{
				this._Inventories.Assign(value);
			}
		}
		
		[Association(Name="Supplier_InventoryRMA", Storage="_InventoryRMAs", ThisKey="SupplierId", OtherKey="SupplierId")]
		[DataMember(Order=23, EmitDefaultValue=false)]
		public EntitySet<InventoryRMA> InventoryRMAs
		{
			get
			{
				if ((this.serializing 
							&& (this._InventoryRMAs.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._InventoryRMAs;
			}
			set
			{
				this._InventoryRMAs.Assign(value);
			}
		}
		
		[Association(Name="Supplier_PurchaseOrder", Storage="_PurchaseOrders", ThisKey="SupplierId", OtherKey="SupplierId")]
		[DataMember(Order=24, EmitDefaultValue=false)]
		public EntitySet<PurchaseOrder> PurchaseOrders
		{
			get
			{
				if ((this.serializing 
							&& (this._PurchaseOrders.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._PurchaseOrders;
			}
			set
			{
				this._PurchaseOrders.Assign(value);
			}
		}
		
		[Association(Name="Supplier_Quotation", Storage="_Quotations", ThisKey="SupplierId", OtherKey="SupplierId")]
		[DataMember(Order=25, EmitDefaultValue=false)]
		public EntitySet<Quotation> Quotations
		{
			get
			{
				if ((this.serializing 
							&& (this._Quotations.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Quotations;
			}
			set
			{
				this._Quotations.Assign(value);
			}
		}
		
		[Association(Name="Supplier_Receipt", Storage="_Receipts", ThisKey="SupplierId", OtherKey="SupplierId")]
		[DataMember(Order=26, EmitDefaultValue=false)]
		public EntitySet<Receipt> Receipts
		{
			get
			{
				if ((this.serializing 
							&& (this._Receipts.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Receipts;
			}
			set
			{
				this._Receipts.Assign(value);
			}
		}
		
		[Association(Name="Supplier_SupplierContact", Storage="_SupplierContacts", ThisKey="SupplierId", OtherKey="SupplierId")]
		[DataMember(Order=27, EmitDefaultValue=false)]
		public EntitySet<SupplierContact> SupplierContacts
		{
			get
			{
				if ((this.serializing 
							&& (this._SupplierContacts.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._SupplierContacts;
			}
			set
			{
				this._SupplierContacts.Assign(value);
			}
		}
		
		[Association(Name="Company_Supplier", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Suppliers.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Suppliers.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[Association(Name="Address_Supplier", Storage="_Address", ThisKey="PostalCode", OtherKey="PostalCode", IsForeignKey=true)]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.Suppliers.Remove(this);
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.Suppliers.Add(this);
						this._PostalCode = value.PostalCode;
					}
					else
					{
						this._PostalCode = default(string);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		[Association(Name="Profile_Supplier", Storage="_Profile", ThisKey="ProfileId", OtherKey="ProfileId", IsForeignKey=true)]
		public Profile Profile
		{
			get
			{
				return this._Profile.Entity;
			}
			set
			{
				Profile previousValue = this._Profile.Entity;
				if (((previousValue != value) 
							|| (this._Profile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Profile.Entity = null;
						previousValue.Suppliers.Remove(this);
					}
					this._Profile.Entity = value;
					if ((value != null))
					{
						value.Suppliers.Add(this);
						this._ProfileId = value.ProfileId;
					}
					else
					{
						this._ProfileId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Profile");
				}
			}
		}
		
		[Association(Name="LegalEntityProfile_Supplier", Storage="_LegalEntityProfile", ThisKey="LegalEntityProfileId", OtherKey="LegalEntityProfileId", IsForeignKey=true)]
		public LegalEntityProfile LegalEntityProfile
		{
			get
			{
				return this._LegalEntityProfile.Entity;
			}
			set
			{
				LegalEntityProfile previousValue = this._LegalEntityProfile.Entity;
				if (((previousValue != value) 
							|| (this._LegalEntityProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LegalEntityProfile.Entity = null;
						previousValue.Suppliers.Remove(this);
					}
					this._LegalEntityProfile.Entity = value;
					if ((value != null))
					{
						value.Suppliers.Add(this);
						this._LegalEntityProfileId = value.LegalEntityProfileId;
					}
					else
					{
						this._LegalEntityProfileId = default(Nullable<int>);
					}
					this.SendPropertyChanged("LegalEntityProfile");
				}
			}
		}
		
		[Association(Name="Bank_Supplier", Storage="_Bank", ThisKey="BankId", OtherKey="BankId", IsForeignKey=true)]
		public Bank Bank
		{
			get
			{
				return this._Bank.Entity;
			}
			set
			{
				Bank previousValue = this._Bank.Entity;
				if (((previousValue != value) 
							|| (this._Bank.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bank.Entity = null;
						previousValue.Suppliers.Remove(this);
					}
					this._Bank.Entity = value;
					if ((value != null))
					{
						value.Suppliers.Add(this);
						this._BankId = value.BankId;
					}
					else
					{
						this._BankId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Bank");
				}
			}
		}
		
		[Association(Name="SupplierCategory_Supplier", Storage="_SupplierCategory", ThisKey="SupplierCategoryId", OtherKey="SupplierCategoryId", IsForeignKey=true)]
		public SupplierCategory SupplierCategory
		{
			get
			{
				return this._SupplierCategory.Entity;
			}
			set
			{
				SupplierCategory previousValue = this._SupplierCategory.Entity;
				if (((previousValue != value) 
							|| (this._SupplierCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SupplierCategory.Entity = null;
						previousValue.Suppliers.Remove(this);
					}
					this._SupplierCategory.Entity = value;
					if ((value != null))
					{
						value.Suppliers.Add(this);
						this._SupplierCategoryId = value.SupplierCategoryId;
					}
					else
					{
						this._SupplierCategoryId = default(Nullable<int>);
					}
					this.SendPropertyChanged("SupplierCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Bills(Bill entity)
		{
			this.SendPropertyChanging();
			entity.Supplier = this;
		}
		
		private void detach_Bills(Bill entity)
		{
			this.SendPropertyChanging();
			entity.Supplier = null;
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Supplier = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Supplier = null;
		}
		
		private void attach_Employees1(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Supplier1 = this;
		}
		
		private void detach_Employees1(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Supplier1 = null;
		}
		
		private void attach_Employees2(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Supplier2 = this;
		}
		
		private void detach_Employees2(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Supplier2 = null;
		}
		
		private void attach_Employees3(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Supplier3 = this;
		}
		
		private void detach_Employees3(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Supplier3 = null;
		}
		
		private void attach_Employees4(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Supplier4 = this;
		}
		
		private void detach_Employees4(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Supplier4 = null;
		}
		
		private void attach_Inventories(Inventory entity)
		{
			this.SendPropertyChanging();
			entity.Supplier = this;
		}
		
		private void detach_Inventories(Inventory entity)
		{
			this.SendPropertyChanging();
			entity.Supplier = null;
		}
		
		private void attach_InventoryRMAs(InventoryRMA entity)
		{
			this.SendPropertyChanging();
			entity.Supplier = this;
		}
		
		private void detach_InventoryRMAs(InventoryRMA entity)
		{
			this.SendPropertyChanging();
			entity.Supplier = null;
		}
		
		private void attach_PurchaseOrders(PurchaseOrder entity)
		{
			this.SendPropertyChanging();
			entity.Supplier = this;
		}
		
		private void detach_PurchaseOrders(PurchaseOrder entity)
		{
			this.SendPropertyChanging();
			entity.Supplier = null;
		}
		
		private void attach_Quotations(Quotation entity)
		{
			this.SendPropertyChanging();
			entity.Supplier = this;
		}
		
		private void detach_Quotations(Quotation entity)
		{
			this.SendPropertyChanging();
			entity.Supplier = null;
		}
		
		private void attach_Receipts(Receipt entity)
		{
			this.SendPropertyChanging();
			entity.Supplier = this;
		}
		
		private void detach_Receipts(Receipt entity)
		{
			this.SendPropertyChanging();
			entity.Supplier = null;
		}
		
		private void attach_SupplierContacts(SupplierContact entity)
		{
			this.SendPropertyChanging();
			entity.Supplier = this;
		}
		
		private void detach_SupplierContacts(SupplierContact entity)
		{
			this.SendPropertyChanging();
			entity.Supplier = null;
		}
		
		private void Initialize()
		{
			this._Bills = new EntitySet<Bill>(new Action<Bill>(this.attach_Bills), new Action<Bill>(this.detach_Bills));
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			this._Employees1 = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees1), new Action<Employee>(this.detach_Employees1));
			this._Employees2 = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees2), new Action<Employee>(this.detach_Employees2));
			this._Employees3 = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees3), new Action<Employee>(this.detach_Employees3));
			this._Employees4 = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees4), new Action<Employee>(this.detach_Employees4));
			this._Inventories = new EntitySet<Inventory>(new Action<Inventory>(this.attach_Inventories), new Action<Inventory>(this.detach_Inventories));
			this._InventoryRMAs = new EntitySet<InventoryRMA>(new Action<InventoryRMA>(this.attach_InventoryRMAs), new Action<InventoryRMA>(this.detach_InventoryRMAs));
			this._PurchaseOrders = new EntitySet<PurchaseOrder>(new Action<PurchaseOrder>(this.attach_PurchaseOrders), new Action<PurchaseOrder>(this.detach_PurchaseOrders));
			this._Quotations = new EntitySet<Quotation>(new Action<Quotation>(this.attach_Quotations), new Action<Quotation>(this.detach_Quotations));
			this._Receipts = new EntitySet<Receipt>(new Action<Receipt>(this.attach_Receipts), new Action<Receipt>(this.detach_Receipts));
			this._SupplierContacts = new EntitySet<SupplierContact>(new Action<SupplierContact>(this.attach_SupplierContacts), new Action<SupplierContact>(this.detach_SupplierContacts));
			this._Company = default(EntityRef<Company>);
			this._Address = default(EntityRef<Address>);
			this._Profile = default(EntityRef<Profile>);
			this._LegalEntityProfile = default(EntityRef<LegalEntityProfile>);
			this._Bank = default(EntityRef<Bank>);
			this._SupplierCategory = default(EntityRef<SupplierCategory>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.SupplierCategory")]
	[DataContract()]
	public partial class SupplierCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SupplierCategoryId;
		
		private string _Name;
		
		private int _CompanyId;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Supplier> _Suppliers;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Company> _Company;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSupplierCategoryIdChanging(int value);
    partial void OnSupplierCategoryIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    #endregion
		
		public SupplierCategory()
		{
			this.Initialize();
		}
		
		[Column(Storage="_SupplierCategoryId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int SupplierCategoryId
		{
			get
			{
				return this._SupplierCategoryId;
			}
			set
			{
				if ((this._SupplierCategoryId != value))
				{
					this.OnSupplierCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._SupplierCategoryId = value;
					this.SendPropertyChanged("SupplierCategoryId");
					this.OnSupplierCategoryIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(1024) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL")]
		[DataMember(Order=3)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Association(Name="SupplierCategory_Supplier", Storage="_Suppliers", ThisKey="SupplierCategoryId", OtherKey="SupplierCategoryId")]
		[DataMember(Order=4, EmitDefaultValue=false)]
		public EntitySet<Supplier> Suppliers
		{
			get
			{
				if ((this.serializing 
							&& (this._Suppliers.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Suppliers;
			}
			set
			{
				this._Suppliers.Assign(value);
			}
		}
		
		[Association(Name="Company_SupplierCategory", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.SupplierCategories.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.SupplierCategories.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Suppliers(Supplier entity)
		{
			this.SendPropertyChanging();
			entity.SupplierCategory = this;
		}
		
		private void detach_Suppliers(Supplier entity)
		{
			this.SendPropertyChanging();
			entity.SupplierCategory = null;
		}
		
		private void Initialize()
		{
			this._Suppliers = new EntitySet<Supplier>(new Action<Supplier>(this.attach_Suppliers), new Action<Supplier>(this.detach_Suppliers));
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.SupplierContact")]
	[DataContract()]
	public partial class SupplierContact : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CompanyId;
		
		private int _ContactId;
		
		private int _SupplierId;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Contact> _Contact;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Supplier> _Supplier;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnContactIdChanging(int value);
    partial void OnContactIdChanged();
    partial void OnSupplierIdChanging(int value);
    partial void OnSupplierIdChanged();
    #endregion
		
		public SupplierContact()
		{
			this.Initialize();
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=1)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Column(Storage="_ContactId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=2)]
		public int ContactId
		{
			get
			{
				return this._ContactId;
			}
			set
			{
				if ((this._ContactId != value))
				{
					if (this._Contact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactIdChanging(value);
					this.SendPropertyChanging();
					this._ContactId = value;
					this.SendPropertyChanged("ContactId");
					this.OnContactIdChanged();
				}
			}
		}
		
		[Column(Storage="_SupplierId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=3)]
		public int SupplierId
		{
			get
			{
				return this._SupplierId;
			}
			set
			{
				if ((this._SupplierId != value))
				{
					if (this._Supplier.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSupplierIdChanging(value);
					this.SendPropertyChanging();
					this._SupplierId = value;
					this.SendPropertyChanged("SupplierId");
					this.OnSupplierIdChanged();
				}
			}
		}
		
		[Association(Name="Contact_SupplierContact", Storage="_Contact", ThisKey="ContactId", OtherKey="ContactId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value) 
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.SupplierContacts.Remove(this);
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.SupplierContacts.Add(this);
						this._ContactId = value.ContactId;
					}
					else
					{
						this._ContactId = default(int);
					}
					this.SendPropertyChanged("Contact");
				}
			}
		}
		
		[Association(Name="Supplier_SupplierContact", Storage="_Supplier", ThisKey="SupplierId", OtherKey="SupplierId", IsForeignKey=true)]
		public Supplier Supplier
		{
			get
			{
				return this._Supplier.Entity;
			}
			set
			{
				Supplier previousValue = this._Supplier.Entity;
				if (((previousValue != value) 
							|| (this._Supplier.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Supplier.Entity = null;
						previousValue.SupplierContacts.Remove(this);
					}
					this._Supplier.Entity = value;
					if ((value != null))
					{
						value.SupplierContacts.Add(this);
						this._SupplierId = value.SupplierId;
					}
					else
					{
						this._SupplierId = default(int);
					}
					this.SendPropertyChanged("Supplier");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Contact = default(EntityRef<Contact>);
			this._Supplier = default(EntityRef<Supplier>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.SystemParameters")]
	[DataContract()]
	public partial class SystemParameter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SystemParameterId;
		
		private string _Name;
		
		private string _Value;
		
		private string _Description;
		
		private string _InitialValue;
		
		private int _ApplicationId;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Application> _Application;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSystemParameterIdChanging(int value);
    partial void OnSystemParameterIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnInitialValueChanging(string value);
    partial void OnInitialValueChanged();
    partial void OnApplicationIdChanging(int value);
    partial void OnApplicationIdChanged();
    #endregion
		
		public SystemParameter()
		{
			this.Initialize();
		}
		
		[Column(Storage="_SystemParameterId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int SystemParameterId
		{
			get
			{
				return this._SystemParameterId;
			}
			set
			{
				if ((this._SystemParameterId != value))
				{
					this.OnSystemParameterIdChanging(value);
					this.SendPropertyChanging();
					this._SystemParameterId = value;
					this.SendPropertyChanged("SystemParameterId");
					this.OnSystemParameterIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Value", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		[DataMember(Order=3)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(1024)")]
		[DataMember(Order=4)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_InitialValue", DbType="VarChar(256)")]
		[DataMember(Order=5)]
		public string InitialValue
		{
			get
			{
				return this._InitialValue;
			}
			set
			{
				if ((this._InitialValue != value))
				{
					this.OnInitialValueChanging(value);
					this.SendPropertyChanging();
					this._InitialValue = value;
					this.SendPropertyChanged("InitialValue");
					this.OnInitialValueChanged();
				}
			}
		}
		
		[Column(Storage="_ApplicationId", DbType="Int NOT NULL")]
		[DataMember(Order=6)]
		public int ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					if (this._Application.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[Association(Name="Application_SystemParameter", Storage="_Application", ThisKey="ApplicationId", OtherKey="ApplicationId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Application Application
		{
			get
			{
				return this._Application.Entity;
			}
			set
			{
				Application previousValue = this._Application.Entity;
				if (((previousValue != value) 
							|| (this._Application.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Application.Entity = null;
						previousValue.SystemParameters.Remove(this);
					}
					this._Application.Entity = value;
					if ((value != null))
					{
						value.SystemParameters.Add(this);
						this._ApplicationId = value.ApplicationId;
					}
					else
					{
						this._ApplicationId = default(int);
					}
					this.SendPropertyChanged("Application");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Application = default(EntityRef<Application>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.Task")]
	[DataContract()]
	public partial class Task : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TaskId;
		
		private System.Nullable<int> _ParentTaskId;
		
		private string _Name;
		
		private string _Description;
		
		private System.Nullable<int> _CreatorUserId;
		
		private System.Nullable<System.DateTime> _Deadline;
		
		private System.Nullable<int> _Priority;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private System.Nullable<int> _TaskStatusId;
		
		private System.Nullable<System.DateTime> _FinishDate;
		
		private string _PageName;
		
		private System.Nullable<int> _SubjectId;
		
		private System.Nullable<int> _AlertMinutesBefore;
		
		private System.Nullable<decimal> _Cost;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Task> _Tasks;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<TaskUser> _TaskUsers;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Task> _Task1;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<TaskStatus> _TaskStatus;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<User> _User;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTaskIdChanging(int value);
    partial void OnTaskIdChanged();
    partial void OnParentTaskIdChanging(System.Nullable<int> value);
    partial void OnParentTaskIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCreatorUserIdChanging(System.Nullable<int> value);
    partial void OnCreatorUserIdChanged();
    partial void OnDeadlineChanging(System.Nullable<System.DateTime> value);
    partial void OnDeadlineChanged();
    partial void OnPriorityChanging(System.Nullable<int> value);
    partial void OnPriorityChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    partial void OnTaskStatusIdChanging(System.Nullable<int> value);
    partial void OnTaskStatusIdChanged();
    partial void OnFinishDateChanging(System.Nullable<System.DateTime> value);
    partial void OnFinishDateChanged();
    partial void OnPageNameChanging(string value);
    partial void OnPageNameChanged();
    partial void OnSubjectIdChanging(System.Nullable<int> value);
    partial void OnSubjectIdChanged();
    partial void OnAlertMinutesBeforeChanging(System.Nullable<int> value);
    partial void OnAlertMinutesBeforeChanged();
    partial void OnCostChanging(System.Nullable<decimal> value);
    partial void OnCostChanged();
    #endregion
		
		public Task()
		{
			this.Initialize();
		}
		
		[Column(Storage="_TaskId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int TaskId
		{
			get
			{
				return this._TaskId;
			}
			set
			{
				if ((this._TaskId != value))
				{
					this.OnTaskIdChanging(value);
					this.SendPropertyChanging();
					this._TaskId = value;
					this.SendPropertyChanged("TaskId");
					this.OnTaskIdChanged();
				}
			}
		}
		
		[Column(Storage="_ParentTaskId", DbType="Int")]
		[DataMember(Order=2)]
		public System.Nullable<int> ParentTaskId
		{
			get
			{
				return this._ParentTaskId;
			}
			set
			{
				if ((this._ParentTaskId != value))
				{
					if (this._Task1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentTaskIdChanging(value);
					this.SendPropertyChanging();
					this._ParentTaskId = value;
					this.SendPropertyChanged("ParentTaskId");
					this.OnParentTaskIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(128) NOT NULL", CanBeNull=false)]
		[DataMember(Order=3)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=4)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_CreatorUserId", DbType="Int")]
		[DataMember(Order=5)]
		public System.Nullable<int> CreatorUserId
		{
			get
			{
				return this._CreatorUserId;
			}
			set
			{
				if ((this._CreatorUserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorUserIdChanging(value);
					this.SendPropertyChanging();
					this._CreatorUserId = value;
					this.SendPropertyChanged("CreatorUserId");
					this.OnCreatorUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_Deadline", DbType="DateTime")]
		[DataMember(Order=6)]
		public System.Nullable<System.DateTime> Deadline
		{
			get
			{
				return this._Deadline;
			}
			set
			{
				if ((this._Deadline != value))
				{
					this.OnDeadlineChanging(value);
					this.SendPropertyChanging();
					this._Deadline = value;
					this.SendPropertyChanged("Deadline");
					this.OnDeadlineChanged();
				}
			}
		}
		
		[Column(Storage="_Priority", DbType="Int")]
		[DataMember(Order=7)]
		public System.Nullable<int> Priority
		{
			get
			{
				return this._Priority;
			}
			set
			{
				if ((this._Priority != value))
				{
					this.OnPriorityChanging(value);
					this.SendPropertyChanging();
					this._Priority = value;
					this.SendPropertyChanged("Priority");
					this.OnPriorityChanged();
				}
			}
		}
		
		[Column(Storage="_StartDate", DbType="DateTime")]
		[DataMember(Order=8)]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime")]
		[DataMember(Order=9)]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_TaskStatusId", DbType="Int")]
		[DataMember(Order=10)]
		public System.Nullable<int> TaskStatusId
		{
			get
			{
				return this._TaskStatusId;
			}
			set
			{
				if ((this._TaskStatusId != value))
				{
					if (this._TaskStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskStatusIdChanging(value);
					this.SendPropertyChanging();
					this._TaskStatusId = value;
					this.SendPropertyChanged("TaskStatusId");
					this.OnTaskStatusIdChanged();
				}
			}
		}
		
		[Column(Storage="_FinishDate", DbType="DateTime")]
		[DataMember(Order=11)]
		public System.Nullable<System.DateTime> FinishDate
		{
			get
			{
				return this._FinishDate;
			}
			set
			{
				if ((this._FinishDate != value))
				{
					this.OnFinishDateChanging(value);
					this.SendPropertyChanging();
					this._FinishDate = value;
					this.SendPropertyChanged("FinishDate");
					this.OnFinishDateChanged();
				}
			}
		}
		
		[Column(Storage="_PageName", DbType="VarChar(128)")]
		[DataMember(Order=12)]
		public string PageName
		{
			get
			{
				return this._PageName;
			}
			set
			{
				if ((this._PageName != value))
				{
					this.OnPageNameChanging(value);
					this.SendPropertyChanging();
					this._PageName = value;
					this.SendPropertyChanged("PageName");
					this.OnPageNameChanged();
				}
			}
		}
		
		[Column(Storage="_SubjectId", DbType="Int")]
		[DataMember(Order=13)]
		public System.Nullable<int> SubjectId
		{
			get
			{
				return this._SubjectId;
			}
			set
			{
				if ((this._SubjectId != value))
				{
					this.OnSubjectIdChanging(value);
					this.SendPropertyChanging();
					this._SubjectId = value;
					this.SendPropertyChanged("SubjectId");
					this.OnSubjectIdChanged();
				}
			}
		}
		
		[Column(Storage="_AlertMinutesBefore", DbType="Int")]
		[DataMember(Order=14)]
		public System.Nullable<int> AlertMinutesBefore
		{
			get
			{
				return this._AlertMinutesBefore;
			}
			set
			{
				if ((this._AlertMinutesBefore != value))
				{
					this.OnAlertMinutesBeforeChanging(value);
					this.SendPropertyChanging();
					this._AlertMinutesBefore = value;
					this.SendPropertyChanged("AlertMinutesBefore");
					this.OnAlertMinutesBeforeChanged();
				}
			}
		}
		
		[Column(Storage="_Cost", DbType="Decimal(18,2)")]
		[DataMember(Order=15)]
		public System.Nullable<decimal> Cost
		{
			get
			{
				return this._Cost;
			}
			set
			{
				if ((this._Cost != value))
				{
					this.OnCostChanging(value);
					this.SendPropertyChanging();
					this._Cost = value;
					this.SendPropertyChanged("Cost");
					this.OnCostChanged();
				}
			}
		}
		
		[Association(Name="Task_Task", Storage="_Tasks", ThisKey="TaskId", OtherKey="ParentTaskId")]
		[DataMember(Order=16, EmitDefaultValue=false)]
		public EntitySet<Task> Tasks
		{
			get
			{
				if ((this.serializing 
							&& (this._Tasks.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Tasks;
			}
			set
			{
				this._Tasks.Assign(value);
			}
		}
		
		[Association(Name="Task_TaskUser", Storage="_TaskUsers", ThisKey="TaskId", OtherKey="TaskId")]
		[DataMember(Order=17, EmitDefaultValue=false)]
		public EntitySet<TaskUser> TaskUsers
		{
			get
			{
				if ((this.serializing 
							&& (this._TaskUsers.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._TaskUsers;
			}
			set
			{
				this._TaskUsers.Assign(value);
			}
		}
		
		[Association(Name="Task_Task", Storage="_Task1", ThisKey="ParentTaskId", OtherKey="TaskId", IsForeignKey=true)]
		public Task Task1
		{
			get
			{
				return this._Task1.Entity;
			}
			set
			{
				Task previousValue = this._Task1.Entity;
				if (((previousValue != value) 
							|| (this._Task1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Task1.Entity = null;
						previousValue.Tasks.Remove(this);
					}
					this._Task1.Entity = value;
					if ((value != null))
					{
						value.Tasks.Add(this);
						this._ParentTaskId = value.TaskId;
					}
					else
					{
						this._ParentTaskId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Task1");
				}
			}
		}
		
		[Association(Name="TaskStatus_Task", Storage="_TaskStatus", ThisKey="TaskStatusId", OtherKey="TaskStatusId", IsForeignKey=true)]
		public TaskStatus TaskStatus
		{
			get
			{
				return this._TaskStatus.Entity;
			}
			set
			{
				TaskStatus previousValue = this._TaskStatus.Entity;
				if (((previousValue != value) 
							|| (this._TaskStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TaskStatus.Entity = null;
						previousValue.Tasks.Remove(this);
					}
					this._TaskStatus.Entity = value;
					if ((value != null))
					{
						value.Tasks.Add(this);
						this._TaskStatusId = value.TaskStatusId;
					}
					else
					{
						this._TaskStatusId = default(Nullable<int>);
					}
					this.SendPropertyChanged("TaskStatus");
				}
			}
		}
		
		[Association(Name="User_Task", Storage="_User", ThisKey="CreatorUserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Tasks.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Tasks.Add(this);
						this._CreatorUserId = value.UserId;
					}
					else
					{
						this._CreatorUserId = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.Task1 = this;
		}
		
		private void detach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.Task1 = null;
		}
		
		private void attach_TaskUsers(TaskUser entity)
		{
			this.SendPropertyChanging();
			entity.Task = this;
		}
		
		private void detach_TaskUsers(TaskUser entity)
		{
			this.SendPropertyChanging();
			entity.Task = null;
		}
		
		private void Initialize()
		{
			this._Tasks = new EntitySet<Task>(new Action<Task>(this.attach_Tasks), new Action<Task>(this.detach_Tasks));
			this._TaskUsers = new EntitySet<TaskUser>(new Action<TaskUser>(this.attach_TaskUsers), new Action<TaskUser>(this.detach_TaskUsers));
			this._Task1 = default(EntityRef<Task>);
			this._TaskStatus = default(EntityRef<TaskStatus>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.TaskStatus")]
	[DataContract()]
	public partial class TaskStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TaskStatusId;
		
		private string _Name;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Task> _Tasks;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTaskStatusIdChanging(int value);
    partial void OnTaskStatusIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public TaskStatus()
		{
			this.Initialize();
		}
		
		[Column(Storage="_TaskStatusId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int TaskStatusId
		{
			get
			{
				return this._TaskStatusId;
			}
			set
			{
				if ((this._TaskStatusId != value))
				{
					this.OnTaskStatusIdChanging(value);
					this.SendPropertyChanging();
					this._TaskStatusId = value;
					this.SendPropertyChanged("TaskStatusId");
					this.OnTaskStatusIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(150)")]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="TaskStatus_Task", Storage="_Tasks", ThisKey="TaskStatusId", OtherKey="TaskStatusId")]
		[DataMember(Order=3, EmitDefaultValue=false)]
		public EntitySet<Task> Tasks
		{
			get
			{
				if ((this.serializing 
							&& (this._Tasks.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Tasks;
			}
			set
			{
				this._Tasks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.TaskStatus = this;
		}
		
		private void detach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.TaskStatus = null;
		}
		
		private void Initialize()
		{
			this._Tasks = new EntitySet<Task>(new Action<Task>(this.attach_Tasks), new Action<Task>(this.detach_Tasks));
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.TaskUsers")]
	[DataContract()]
	public partial class TaskUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TaskId;
		
		private int _UserId;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Task> _Task;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTaskIdChanging(int value);
    partial void OnTaskIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    #endregion
		
		public TaskUser()
		{
			this.Initialize();
		}
		
		[Column(Storage="_TaskId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=1)]
		public int TaskId
		{
			get
			{
				return this._TaskId;
			}
			set
			{
				if ((this._TaskId != value))
				{
					if (this._Task.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskIdChanging(value);
					this.SendPropertyChanging();
					this._TaskId = value;
					this.SendPropertyChanged("TaskId");
					this.OnTaskIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=2)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Association(Name="Task_TaskUser", Storage="_Task", ThisKey="TaskId", OtherKey="TaskId", IsForeignKey=true)]
		public Task Task
		{
			get
			{
				return this._Task.Entity;
			}
			set
			{
				Task previousValue = this._Task.Entity;
				if (((previousValue != value) 
							|| (this._Task.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Task.Entity = null;
						previousValue.TaskUsers.Remove(this);
					}
					this._Task.Entity = value;
					if ((value != null))
					{
						value.TaskUsers.Add(this);
						this._TaskId = value.TaskId;
					}
					else
					{
						this._TaskId = default(int);
					}
					this.SendPropertyChanged("Task");
				}
			}
		}
		
		[Association(Name="User_TaskUser", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.TaskUsers.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.TaskUsers.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Task = default(EntityRef<Task>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.Transporter")]
	[DataContract()]
	public partial class Transporter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TransporterId;
		
		private string _Vendor;
		
		private int _LegalEntityProfileId;
		
		private System.DateTime _ModifiedDate;
		
		private string _StateId;
		
		private int _CompanyId;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Receipt> _Receipts;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<LegalEntityProfile> _LegalEntityProfile;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Company> _Company;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<State> _State;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTransporterIdChanging(int value);
    partial void OnTransporterIdChanged();
    partial void OnVendorChanging(string value);
    partial void OnVendorChanged();
    partial void OnLegalEntityProfileIdChanging(int value);
    partial void OnLegalEntityProfileIdChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnStateIdChanging(string value);
    partial void OnStateIdChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    #endregion
		
		public Transporter()
		{
			this.Initialize();
		}
		
		[Column(Storage="_TransporterId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int TransporterId
		{
			get
			{
				return this._TransporterId;
			}
			set
			{
				if ((this._TransporterId != value))
				{
					this.OnTransporterIdChanging(value);
					this.SendPropertyChanging();
					this._TransporterId = value;
					this.SendPropertyChanged("TransporterId");
					this.OnTransporterIdChanged();
				}
			}
		}
		
		[Column(Storage="_Vendor", DbType="VarChar(100)")]
		[DataMember(Order=2)]
		public string Vendor
		{
			get
			{
				return this._Vendor;
			}
			set
			{
				if ((this._Vendor != value))
				{
					this.OnVendorChanging(value);
					this.SendPropertyChanging();
					this._Vendor = value;
					this.SendPropertyChanged("Vendor");
					this.OnVendorChanged();
				}
			}
		}
		
		[Column(Storage="_LegalEntityProfileId", DbType="Int NOT NULL")]
		[DataMember(Order=3)]
		public int LegalEntityProfileId
		{
			get
			{
				return this._LegalEntityProfileId;
			}
			set
			{
				if ((this._LegalEntityProfileId != value))
				{
					if (this._LegalEntityProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLegalEntityProfileIdChanging(value);
					this.SendPropertyChanging();
					this._LegalEntityProfileId = value;
					this.SendPropertyChanged("LegalEntityProfileId");
					this.OnLegalEntityProfileIdChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		[DataMember(Order=4)]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_StateId", DbType="Char(2)")]
		[DataMember(Order=5)]
		public string StateId
		{
			get
			{
				return this._StateId;
			}
			set
			{
				if ((this._StateId != value))
				{
					if (this._State.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStateIdChanging(value);
					this.SendPropertyChanging();
					this._StateId = value;
					this.SendPropertyChanged("StateId");
					this.OnStateIdChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=6)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Association(Name="Transporter_Receipt", Storage="_Receipts", ThisKey="TransporterId,CompanyId", OtherKey="TransporterId,CompanyId")]
		[DataMember(Order=7, EmitDefaultValue=false)]
		public EntitySet<Receipt> Receipts
		{
			get
			{
				if ((this.serializing 
							&& (this._Receipts.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Receipts;
			}
			set
			{
				this._Receipts.Assign(value);
			}
		}
		
		[Association(Name="LegalEntityProfile_Transporter", Storage="_LegalEntityProfile", ThisKey="LegalEntityProfileId", OtherKey="LegalEntityProfileId", IsForeignKey=true)]
		public LegalEntityProfile LegalEntityProfile
		{
			get
			{
				return this._LegalEntityProfile.Entity;
			}
			set
			{
				LegalEntityProfile previousValue = this._LegalEntityProfile.Entity;
				if (((previousValue != value) 
							|| (this._LegalEntityProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LegalEntityProfile.Entity = null;
						previousValue.Transporters.Remove(this);
					}
					this._LegalEntityProfile.Entity = value;
					if ((value != null))
					{
						value.Transporters.Add(this);
						this._LegalEntityProfileId = value.LegalEntityProfileId;
					}
					else
					{
						this._LegalEntityProfileId = default(int);
					}
					this.SendPropertyChanged("LegalEntityProfile");
				}
			}
		}
		
		[Association(Name="Company_Transporter", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Transporters.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Transporters.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[Association(Name="State_Transporter", Storage="_State", ThisKey="StateId", OtherKey="StateId", IsForeignKey=true)]
		public State State
		{
			get
			{
				return this._State.Entity;
			}
			set
			{
				State previousValue = this._State.Entity;
				if (((previousValue != value) 
							|| (this._State.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._State.Entity = null;
						previousValue.Transporters.Remove(this);
					}
					this._State.Entity = value;
					if ((value != null))
					{
						value.Transporters.Add(this);
						this._StateId = value.StateId;
					}
					else
					{
						this._StateId = default(string);
					}
					this.SendPropertyChanged("State");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Receipts(Receipt entity)
		{
			this.SendPropertyChanging();
			entity.Transporter = this;
		}
		
		private void detach_Receipts(Receipt entity)
		{
			this.SendPropertyChanging();
			entity.Transporter = null;
		}
		
		private void Initialize()
		{
			this._Receipts = new EntitySet<Receipt>(new Action<Receipt>(this.attach_Receipts), new Action<Receipt>(this.detach_Receipts));
			this._LegalEntityProfile = default(EntityRef<LegalEntityProfile>);
			this._Company = default(EntityRef<Company>);
			this._State = default(EntityRef<State>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.UserActivityLog")]
	[DataContract()]
	public partial class UserActivityLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SessionId;
		
		private System.Nullable<int> _UserId;
		
		private System.Nullable<System.DateTime> _LoginDate;
		
		private System.Nullable<System.DateTime> _LogoffDate;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSessionIdChanging(int value);
    partial void OnSessionIdChanged();
    partial void OnUserIdChanging(System.Nullable<int> value);
    partial void OnUserIdChanged();
    partial void OnLoginDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLoginDateChanged();
    partial void OnLogoffDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLogoffDateChanged();
    #endregion
		
		public UserActivityLog()
		{
			this.Initialize();
		}
		
		[Column(Storage="_SessionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int SessionId
		{
			get
			{
				return this._SessionId;
			}
			set
			{
				if ((this._SessionId != value))
				{
					this.OnSessionIdChanging(value);
					this.SendPropertyChanging();
					this._SessionId = value;
					this.SendPropertyChanged("SessionId");
					this.OnSessionIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="Int")]
		[DataMember(Order=2)]
		public System.Nullable<int> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_LoginDate", DbType="DateTime")]
		[DataMember(Order=3)]
		public System.Nullable<System.DateTime> LoginDate
		{
			get
			{
				return this._LoginDate;
			}
			set
			{
				if ((this._LoginDate != value))
				{
					this.OnLoginDateChanging(value);
					this.SendPropertyChanging();
					this._LoginDate = value;
					this.SendPropertyChanged("LoginDate");
					this.OnLoginDateChanged();
				}
			}
		}
		
		[Column(Storage="_LogoffDate", DbType="DateTime")]
		[DataMember(Order=4)]
		public System.Nullable<System.DateTime> LogoffDate
		{
			get
			{
				return this._LogoffDate;
			}
			set
			{
				if ((this._LogoffDate != value))
				{
					this.OnLogoffDateChanging(value);
					this.SendPropertyChanging();
					this._LogoffDate = value;
					this.SendPropertyChanged("LogoffDate");
					this.OnLogoffDateChanged();
				}
			}
		}
		
		[Association(Name="User_UserActivityLog", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserActivityLogs.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserActivityLogs.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.Users")]
	[DataContract()]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private string _Password;
		
		private string _UserName;
		
		private string _Email;
		
		private System.DateTime _LastLoginDate;
		
		private System.DateTime _LastPasswordChangedDate;
		
		private System.DateTime _LastLockoutDate;
		
		private System.DateTime _CreationDate;
		
		private int _FailedPasswordAttemptCount;
		
		private bool _IsLockedOut;
		
		private bool _IsActive;
		
		private bool _HasChangePassword;
		
		private string _PasswordQuestion;
		
		private string _PasswordAnswer;
		
		private string _LastRemoteHost;
		
		private System.DateTime _LastActivityDate;
		
		private System.Nullable<int> _ProfileId;
		
		private string _PersonalizationRaw;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Alert> _Alerts;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Company> _Companies;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<CompanyUser> _CompanyUsers;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Contact> _Contacts;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Customer> _Customers;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<CustomerCall> _CustomerCalls;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<DropPayout> _DropPayouts;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Event> _Events;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<InventoryHistory> _InventoryHistories;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<PurchaseOrder> _PurchaseOrders;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<PurchaseOrder> _PurchaseOrders1;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<PurchaseOrder> _PurchaseOrders2;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<PurchaseOrder> _PurchaseOrders3;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<RepresentantUser> _RepresentantUsers;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<Task> _Tasks;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<TaskUser> _TaskUsers;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<UserActivityLog> _UserActivityLogs;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<UsersInRole> _UsersInRoles;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<WebPage> _WebPages;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Profile> _Profile;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnLastLoginDateChanging(System.DateTime value);
    partial void OnLastLoginDateChanged();
    partial void OnLastPasswordChangedDateChanging(System.DateTime value);
    partial void OnLastPasswordChangedDateChanged();
    partial void OnLastLockoutDateChanging(System.DateTime value);
    partial void OnLastLockoutDateChanged();
    partial void OnCreationDateChanging(System.DateTime value);
    partial void OnCreationDateChanged();
    partial void OnFailedPasswordAttemptCountChanging(int value);
    partial void OnFailedPasswordAttemptCountChanged();
    partial void OnIsLockedOutChanging(bool value);
    partial void OnIsLockedOutChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnHasChangePasswordChanging(bool value);
    partial void OnHasChangePasswordChanged();
    partial void OnPasswordQuestionChanging(string value);
    partial void OnPasswordQuestionChanged();
    partial void OnPasswordAnswerChanging(string value);
    partial void OnPasswordAnswerChanged();
    partial void OnLastRemoteHostChanging(string value);
    partial void OnLastRemoteHostChanged();
    partial void OnLastActivityDateChanging(System.DateTime value);
    partial void OnLastActivityDateChanged();
    partial void OnProfileIdChanging(System.Nullable<int> value);
    partial void OnProfileIdChanged();
    partial void OnPersonalizationRawChanging(string value);
    partial void OnPersonalizationRawChanged();
    #endregion
		
		public User()
		{
			this.Initialize();
		}
		
		[Column(Storage="_UserId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="VarChar(256) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="VarChar(256) NOT NULL", CanBeNull=false)]
		[DataMember(Order=3)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="VarChar(256)")]
		[DataMember(Order=4)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_LastLoginDate", DbType="DateTime NOT NULL")]
		[DataMember(Order=5)]
		public System.DateTime LastLoginDate
		{
			get
			{
				return this._LastLoginDate;
			}
			set
			{
				if ((this._LastLoginDate != value))
				{
					this.OnLastLoginDateChanging(value);
					this.SendPropertyChanging();
					this._LastLoginDate = value;
					this.SendPropertyChanged("LastLoginDate");
					this.OnLastLoginDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastPasswordChangedDate", DbType="DateTime NOT NULL")]
		[DataMember(Order=6)]
		public System.DateTime LastPasswordChangedDate
		{
			get
			{
				return this._LastPasswordChangedDate;
			}
			set
			{
				if ((this._LastPasswordChangedDate != value))
				{
					this.OnLastPasswordChangedDateChanging(value);
					this.SendPropertyChanging();
					this._LastPasswordChangedDate = value;
					this.SendPropertyChanged("LastPasswordChangedDate");
					this.OnLastPasswordChangedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastLockoutDate", DbType="DateTime NOT NULL")]
		[DataMember(Order=7)]
		public System.DateTime LastLockoutDate
		{
			get
			{
				return this._LastLockoutDate;
			}
			set
			{
				if ((this._LastLockoutDate != value))
				{
					this.OnLastLockoutDateChanging(value);
					this.SendPropertyChanging();
					this._LastLockoutDate = value;
					this.SendPropertyChanged("LastLockoutDate");
					this.OnLastLockoutDateChanged();
				}
			}
		}
		
		[Column(Storage="_CreationDate", DbType="DateTime NOT NULL")]
		[DataMember(Order=8)]
		public System.DateTime CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[Column(Storage="_FailedPasswordAttemptCount", DbType="Int NOT NULL")]
		[DataMember(Order=9)]
		public int FailedPasswordAttemptCount
		{
			get
			{
				return this._FailedPasswordAttemptCount;
			}
			set
			{
				if ((this._FailedPasswordAttemptCount != value))
				{
					this.OnFailedPasswordAttemptCountChanging(value);
					this.SendPropertyChanging();
					this._FailedPasswordAttemptCount = value;
					this.SendPropertyChanged("FailedPasswordAttemptCount");
					this.OnFailedPasswordAttemptCountChanged();
				}
			}
		}
		
		[Column(Storage="_IsLockedOut", DbType="Bit NOT NULL")]
		[DataMember(Order=10)]
		public bool IsLockedOut
		{
			get
			{
				return this._IsLockedOut;
			}
			set
			{
				if ((this._IsLockedOut != value))
				{
					this.OnIsLockedOutChanging(value);
					this.SendPropertyChanging();
					this._IsLockedOut = value;
					this.SendPropertyChanged("IsLockedOut");
					this.OnIsLockedOutChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit NOT NULL")]
		[DataMember(Order=11)]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[Column(Storage="_HasChangePassword", DbType="Bit NOT NULL")]
		[DataMember(Order=12)]
		public bool HasChangePassword
		{
			get
			{
				return this._HasChangePassword;
			}
			set
			{
				if ((this._HasChangePassword != value))
				{
					this.OnHasChangePasswordChanging(value);
					this.SendPropertyChanging();
					this._HasChangePassword = value;
					this.SendPropertyChanged("HasChangePassword");
					this.OnHasChangePasswordChanged();
				}
			}
		}
		
		[Column(Storage="_PasswordQuestion", DbType="VarChar(255)")]
		[DataMember(Order=13)]
		public string PasswordQuestion
		{
			get
			{
				return this._PasswordQuestion;
			}
			set
			{
				if ((this._PasswordQuestion != value))
				{
					this.OnPasswordQuestionChanging(value);
					this.SendPropertyChanging();
					this._PasswordQuestion = value;
					this.SendPropertyChanged("PasswordQuestion");
					this.OnPasswordQuestionChanged();
				}
			}
		}
		
		[Column(Storage="_PasswordAnswer", DbType="VarChar(255)")]
		[DataMember(Order=14)]
		public string PasswordAnswer
		{
			get
			{
				return this._PasswordAnswer;
			}
			set
			{
				if ((this._PasswordAnswer != value))
				{
					this.OnPasswordAnswerChanging(value);
					this.SendPropertyChanging();
					this._PasswordAnswer = value;
					this.SendPropertyChanged("PasswordAnswer");
					this.OnPasswordAnswerChanged();
				}
			}
		}
		
		[Column(Storage="_LastRemoteHost", DbType="VarChar(255)")]
		[DataMember(Order=15)]
		public string LastRemoteHost
		{
			get
			{
				return this._LastRemoteHost;
			}
			set
			{
				if ((this._LastRemoteHost != value))
				{
					this.OnLastRemoteHostChanging(value);
					this.SendPropertyChanging();
					this._LastRemoteHost = value;
					this.SendPropertyChanged("LastRemoteHost");
					this.OnLastRemoteHostChanged();
				}
			}
		}
		
		[Column(Storage="_LastActivityDate", DbType="DateTime NOT NULL")]
		[DataMember(Order=16)]
		public System.DateTime LastActivityDate
		{
			get
			{
				return this._LastActivityDate;
			}
			set
			{
				if ((this._LastActivityDate != value))
				{
					this.OnLastActivityDateChanging(value);
					this.SendPropertyChanging();
					this._LastActivityDate = value;
					this.SendPropertyChanged("LastActivityDate");
					this.OnLastActivityDateChanged();
				}
			}
		}
		
		[Column(Storage="_ProfileId", DbType="Int")]
		[DataMember(Order=17)]
		public System.Nullable<int> ProfileId
		{
			get
			{
				return this._ProfileId;
			}
			set
			{
				if ((this._ProfileId != value))
				{
					if (this._Profile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProfileIdChanging(value);
					this.SendPropertyChanging();
					this._ProfileId = value;
					this.SendPropertyChanged("ProfileId");
					this.OnProfileIdChanged();
				}
			}
		}
		
		[Column(Storage="_PersonalizationRaw", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=18)]
		public string PersonalizationRaw
		{
			get
			{
				return this._PersonalizationRaw;
			}
			set
			{
				if ((this._PersonalizationRaw != value))
				{
					this.OnPersonalizationRawChanging(value);
					this.SendPropertyChanging();
					this._PersonalizationRaw = value;
					this.SendPropertyChanged("PersonalizationRaw");
					this.OnPersonalizationRawChanged();
				}
			}
		}
		
		[Association(Name="User_Alert", Storage="_Alerts", ThisKey="UserId", OtherKey="UserId")]
		[DataMember(Order=19, EmitDefaultValue=false)]
		public EntitySet<Alert> Alerts
		{
			get
			{
				if ((this.serializing 
							&& (this._Alerts.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Alerts;
			}
			set
			{
				this._Alerts.Assign(value);
			}
		}
		
		[Association(Name="User_Company", Storage="_Companies", ThisKey="UserId", OtherKey="CreatorUserId")]
		[DataMember(Order=20, EmitDefaultValue=false)]
		public EntitySet<Company> Companies
		{
			get
			{
				if ((this.serializing 
							&& (this._Companies.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Companies;
			}
			set
			{
				this._Companies.Assign(value);
			}
		}
		
		[Association(Name="User_CompanyUser", Storage="_CompanyUsers", ThisKey="UserId", OtherKey="UserId")]
		[DataMember(Order=21, EmitDefaultValue=false)]
		public EntitySet<CompanyUser> CompanyUsers
		{
			get
			{
				if ((this.serializing 
							&& (this._CompanyUsers.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._CompanyUsers;
			}
			set
			{
				this._CompanyUsers.Assign(value);
			}
		}
		
		[Association(Name="User_Contact", Storage="_Contacts", ThisKey="UserId", OtherKey="UserId")]
		[DataMember(Order=22, EmitDefaultValue=false)]
		public EntitySet<Contact> Contacts
		{
			get
			{
				if ((this.serializing 
							&& (this._Contacts.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Contacts;
			}
			set
			{
				this._Contacts.Assign(value);
			}
		}
		
		[Association(Name="User_Customer", Storage="_Customers", ThisKey="UserId", OtherKey="UserId")]
		[DataMember(Order=23, EmitDefaultValue=false)]
		public EntitySet<Customer> Customers
		{
			get
			{
				if ((this.serializing 
							&& (this._Customers.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Customers;
			}
			set
			{
				this._Customers.Assign(value);
			}
		}
		
		[Association(Name="User_CustomerCall", Storage="_CustomerCalls", ThisKey="UserId", OtherKey="UserId")]
		[DataMember(Order=24, EmitDefaultValue=false)]
		public EntitySet<CustomerCall> CustomerCalls
		{
			get
			{
				if ((this.serializing 
							&& (this._CustomerCalls.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._CustomerCalls;
			}
			set
			{
				this._CustomerCalls.Assign(value);
			}
		}
		
		[Association(Name="User_DropPayout", Storage="_DropPayouts", ThisKey="UserId", OtherKey="UserId")]
		[DataMember(Order=25, EmitDefaultValue=false)]
		public EntitySet<DropPayout> DropPayouts
		{
			get
			{
				if ((this.serializing 
							&& (this._DropPayouts.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._DropPayouts;
			}
			set
			{
				this._DropPayouts.Assign(value);
			}
		}
		
		[Association(Name="User_Event", Storage="_Events", ThisKey="UserId", OtherKey="UserId")]
		[DataMember(Order=26, EmitDefaultValue=false)]
		public EntitySet<Event> Events
		{
			get
			{
				if ((this.serializing 
							&& (this._Events.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Events;
			}
			set
			{
				this._Events.Assign(value);
			}
		}
		
		[Association(Name="User_InventoryHistory", Storage="_InventoryHistories", ThisKey="UserId", OtherKey="UserId")]
		[DataMember(Order=27, EmitDefaultValue=false)]
		public EntitySet<InventoryHistory> InventoryHistories
		{
			get
			{
				if ((this.serializing 
							&& (this._InventoryHistories.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._InventoryHistories;
			}
			set
			{
				this._InventoryHistories.Assign(value);
			}
		}
		
		[Association(Name="User_PurchaseOrder", Storage="_PurchaseOrders", ThisKey="UserId", OtherKey="ApproverUserId")]
		[DataMember(Order=28, EmitDefaultValue=false)]
		public EntitySet<PurchaseOrder> PurchaseOrders
		{
			get
			{
				if ((this.serializing 
							&& (this._PurchaseOrders.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._PurchaseOrders;
			}
			set
			{
				this._PurchaseOrders.Assign(value);
			}
		}
		
		[Association(Name="User_PurchaseOrder1", Storage="_PurchaseOrders1", ThisKey="UserId", OtherKey="BuyerUserId")]
		[DataMember(Order=29, EmitDefaultValue=false)]
		public EntitySet<PurchaseOrder> PurchaseOrders1
		{
			get
			{
				if ((this.serializing 
							&& (this._PurchaseOrders1.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._PurchaseOrders1;
			}
			set
			{
				this._PurchaseOrders1.Assign(value);
			}
		}
		
		[Association(Name="User_PurchaseOrder2", Storage="_PurchaseOrders2", ThisKey="UserId", OtherKey="CreatorUserId")]
		[DataMember(Order=30, EmitDefaultValue=false)]
		public EntitySet<PurchaseOrder> PurchaseOrders2
		{
			get
			{
				if ((this.serializing 
							&& (this._PurchaseOrders2.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._PurchaseOrders2;
			}
			set
			{
				this._PurchaseOrders2.Assign(value);
			}
		}
		
		[Association(Name="User_PurchaseOrder3", Storage="_PurchaseOrders3", ThisKey="UserId", OtherKey="ReceiverUserId")]
		[DataMember(Order=31, EmitDefaultValue=false)]
		public EntitySet<PurchaseOrder> PurchaseOrders3
		{
			get
			{
				if ((this.serializing 
							&& (this._PurchaseOrders3.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._PurchaseOrders3;
			}
			set
			{
				this._PurchaseOrders3.Assign(value);
			}
		}
		
		[Association(Name="User_RepresentantUser", Storage="_RepresentantUsers", ThisKey="UserId", OtherKey="UserId")]
		[DataMember(Order=32, EmitDefaultValue=false)]
		public EntitySet<RepresentantUser> RepresentantUsers
		{
			get
			{
				if ((this.serializing 
							&& (this._RepresentantUsers.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._RepresentantUsers;
			}
			set
			{
				this._RepresentantUsers.Assign(value);
			}
		}
		
		[Association(Name="User_Task", Storage="_Tasks", ThisKey="UserId", OtherKey="CreatorUserId")]
		[DataMember(Order=33, EmitDefaultValue=false)]
		public EntitySet<Task> Tasks
		{
			get
			{
				if ((this.serializing 
							&& (this._Tasks.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Tasks;
			}
			set
			{
				this._Tasks.Assign(value);
			}
		}
		
		[Association(Name="User_TaskUser", Storage="_TaskUsers", ThisKey="UserId", OtherKey="UserId")]
		[DataMember(Order=34, EmitDefaultValue=false)]
		public EntitySet<TaskUser> TaskUsers
		{
			get
			{
				if ((this.serializing 
							&& (this._TaskUsers.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._TaskUsers;
			}
			set
			{
				this._TaskUsers.Assign(value);
			}
		}
		
		[Association(Name="User_UserActivityLog", Storage="_UserActivityLogs", ThisKey="UserId", OtherKey="UserId")]
		[DataMember(Order=35, EmitDefaultValue=false)]
		public EntitySet<UserActivityLog> UserActivityLogs
		{
			get
			{
				if ((this.serializing 
							&& (this._UserActivityLogs.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._UserActivityLogs;
			}
			set
			{
				this._UserActivityLogs.Assign(value);
			}
		}
		
		[Association(Name="User_UsersInRole", Storage="_UsersInRoles", ThisKey="UserId", OtherKey="UserId")]
		[DataMember(Order=36, EmitDefaultValue=false)]
		public EntitySet<UsersInRole> UsersInRoles
		{
			get
			{
				if ((this.serializing 
							&& (this._UsersInRoles.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._UsersInRoles;
			}
			set
			{
				this._UsersInRoles.Assign(value);
			}
		}
		
		[Association(Name="User_WebPage", Storage="_WebPages", ThisKey="UserId", OtherKey="UserId")]
		[DataMember(Order=37, EmitDefaultValue=false)]
		public EntitySet<WebPage> WebPages
		{
			get
			{
				if ((this.serializing 
							&& (this._WebPages.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._WebPages;
			}
			set
			{
				this._WebPages.Assign(value);
			}
		}
		
		[Association(Name="Profile_User", Storage="_Profile", ThisKey="ProfileId", OtherKey="ProfileId", IsForeignKey=true)]
		public Profile Profile
		{
			get
			{
				return this._Profile.Entity;
			}
			set
			{
				Profile previousValue = this._Profile.Entity;
				if (((previousValue != value) 
							|| (this._Profile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Profile.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Profile.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._ProfileId = value.ProfileId;
					}
					else
					{
						this._ProfileId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Profile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Alerts(Alert entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Alerts(Alert entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Companies(Company entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Companies(Company entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_CompanyUsers(CompanyUser entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_CompanyUsers(CompanyUser entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Contacts(Contact entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Contacts(Contact entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_CustomerCalls(CustomerCall entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_CustomerCalls(CustomerCall entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_DropPayouts(DropPayout entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_DropPayouts(DropPayout entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_InventoryHistories(InventoryHistory entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_InventoryHistories(InventoryHistory entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_PurchaseOrders(PurchaseOrder entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_PurchaseOrders(PurchaseOrder entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_PurchaseOrders1(PurchaseOrder entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_PurchaseOrders1(PurchaseOrder entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_PurchaseOrders2(PurchaseOrder entity)
		{
			this.SendPropertyChanging();
			entity.User2 = this;
		}
		
		private void detach_PurchaseOrders2(PurchaseOrder entity)
		{
			this.SendPropertyChanging();
			entity.User2 = null;
		}
		
		private void attach_PurchaseOrders3(PurchaseOrder entity)
		{
			this.SendPropertyChanging();
			entity.User3 = this;
		}
		
		private void detach_PurchaseOrders3(PurchaseOrder entity)
		{
			this.SendPropertyChanging();
			entity.User3 = null;
		}
		
		private void attach_RepresentantUsers(RepresentantUser entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_RepresentantUsers(RepresentantUser entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_TaskUsers(TaskUser entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_TaskUsers(TaskUser entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserActivityLogs(UserActivityLog entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserActivityLogs(UserActivityLog entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UsersInRoles(UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UsersInRoles(UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_WebPages(WebPage entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_WebPages(WebPage entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void Initialize()
		{
			this._Alerts = new EntitySet<Alert>(new Action<Alert>(this.attach_Alerts), new Action<Alert>(this.detach_Alerts));
			this._Companies = new EntitySet<Company>(new Action<Company>(this.attach_Companies), new Action<Company>(this.detach_Companies));
			this._CompanyUsers = new EntitySet<CompanyUser>(new Action<CompanyUser>(this.attach_CompanyUsers), new Action<CompanyUser>(this.detach_CompanyUsers));
			this._Contacts = new EntitySet<Contact>(new Action<Contact>(this.attach_Contacts), new Action<Contact>(this.detach_Contacts));
			this._Customers = new EntitySet<Customer>(new Action<Customer>(this.attach_Customers), new Action<Customer>(this.detach_Customers));
			this._CustomerCalls = new EntitySet<CustomerCall>(new Action<CustomerCall>(this.attach_CustomerCalls), new Action<CustomerCall>(this.detach_CustomerCalls));
			this._DropPayouts = new EntitySet<DropPayout>(new Action<DropPayout>(this.attach_DropPayouts), new Action<DropPayout>(this.detach_DropPayouts));
			this._Events = new EntitySet<Event>(new Action<Event>(this.attach_Events), new Action<Event>(this.detach_Events));
			this._InventoryHistories = new EntitySet<InventoryHistory>(new Action<InventoryHistory>(this.attach_InventoryHistories), new Action<InventoryHistory>(this.detach_InventoryHistories));
			this._PurchaseOrders = new EntitySet<PurchaseOrder>(new Action<PurchaseOrder>(this.attach_PurchaseOrders), new Action<PurchaseOrder>(this.detach_PurchaseOrders));
			this._PurchaseOrders1 = new EntitySet<PurchaseOrder>(new Action<PurchaseOrder>(this.attach_PurchaseOrders1), new Action<PurchaseOrder>(this.detach_PurchaseOrders1));
			this._PurchaseOrders2 = new EntitySet<PurchaseOrder>(new Action<PurchaseOrder>(this.attach_PurchaseOrders2), new Action<PurchaseOrder>(this.detach_PurchaseOrders2));
			this._PurchaseOrders3 = new EntitySet<PurchaseOrder>(new Action<PurchaseOrder>(this.attach_PurchaseOrders3), new Action<PurchaseOrder>(this.detach_PurchaseOrders3));
			this._RepresentantUsers = new EntitySet<RepresentantUser>(new Action<RepresentantUser>(this.attach_RepresentantUsers), new Action<RepresentantUser>(this.detach_RepresentantUsers));
			this._Tasks = new EntitySet<Task>(new Action<Task>(this.attach_Tasks), new Action<Task>(this.detach_Tasks));
			this._TaskUsers = new EntitySet<TaskUser>(new Action<TaskUser>(this.attach_TaskUsers), new Action<TaskUser>(this.detach_TaskUsers));
			this._UserActivityLogs = new EntitySet<UserActivityLog>(new Action<UserActivityLog>(this.attach_UserActivityLogs), new Action<UserActivityLog>(this.detach_UserActivityLogs));
			this._UsersInRoles = new EntitySet<UsersInRole>(new Action<UsersInRole>(this.attach_UsersInRoles), new Action<UsersInRole>(this.detach_UsersInRoles));
			this._WebPages = new EntitySet<WebPage>(new Action<WebPage>(this.attach_WebPages), new Action<WebPage>(this.detach_WebPages));
			this._Profile = default(EntityRef<Profile>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.UsersInRoles")]
	[DataContract()]
	public partial class UsersInRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CompanyId;
		
		private int _RoleId;
		
		private int _UserId;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<User> _User;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<CompanyUser> _CompanyUser;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnRoleIdChanging(int value);
    partial void OnRoleIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    #endregion
		
		public UsersInRole()
		{
			this.Initialize();
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=1)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._CompanyUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Column(Storage="_RoleId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=2)]
		public int RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=3)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Association(Name="User_UsersInRole", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UsersInRoles.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UsersInRoles.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[Association(Name="CompanyUser_UsersInRole", Storage="_CompanyUser", ThisKey="CompanyId,UserId", OtherKey="CompanyId,UserId", IsForeignKey=true)]
		public CompanyUser CompanyUser
		{
			get
			{
				return this._CompanyUser.Entity;
			}
			set
			{
				CompanyUser previousValue = this._CompanyUser.Entity;
				if (((previousValue != value) 
							|| (this._CompanyUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CompanyUser.Entity = null;
						previousValue.UsersInRoles.Remove(this);
					}
					this._CompanyUser.Entity = value;
					if ((value != null))
					{
						value.UsersInRoles.Add(this);
						this._CompanyId = value.CompanyId;
						this._UserId = value.UserId;
					}
					else
					{
						this._CompanyId = default(int);
						this._UserId = default(int);
					}
					this.SendPropertyChanged("CompanyUser");
				}
			}
		}
		
		[Association(Name="Role_UsersInRole", Storage="_Role", ThisKey="RoleId,CompanyId", OtherKey="RoleId,CompanyId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.UsersInRoles.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.UsersInRoles.Add(this);
						this._RoleId = value.RoleId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._RoleId = default(int);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._User = default(EntityRef<User>);
			this._CompanyUser = default(EntityRef<CompanyUser>);
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.VacationInterval")]
	[DataContract()]
	public partial class VacationInterval : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VacationIntervalId;
		
		private System.Nullable<decimal> _Limit;
		
		private System.Nullable<decimal> _Days;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVacationIntervalIdChanging(int value);
    partial void OnVacationIntervalIdChanged();
    partial void OnLimitChanging(System.Nullable<decimal> value);
    partial void OnLimitChanged();
    partial void OnDaysChanging(System.Nullable<decimal> value);
    partial void OnDaysChanged();
    #endregion
		
		public VacationInterval()
		{
			this.Initialize();
		}
		
		[Column(Storage="_VacationIntervalId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int VacationIntervalId
		{
			get
			{
				return this._VacationIntervalId;
			}
			set
			{
				if ((this._VacationIntervalId != value))
				{
					this.OnVacationIntervalIdChanging(value);
					this.SendPropertyChanging();
					this._VacationIntervalId = value;
					this.SendPropertyChanged("VacationIntervalId");
					this.OnVacationIntervalIdChanged();
				}
			}
		}
		
		[Column(Storage="_Limit", DbType="Decimal(18,2)")]
		[DataMember(Order=2)]
		public System.Nullable<decimal> Limit
		{
			get
			{
				return this._Limit;
			}
			set
			{
				if ((this._Limit != value))
				{
					this.OnLimitChanging(value);
					this.SendPropertyChanging();
					this._Limit = value;
					this.SendPropertyChanged("Limit");
					this.OnLimitChanged();
				}
			}
		}
		
		[Column(Storage="_Days", DbType="Decimal(18,2)")]
		[DataMember(Order=3)]
		public System.Nullable<decimal> Days
		{
			get
			{
				return this._Days;
			}
			set
			{
				if ((this._Days != value))
				{
					this.OnDaysChanging(value);
					this.SendPropertyChanging();
					this._Days = value;
					this.SendPropertyChanged("Days");
					this.OnDaysChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.WebPage")]
	[DataContract()]
	public partial class WebPage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _WebPageId;
		
		private System.Nullable<int> _ParentPageId;
		
		private string _Name;
		
		private string _Description;
		
		private string _RedirectUrl;
		
		private bool _IsInMenu;
		
		private bool _CanComment;
		
		private int _CompanyId;
		
		private bool _IsPublished;
		
		private System.Nullable<System.DateTime> _PublishedDate;
		
		private System.DateTime _ModifiedDate;
		
		private System.Nullable<int> _UserId;
		
		private string _MasterPage;
		
		private string _Keywords;
		
		private System.Nullable<bool> _IsMainPage;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<PageTag> _PageTags;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntitySet<WebPage> _WebPages;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<WebPage> _WebPage1;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<Company> _Company;
		
		 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 [NonSerialized] 
 private EntityRef<User> _User;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWebPageIdChanging(int value);
    partial void OnWebPageIdChanged();
    partial void OnParentPageIdChanging(System.Nullable<int> value);
    partial void OnParentPageIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnRedirectUrlChanging(string value);
    partial void OnRedirectUrlChanged();
    partial void OnIsInMenuChanging(bool value);
    partial void OnIsInMenuChanged();
    partial void OnCanCommentChanging(bool value);
    partial void OnCanCommentChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnIsPublishedChanging(bool value);
    partial void OnIsPublishedChanged();
    partial void OnPublishedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPublishedDateChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnUserIdChanging(System.Nullable<int> value);
    partial void OnUserIdChanged();
    partial void OnMasterPageChanging(string value);
    partial void OnMasterPageChanged();
    partial void OnKeywordsChanging(string value);
    partial void OnKeywordsChanged();
    partial void OnIsMainPageChanging(System.Nullable<bool> value);
    partial void OnIsMainPageChanged();
    #endregion
		
		public WebPage()
		{
			this.Initialize();
		}
		
		[Column(Storage="_WebPageId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int WebPageId
		{
			get
			{
				return this._WebPageId;
			}
			set
			{
				if ((this._WebPageId != value))
				{
					this.OnWebPageIdChanging(value);
					this.SendPropertyChanging();
					this._WebPageId = value;
					this.SendPropertyChanged("WebPageId");
					this.OnWebPageIdChanged();
				}
			}
		}
		
		[Column(Storage="_ParentPageId", DbType="Int")]
		[DataMember(Order=2)]
		public System.Nullable<int> ParentPageId
		{
			get
			{
				return this._ParentPageId;
			}
			set
			{
				if ((this._ParentPageId != value))
				{
					if (this._WebPage1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentPageIdChanging(value);
					this.SendPropertyChanging();
					this._ParentPageId = value;
					this.SendPropertyChanged("ParentPageId");
					this.OnParentPageIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(1024) NOT NULL", CanBeNull=false)]
		[DataMember(Order=3)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=4)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_RedirectUrl", DbType="VarChar(1024)")]
		[DataMember(Order=5)]
		public string RedirectUrl
		{
			get
			{
				return this._RedirectUrl;
			}
			set
			{
				if ((this._RedirectUrl != value))
				{
					this.OnRedirectUrlChanging(value);
					this.SendPropertyChanging();
					this._RedirectUrl = value;
					this.SendPropertyChanged("RedirectUrl");
					this.OnRedirectUrlChanged();
				}
			}
		}
		
		[Column(Storage="_IsInMenu", DbType="Bit NOT NULL")]
		[DataMember(Order=6)]
		public bool IsInMenu
		{
			get
			{
				return this._IsInMenu;
			}
			set
			{
				if ((this._IsInMenu != value))
				{
					this.OnIsInMenuChanging(value);
					this.SendPropertyChanging();
					this._IsInMenu = value;
					this.SendPropertyChanged("IsInMenu");
					this.OnIsInMenuChanged();
				}
			}
		}
		
		[Column(Storage="_CanComment", DbType="Bit NOT NULL")]
		[DataMember(Order=7)]
		public bool CanComment
		{
			get
			{
				return this._CanComment;
			}
			set
			{
				if ((this._CanComment != value))
				{
					this.OnCanCommentChanging(value);
					this.SendPropertyChanging();
					this._CanComment = value;
					this.SendPropertyChanged("CanComment");
					this.OnCanCommentChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=8)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._WebPage1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Column(Storage="_IsPublished", DbType="Bit NOT NULL")]
		[DataMember(Order=9)]
		public bool IsPublished
		{
			get
			{
				return this._IsPublished;
			}
			set
			{
				if ((this._IsPublished != value))
				{
					this.OnIsPublishedChanging(value);
					this.SendPropertyChanging();
					this._IsPublished = value;
					this.SendPropertyChanged("IsPublished");
					this.OnIsPublishedChanged();
				}
			}
		}
		
		[Column(Storage="_PublishedDate", DbType="DateTime")]
		[DataMember(Order=10)]
		public System.Nullable<System.DateTime> PublishedDate
		{
			get
			{
				return this._PublishedDate;
			}
			set
			{
				if ((this._PublishedDate != value))
				{
					this.OnPublishedDateChanging(value);
					this.SendPropertyChanging();
					this._PublishedDate = value;
					this.SendPropertyChanged("PublishedDate");
					this.OnPublishedDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		[DataMember(Order=11)]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="Int")]
		[DataMember(Order=12)]
		public System.Nullable<int> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_MasterPage", DbType="VarChar(1024)")]
		[DataMember(Order=13)]
		public string MasterPage
		{
			get
			{
				return this._MasterPage;
			}
			set
			{
				if ((this._MasterPage != value))
				{
					this.OnMasterPageChanging(value);
					this.SendPropertyChanging();
					this._MasterPage = value;
					this.SendPropertyChanged("MasterPage");
					this.OnMasterPageChanged();
				}
			}
		}
		
		[Column(Storage="_Keywords", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=14)]
		public string Keywords
		{
			get
			{
				return this._Keywords;
			}
			set
			{
				if ((this._Keywords != value))
				{
					this.OnKeywordsChanging(value);
					this.SendPropertyChanging();
					this._Keywords = value;
					this.SendPropertyChanged("Keywords");
					this.OnKeywordsChanged();
				}
			}
		}
		
		[Column(Storage="_IsMainPage", DbType="Bit")]
		[DataMember(Order=15)]
		public System.Nullable<bool> IsMainPage
		{
			get
			{
				return this._IsMainPage;
			}
			set
			{
				if ((this._IsMainPage != value))
				{
					this.OnIsMainPageChanging(value);
					this.SendPropertyChanging();
					this._IsMainPage = value;
					this.SendPropertyChanged("IsMainPage");
					this.OnIsMainPageChanged();
				}
			}
		}
		
		[Association(Name="WebPage_PageTag", Storage="_PageTags", ThisKey="WebPageId,CompanyId", OtherKey="WebPageId,CompanyId")]
		[DataMember(Order=16, EmitDefaultValue=false)]
		public EntitySet<PageTag> PageTags
		{
			get
			{
				if ((this.serializing 
							&& (this._PageTags.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._PageTags;
			}
			set
			{
				this._PageTags.Assign(value);
			}
		}
		
		[Association(Name="WebPage_WebPage", Storage="_WebPages", ThisKey="WebPageId,CompanyId", OtherKey="ParentPageId,CompanyId")]
		[DataMember(Order=17, EmitDefaultValue=false)]
		public EntitySet<WebPage> WebPages
		{
			get
			{
				if ((this.serializing 
							&& (this._WebPages.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._WebPages;
			}
			set
			{
				this._WebPages.Assign(value);
			}
		}
		
		[Association(Name="WebPage_WebPage", Storage="_WebPage1", ThisKey="ParentPageId,CompanyId", OtherKey="WebPageId,CompanyId", IsForeignKey=true)]
		public WebPage WebPage1
		{
			get
			{
				return this._WebPage1.Entity;
			}
			set
			{
				WebPage previousValue = this._WebPage1.Entity;
				if (((previousValue != value) 
							|| (this._WebPage1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WebPage1.Entity = null;
						previousValue.WebPages.Remove(this);
					}
					this._WebPage1.Entity = value;
					if ((value != null))
					{
						value.WebPages.Add(this);
						this._ParentPageId = value.WebPageId;
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._ParentPageId = default(Nullable<int>);
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("WebPage1");
				}
			}
		}
		
		[Association(Name="Company_WebPage", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.WebPages.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.WebPages.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[Association(Name="User_WebPage", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.WebPages.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.WebPages.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PageTags(PageTag entity)
		{
			this.SendPropertyChanging();
			entity.WebPage = this;
		}
		
		private void detach_PageTags(PageTag entity)
		{
			this.SendPropertyChanging();
			entity.WebPage = null;
		}
		
		private void attach_WebPages(WebPage entity)
		{
			this.SendPropertyChanging();
			entity.WebPage1 = this;
		}
		
		private void detach_WebPages(WebPage entity)
		{
			this.SendPropertyChanging();
			entity.WebPage1 = null;
		}
		
		private void Initialize()
		{
			this._PageTags = new EntitySet<PageTag>(new Action<PageTag>(this.attach_PageTags), new Action<PageTag>(this.detach_PageTags));
			this._WebPages = new EntitySet<WebPage>(new Action<WebPage>(this.attach_WebPages), new Action<WebPage>(this.detach_WebPages));
			this._WebPage1 = default(EntityRef<WebPage>);
			this._Company = default(EntityRef<Company>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
}
#pragma warning restore 1591
